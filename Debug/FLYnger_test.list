
FLYnger_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055c4  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  080057c0  080057c0  000157c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a00  08005a00  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08005a00  08005a00  00015a00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a08  08005a08  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a08  08005a08  00015a08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a0c  08005a0c  00015a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08005a10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  200001dc  08005bec  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002a8  08005bec  000202a8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6b4  00000000  00000000  0002020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e1f  00000000  00000000  0002d8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ba8  00000000  00000000  0002f6e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000aa0  00000000  00000000  00030288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000290a1  00000000  00000000  00030d28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a50f  00000000  00000000  00059dc9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fdfe4  00000000  00000000  000642d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001622bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035c0  00000000  00000000  00162338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	200001dc 	.word	0x200001dc
 8000214:	00000000 	.word	0x00000000
 8000218:	080057a4 	.word	0x080057a4

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	200001e0 	.word	0x200001e0
 8000234:	080057a4 	.word	0x080057a4

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b972 	b.w	8000544 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9e08      	ldr	r6, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	4688      	mov	r8, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14b      	bne.n	800031e <__udivmoddi4+0xa6>
 8000286:	428a      	cmp	r2, r1
 8000288:	4615      	mov	r5, r2
 800028a:	d967      	bls.n	800035c <__udivmoddi4+0xe4>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b14a      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000292:	f1c2 0720 	rsb	r7, r2, #32
 8000296:	fa01 f302 	lsl.w	r3, r1, r2
 800029a:	fa20 f707 	lsr.w	r7, r0, r7
 800029e:	4095      	lsls	r5, r2
 80002a0:	ea47 0803 	orr.w	r8, r7, r3
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbb8 f7fe 	udiv	r7, r8, lr
 80002b0:	fa1f fc85 	uxth.w	ip, r5
 80002b4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002b8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002bc:	fb07 f10c 	mul.w	r1, r7, ip
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18eb      	adds	r3, r5, r3
 80002c6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ca:	f080 811b 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8118 	bls.w	8000504 <__udivmoddi4+0x28c>
 80002d4:	3f02      	subs	r7, #2
 80002d6:	442b      	add	r3, r5
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002e0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ec:	45a4      	cmp	ip, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	192c      	adds	r4, r5, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8107 	bcs.w	8000508 <__udivmoddi4+0x290>
 80002fa:	45a4      	cmp	ip, r4
 80002fc:	f240 8104 	bls.w	8000508 <__udivmoddi4+0x290>
 8000300:	3802      	subs	r0, #2
 8000302:	442c      	add	r4, r5
 8000304:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000308:	eba4 040c 	sub.w	r4, r4, ip
 800030c:	2700      	movs	r7, #0
 800030e:	b11e      	cbz	r6, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c6 4300 	strd	r4, r3, [r6]
 8000318:	4639      	mov	r1, r7
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0xbe>
 8000322:	2e00      	cmp	r6, #0
 8000324:	f000 80eb 	beq.w	80004fe <__udivmoddi4+0x286>
 8000328:	2700      	movs	r7, #0
 800032a:	e9c6 0100 	strd	r0, r1, [r6]
 800032e:	4638      	mov	r0, r7
 8000330:	4639      	mov	r1, r7
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f783 	clz	r7, r3
 800033a:	2f00      	cmp	r7, #0
 800033c:	d147      	bne.n	80003ce <__udivmoddi4+0x156>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0xd0>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80fa 	bhi.w	800053c <__udivmoddi4+0x2c4>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0303 	sbc.w	r3, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	4698      	mov	r8, r3
 8000352:	2e00      	cmp	r6, #0
 8000354:	d0e0      	beq.n	8000318 <__udivmoddi4+0xa0>
 8000356:	e9c6 4800 	strd	r4, r8, [r6]
 800035a:	e7dd      	b.n	8000318 <__udivmoddi4+0xa0>
 800035c:	b902      	cbnz	r2, 8000360 <__udivmoddi4+0xe8>
 800035e:	deff      	udf	#255	; 0xff
 8000360:	fab2 f282 	clz	r2, r2
 8000364:	2a00      	cmp	r2, #0
 8000366:	f040 808f 	bne.w	8000488 <__udivmoddi4+0x210>
 800036a:	1b49      	subs	r1, r1, r5
 800036c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000370:	fa1f f885 	uxth.w	r8, r5
 8000374:	2701      	movs	r7, #1
 8000376:	fbb1 fcfe 	udiv	ip, r1, lr
 800037a:	0c23      	lsrs	r3, r4, #16
 800037c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb08 f10c 	mul.w	r1, r8, ip
 8000388:	4299      	cmp	r1, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x124>
 800038c:	18eb      	adds	r3, r5, r3
 800038e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x122>
 8000394:	4299      	cmp	r1, r3
 8000396:	f200 80cd 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 800039a:	4684      	mov	ip, r0
 800039c:	1a59      	subs	r1, r3, r1
 800039e:	b2a3      	uxth	r3, r4
 80003a0:	fbb1 f0fe 	udiv	r0, r1, lr
 80003a4:	fb0e 1410 	mls	r4, lr, r0, r1
 80003a8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ac:	fb08 f800 	mul.w	r8, r8, r0
 80003b0:	45a0      	cmp	r8, r4
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x14c>
 80003b4:	192c      	adds	r4, r5, r4
 80003b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x14a>
 80003bc:	45a0      	cmp	r8, r4
 80003be:	f200 80b6 	bhi.w	800052e <__udivmoddi4+0x2b6>
 80003c2:	4618      	mov	r0, r3
 80003c4:	eba4 0408 	sub.w	r4, r4, r8
 80003c8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003cc:	e79f      	b.n	800030e <__udivmoddi4+0x96>
 80003ce:	f1c7 0c20 	rsb	ip, r7, #32
 80003d2:	40bb      	lsls	r3, r7
 80003d4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003d8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003dc:	fa01 f407 	lsl.w	r4, r1, r7
 80003e0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003e4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003e8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003ec:	4325      	orrs	r5, r4
 80003ee:	fbb3 f9f8 	udiv	r9, r3, r8
 80003f2:	0c2c      	lsrs	r4, r5, #16
 80003f4:	fb08 3319 	mls	r3, r8, r9, r3
 80003f8:	fa1f fa8e 	uxth.w	sl, lr
 80003fc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000400:	fb09 f40a 	mul.w	r4, r9, sl
 8000404:	429c      	cmp	r4, r3
 8000406:	fa02 f207 	lsl.w	r2, r2, r7
 800040a:	fa00 f107 	lsl.w	r1, r0, r7
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b0>
 8000410:	eb1e 0303 	adds.w	r3, lr, r3
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	f080 8087 	bcs.w	800052a <__udivmoddi4+0x2b2>
 800041c:	429c      	cmp	r4, r3
 800041e:	f240 8084 	bls.w	800052a <__udivmoddi4+0x2b2>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4473      	add	r3, lr
 8000428:	1b1b      	subs	r3, r3, r4
 800042a:	b2ad      	uxth	r5, r5
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3310 	mls	r3, r8, r0, r3
 8000434:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000438:	fb00 fa0a 	mul.w	sl, r0, sl
 800043c:	45a2      	cmp	sl, r4
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1da>
 8000440:	eb1e 0404 	adds.w	r4, lr, r4
 8000444:	f100 33ff 	add.w	r3, r0, #4294967295
 8000448:	d26b      	bcs.n	8000522 <__udivmoddi4+0x2aa>
 800044a:	45a2      	cmp	sl, r4
 800044c:	d969      	bls.n	8000522 <__udivmoddi4+0x2aa>
 800044e:	3802      	subs	r0, #2
 8000450:	4474      	add	r4, lr
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	eba4 040a 	sub.w	r4, r4, sl
 800045e:	454c      	cmp	r4, r9
 8000460:	46c2      	mov	sl, r8
 8000462:	464b      	mov	r3, r9
 8000464:	d354      	bcc.n	8000510 <__udivmoddi4+0x298>
 8000466:	d051      	beq.n	800050c <__udivmoddi4+0x294>
 8000468:	2e00      	cmp	r6, #0
 800046a:	d069      	beq.n	8000540 <__udivmoddi4+0x2c8>
 800046c:	ebb1 050a 	subs.w	r5, r1, sl
 8000470:	eb64 0403 	sbc.w	r4, r4, r3
 8000474:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000478:	40fd      	lsrs	r5, r7
 800047a:	40fc      	lsrs	r4, r7
 800047c:	ea4c 0505 	orr.w	r5, ip, r5
 8000480:	e9c6 5400 	strd	r5, r4, [r6]
 8000484:	2700      	movs	r7, #0
 8000486:	e747      	b.n	8000318 <__udivmoddi4+0xa0>
 8000488:	f1c2 0320 	rsb	r3, r2, #32
 800048c:	fa20 f703 	lsr.w	r7, r0, r3
 8000490:	4095      	lsls	r5, r2
 8000492:	fa01 f002 	lsl.w	r0, r1, r2
 8000496:	fa21 f303 	lsr.w	r3, r1, r3
 800049a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800049e:	4338      	orrs	r0, r7
 80004a0:	0c01      	lsrs	r1, r0, #16
 80004a2:	fbb3 f7fe 	udiv	r7, r3, lr
 80004a6:	fa1f f885 	uxth.w	r8, r5
 80004aa:	fb0e 3317 	mls	r3, lr, r7, r3
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb07 f308 	mul.w	r3, r7, r8
 80004b6:	428b      	cmp	r3, r1
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x256>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004c4:	d22f      	bcs.n	8000526 <__udivmoddi4+0x2ae>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d92d      	bls.n	8000526 <__udivmoddi4+0x2ae>
 80004ca:	3f02      	subs	r7, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1acb      	subs	r3, r1, r3
 80004d0:	b281      	uxth	r1, r0
 80004d2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004d6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004da:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004de:	fb00 f308 	mul.w	r3, r0, r8
 80004e2:	428b      	cmp	r3, r1
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x27e>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004ec:	d217      	bcs.n	800051e <__udivmoddi4+0x2a6>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d915      	bls.n	800051e <__udivmoddi4+0x2a6>
 80004f2:	3802      	subs	r0, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1ac9      	subs	r1, r1, r3
 80004f8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004fc:	e73b      	b.n	8000376 <__udivmoddi4+0xfe>
 80004fe:	4637      	mov	r7, r6
 8000500:	4630      	mov	r0, r6
 8000502:	e709      	b.n	8000318 <__udivmoddi4+0xa0>
 8000504:	4607      	mov	r7, r0
 8000506:	e6e7      	b.n	80002d8 <__udivmoddi4+0x60>
 8000508:	4618      	mov	r0, r3
 800050a:	e6fb      	b.n	8000304 <__udivmoddi4+0x8c>
 800050c:	4541      	cmp	r1, r8
 800050e:	d2ab      	bcs.n	8000468 <__udivmoddi4+0x1f0>
 8000510:	ebb8 0a02 	subs.w	sl, r8, r2
 8000514:	eb69 020e 	sbc.w	r2, r9, lr
 8000518:	3801      	subs	r0, #1
 800051a:	4613      	mov	r3, r2
 800051c:	e7a4      	b.n	8000468 <__udivmoddi4+0x1f0>
 800051e:	4660      	mov	r0, ip
 8000520:	e7e9      	b.n	80004f6 <__udivmoddi4+0x27e>
 8000522:	4618      	mov	r0, r3
 8000524:	e795      	b.n	8000452 <__udivmoddi4+0x1da>
 8000526:	4667      	mov	r7, ip
 8000528:	e7d1      	b.n	80004ce <__udivmoddi4+0x256>
 800052a:	4681      	mov	r9, r0
 800052c:	e77c      	b.n	8000428 <__udivmoddi4+0x1b0>
 800052e:	3802      	subs	r0, #2
 8000530:	442c      	add	r4, r5
 8000532:	e747      	b.n	80003c4 <__udivmoddi4+0x14c>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	442b      	add	r3, r5
 800053a:	e72f      	b.n	800039c <__udivmoddi4+0x124>
 800053c:	4638      	mov	r0, r7
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xda>
 8000540:	4637      	mov	r7, r6
 8000542:	e6e9      	b.n	8000318 <__udivmoddi4+0xa0>

08000544 <__aeabi_idiv0>:
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop

08000548 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	f043 0201 	orr.w	r2, r3, #1
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	601a      	str	r2, [r3, #0]
}
 800055c:	bf00      	nop
 800055e:	370c      	adds	r7, #12
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr

08000568 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000568:	b480      	push	{r7}
 800056a:	b083      	sub	sp, #12
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1,TIM_CR1_ARPE);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	601a      	str	r2, [r3, #0]
}
 800057c:	bf00      	nop
 800057e:	370c      	adds	r7, #12
 8000580:	46bd      	mov	sp, r7
 8000582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000586:	4770      	bx	lr

08000588 <LL_TIM_SetCounter>:
  * @param  TIMx Timer instance
  * @param  Counter Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounter(TIM_TypeDef *TIMx, uint32_t Counter)
{
 8000588:	b480      	push	{r7}
 800058a:	b083      	sub	sp, #12
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	625a      	str	r2, [r3, #36]	; 0x24
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr

080005a4 <LL_TIM_GetCounter>:
  * @rmtoll CNT          CNT           LL_TIM_GetCounter
  * @param  TIMx Timer instance
  * @retval Counter value (between Min_Data=0 and Max_Data=0xFFFF or 0xFFFFFFFF)
  */
__STATIC_INLINE uint32_t LL_TIM_GetCounter(TIM_TypeDef *TIMx)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	370c      	adds	r7, #12
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr

080005bc <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	689a      	ldr	r2, [r3, #8]
 80005ca:	4b06      	ldr	r3, [pc, #24]	; (80005e4 <LL_TIM_SetClockSource+0x28>)
 80005cc:	4013      	ands	r3, r2
 80005ce:	683a      	ldr	r2, [r7, #0]
 80005d0:	431a      	orrs	r2, r3
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	609a      	str	r2, [r3, #8]
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	fffebff8 	.word	0xfffebff8

080005e8 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	431a      	orrs	r2, r3
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	605a      	str	r2, [r3, #4]
}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800060e:	b480      	push	{r7}
 8000610:	b083      	sub	sp, #12
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
 8000616:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	685b      	ldr	r3, [r3, #4]
 800061c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000620:	683b      	ldr	r3, [r7, #0]
 8000622:	431a      	orrs	r2, r3
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	605a      	str	r2, [r3, #4]
}
 8000628:	bf00      	nop
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	609a      	str	r2, [r3, #8]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000654:	b480      	push	{r7}
 8000656:	b085      	sub	sp, #20
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800065c:	4b08      	ldr	r3, [pc, #32]	; (8000680 <LL_APB2_GRP1_EnableClock+0x2c>)
 800065e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000660:	4907      	ldr	r1, [pc, #28]	; (8000680 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	4313      	orrs	r3, r2
 8000666:	644b      	str	r3, [r1, #68]	; 0x44
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <LL_APB2_GRP1_EnableClock+0x2c>)
 800066a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4013      	ands	r3, r2
 8000670:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000672:	68fb      	ldr	r3, [r7, #12]
}
 8000674:	bf00      	nop
 8000676:	3714      	adds	r7, #20
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr
 8000680:	40023800 	.word	0x40023800
 8000684:	00000000 	.word	0x00000000

08000688 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b0b8      	sub	sp, #224	; 0xe0
 800068c:	af02      	add	r7, sp, #8
	uint8_t BMX_buff[12];//sono 12 byte: da LSB a MSB da X a Z SIA DI GYRO CHE DI ACC

	int16_t Gyr_Data[3]; //variabile con segno dove vengono salvati  dati completi a 16 bit del giroscopio

	float Omega[3];//3 componenti di velocità angolare con segno in virgola mobile
	float Omega_1[3]={0, 0, 0};// dato raw al sample precedente
 800068e:	f04f 0300 	mov.w	r3, #0
 8000692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000696:	f04f 0300 	mov.w	r3, #0
 800069a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800069e:	f04f 0300 	mov.w	r3, #0
 80006a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	float OmegaLPF[3];//dato filtrato sample attuale
	float OmegaLPF_1[3]={0, 0, 0};//dato filtrato sample precedente
 80006a6:	f04f 0300 	mov.w	r3, #0
 80006aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80006ae:	f04f 0300 	mov.w	r3, #0
 80006b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80006b6:	f04f 0300 	mov.w	r3, #0
 80006ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	float Gyr_cal[3]={0, 0, 0}; //Three constant evaluated in every start up to calibrate the gyro
 80006be:	f04f 0300 	mov.w	r3, #0
 80006c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80006c6:	f04f 0300 	mov.w	r3, #0
 80006ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80006ce:	f04f 0300 	mov.w	r3, #0
 80006d2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    //Variabili dell'accelerometro
	int16_t Acc_Data[3]; //variabile con segno dove vengono salvati  dati completi a 16 bit del giroscopio

	float Acc[3];//3 componenti di velocità angolare con segno in virgola mobile |||| dato raw al sample attuale
	float Acc_1[3]={0, 0, 0};// dato raw al sample precedente
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	663b      	str	r3, [r7, #96]	; 0x60
 80006dc:	f04f 0300 	mov.w	r3, #0
 80006e0:	667b      	str	r3, [r7, #100]	; 0x64
 80006e2:	f04f 0300 	mov.w	r3, #0
 80006e6:	66bb      	str	r3, [r7, #104]	; 0x68
	float AccLPF[3];//dato filtrato sample attuale
	float AccLPF_1[3]={0, 0, 0};//dato filtrato sample precedente
 80006e8:	f04f 0300 	mov.w	r3, #0
 80006ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80006ee:	f04f 0300 	mov.w	r3, #0
 80006f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80006f4:	f04f 0300 	mov.w	r3, #0
 80006f8:	653b      	str	r3, [r7, #80]	; 0x50
	float Acc_cal[3]={0, 0, 0}; //Three constant evaluated in every start up to calibrate the gyro
 80006fa:	f04f 0300 	mov.w	r3, #0
 80006fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000700:	f04f 0300 	mov.w	r3, #0
 8000704:	643b      	str	r3, [r7, #64]	; 0x40
 8000706:	f04f 0300 	mov.w	r3, #0
 800070a:	647b      	str	r3, [r7, #68]	; 0x44

	float BMX_Tx_LPF_buff[6]; //buffer to store Gyro and ACC values to send via usart
	//type casting for this variable will be executed in the Uart TX function only on the pointer, so to maitain the bit sequence iltere by the software


	uint16_t counter = 1; //Counter to toggle the led in functioning
 800070c:	2301      	movs	r3, #1
 800070e:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000712:	f000 feb0 	bl	8001476 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000716:	f000 fb95 	bl	8000e44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800071a:	f000 fcc9 	bl	80010b0 <MX_GPIO_Init>
  MX_USART3_Init();
 800071e:	f000 fc9b 	bl	8001058 <MX_USART3_Init>
  MX_I2C1_Init();
 8000722:	f000 fc23 	bl	8000f6c <MX_I2C1_Init>
  MX_TIM1_Init();
 8000726:	f000 fc61 	bl	8000fec <MX_TIM1_Init>
   * # GREEN LED SOLID: initialization and calibration status;
   * # BLUE LED BLINKIING (1 Hz): normal runtime of control loop.
   */


  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //turn on green LED for the initialization
 800072a:	2101      	movs	r1, #1
 800072c:	4833      	ldr	r0, [pc, #204]	; (80007fc <main+0x174>)
 800072e:	f001 f9ca 	bl	8001ac6 <HAL_GPIO_TogglePin>

  HAL_Delay(10);
 8000732:	200a      	movs	r0, #10
 8000734:	f000 fefc 	bl	8001530 <HAL_Delay>


  /*######### BMX160 CONFIGURATION##########*/

    //codice per inizializzare e configurare il giroscopio
	buff[0]=GyroConfRegister;//invio l'indirizzo del configuratore del giroscopio
 8000738:	2342      	movs	r3, #66	; 0x42
 800073a:	713b      	strb	r3, [r7, #4]
	buff[1]=0b00011100;//set the Gyro conf register (see the red notebook page 10)
 800073c:	231c      	movs	r3, #28
 800073e:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, BMX160Address, buff, 2, HAL_MAX_DELAY);
 8000740:	23d0      	movs	r3, #208	; 0xd0
 8000742:	b299      	uxth	r1, r3
 8000744:	1d3a      	adds	r2, r7, #4
 8000746:	f04f 33ff 	mov.w	r3, #4294967295
 800074a:	9300      	str	r3, [sp, #0]
 800074c:	2302      	movs	r3, #2
 800074e:	482c      	ldr	r0, [pc, #176]	; (8000800 <main+0x178>)
 8000750:	f001 fa64 	bl	8001c1c <HAL_I2C_Master_Transmit>

	//codice per inizializzare e configurare l'accelerometro
	buff[0]=AccConfRegister;//invio l'indirizzo del configuratore dell' accelerometro
 8000754:	2340      	movs	r3, #64	; 0x40
 8000756:	713b      	strb	r3, [r7, #4]
	buff[1]=0b00101100;//set the Acc conf register
 8000758:	232c      	movs	r3, #44	; 0x2c
 800075a:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMX160Address, buff, 2, HAL_MAX_DELAY);
 800075c:	23d0      	movs	r3, #208	; 0xd0
 800075e:	b299      	uxth	r1, r3
 8000760:	1d3a      	adds	r2, r7, #4
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
 8000766:	9300      	str	r3, [sp, #0]
 8000768:	2302      	movs	r3, #2
 800076a:	4825      	ldr	r0, [pc, #148]	; (8000800 <main+0x178>)
 800076c:	f001 fa56 	bl	8001c1c <HAL_I2C_Master_Transmit>
 8000770:	4603      	mov	r3, r0
 8000772:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2

	//codice per configurare il range dell'accelerometro
	buff[0]=0x41;//invio l'indirizzo del configuratore del range
 8000776:	2341      	movs	r3, #65	; 0x41
 8000778:	713b      	strb	r3, [r7, #4]
	buff[1]=0b00001000;//set the Acc range register (see the red notebook appropriate page)
 800077a:	2308      	movs	r3, #8
 800077c:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMX160Address, buff, 2, HAL_MAX_DELAY);
 800077e:	23d0      	movs	r3, #208	; 0xd0
 8000780:	b299      	uxth	r1, r3
 8000782:	1d3a      	adds	r2, r7, #4
 8000784:	f04f 33ff 	mov.w	r3, #4294967295
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	481c      	ldr	r0, [pc, #112]	; (8000800 <main+0x178>)
 800078e:	f001 fa45 	bl	8001c1c <HAL_I2C_Master_Transmit>
 8000792:	4603      	mov	r3, r0
 8000794:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2


    HAL_Delay(800);
 8000798:	f44f 7048 	mov.w	r0, #800	; 0x320
 800079c:	f000 fec8 	bl	8001530 <HAL_Delay>

	//change the power mode to normal for the gyro
	buff[0]=CMD;
 80007a0:	237e      	movs	r3, #126	; 0x7e
 80007a2:	713b      	strb	r3, [r7, #4]
    buff[1]=0x15;//command for normal mode for gyro;
 80007a4:	2315      	movs	r3, #21
 80007a6:	717b      	strb	r3, [r7, #5]
	HAL_I2C_Master_Transmit(&hi2c1, BMX160Address, buff, 2, HAL_MAX_DELAY);
 80007a8:	23d0      	movs	r3, #208	; 0xd0
 80007aa:	b299      	uxth	r1, r3
 80007ac:	1d3a      	adds	r2, r7, #4
 80007ae:	f04f 33ff 	mov.w	r3, #4294967295
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	2302      	movs	r3, #2
 80007b6:	4812      	ldr	r0, [pc, #72]	; (8000800 <main+0x178>)
 80007b8:	f001 fa30 	bl	8001c1c <HAL_I2C_Master_Transmit>

	//change the power mode to normal for the Acc see appropriate page of the notebook
	buff[0]=CMD;
 80007bc:	237e      	movs	r3, #126	; 0x7e
 80007be:	713b      	strb	r3, [r7, #4]
	buff[1]=0x11;//command for normal mode for accelerometer;
 80007c0:	2311      	movs	r3, #17
 80007c2:	717b      	strb	r3, [r7, #5]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMX160Address, buff, 2, HAL_MAX_DELAY);
 80007c4:	23d0      	movs	r3, #208	; 0xd0
 80007c6:	b299      	uxth	r1, r3
 80007c8:	1d3a      	adds	r2, r7, #4
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
 80007ce:	9300      	str	r3, [sp, #0]
 80007d0:	2302      	movs	r3, #2
 80007d2:	480b      	ldr	r0, [pc, #44]	; (8000800 <main+0x178>)
 80007d4:	f001 fa22 	bl	8001c1c <HAL_I2C_Master_Transmit>
 80007d8:	4603      	mov	r3, r0
 80007da:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2


	/*###########us timer enabling (counter)#############*/

	LL_TIM_EnableCounter(TIM1); //func to enable the counter based on TIM1 with microseconds tick
 80007de:	4809      	ldr	r0, [pc, #36]	; (8000804 <main+0x17c>)
 80007e0:	f7ff feb2 	bl	8000548 <LL_TIM_EnableCounter>
	LL_TIM_SetCounter(TIM1,0);  //func to set set counter to 0value
 80007e4:	2100      	movs	r1, #0
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <main+0x17c>)
 80007e8:	f7ff fece 	bl	8000588 <LL_TIM_SetCounter>


	HAL_Delay(1000);
 80007ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80007f0:	f000 fe9e 	bl	8001530 <HAL_Delay>
	 *  calculated and subtracted to the non filtered measures
	 *  taken during functioning
	 *
	 */

	for (i_gyro_cal=0; i_gyro_cal<1000; i_gyro_cal++) {
 80007f4:	2300      	movs	r3, #0
 80007f6:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 80007fa:	e103      	b.n	8000a04 <main+0x37c>
 80007fc:	40020400 	.word	0x40020400
 8000800:	20000204 	.word	0x20000204
 8000804:	40010000 	.word	0x40010000

		LL_TIM_SetCounter(TIM1,0);
 8000808:	2100      	movs	r1, #0
 800080a:	48e5      	ldr	r0, [pc, #916]	; (8000ba0 <main+0x518>)
 800080c:	f7ff febc 	bl	8000588 <LL_TIM_SetCounter>

		buff[0]=GyroDataRegister[0];
 8000810:	230c      	movs	r3, #12
 8000812:	713b      	strb	r3, [r7, #4]
		  HAL_I2C_Master_Transmit(&hi2c1, BMX160Address, buff, 1, HAL_MAX_DELAY); //transmitting 1 byte with the register of the LSBx
 8000814:	23d0      	movs	r3, #208	; 0xd0
 8000816:	b299      	uxth	r1, r3
 8000818:	1d3a      	adds	r2, r7, #4
 800081a:	f04f 33ff 	mov.w	r3, #4294967295
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2301      	movs	r3, #1
 8000822:	48e0      	ldr	r0, [pc, #896]	; (8000ba4 <main+0x51c>)
 8000824:	f001 f9fa 	bl	8001c1c <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c1, BMX160Address, BMX_buff, 12, HAL_MAX_DELAY);// looking for the data bytes asked
 8000828:	23d0      	movs	r3, #208	; 0xd0
 800082a:	b299      	uxth	r1, r3
 800082c:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000830:	f04f 33ff 	mov.w	r3, #4294967295
 8000834:	9300      	str	r3, [sp, #0]
 8000836:	230c      	movs	r3, #12
 8000838:	48da      	ldr	r0, [pc, #872]	; (8000ba4 <main+0x51c>)
 800083a:	f001 fae3 	bl	8001e04 <HAL_I2C_Master_Receive>

		  //GYRO CALIBRATION

		  Gyr_Data[0]=((int16_t)BMX_buff[1]) << 8 | (BMX_buff[0]);  //X Raw (signed int)
 800083e:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8000842:	021b      	lsls	r3, r3, #8
 8000844:	b21a      	sxth	r2, r3
 8000846:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800084a:	b21b      	sxth	r3, r3
 800084c:	4313      	orrs	r3, r2
 800084e:	b21b      	sxth	r3, r3
 8000850:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc

		  Gyr_Data[1]=((int16_t)BMX_buff[3]) << 8 | (BMX_buff[2]);  //Y Raw
 8000854:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000858:	021b      	lsls	r3, r3, #8
 800085a:	b21a      	sxth	r2, r3
 800085c:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000860:	b21b      	sxth	r3, r3
 8000862:	4313      	orrs	r3, r2
 8000864:	b21b      	sxth	r3, r3
 8000866:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

		  Gyr_Data[2]=((int16_t)BMX_buff[5]) << 8 | (BMX_buff[4]);  //Z Raw
 800086a:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	b21a      	sxth	r2, r3
 8000872:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8000876:	b21b      	sxth	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b21b      	sxth	r3, r3
 800087c:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

		  Omega[0]=(float)Gyr_Data[0] * 0.0610351562;  //obtaining data dividing for MAX signed value and multiplying for the scale
 8000880:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8000884:	ee07 3a90 	vmov	s15, r3
 8000888:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800088c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000890:	ed9f 6bc1 	vldr	d6, [pc, #772]	; 8000b98 <main+0x510>
 8000894:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000898:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800089c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
		  Omega[1]=(float)Gyr_Data[1] * 0.0610351562;
 80008a0:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 80008a4:	ee07 3a90 	vmov	s15, r3
 80008a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008ac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008b0:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 8000b98 <main+0x510>
 80008b4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008b8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008bc:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
		  Omega[2]=(float)Gyr_Data[2] * 0.0610351562;
 80008c0:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 80008c4:	ee07 3a90 	vmov	s15, r3
 80008c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008cc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008d0:	ed9f 6bb1 	vldr	d6, [pc, #708]	; 8000b98 <main+0x510>
 80008d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80008d8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80008dc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8

		  Gyr_cal[0] += Omega[0];
 80008e0:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80008e4:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 80008e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008ec:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
		  Gyr_cal[1] += Omega[1];
 80008f0:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 80008f4:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80008f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80008fc:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
		  Gyr_cal[2] += Omega[2];
 8000900:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8000904:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8000908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800090c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

		  //ACCELEROMETER

		  Acc_Data[0]=((int16_t)BMX_buff[7]) << 8 | (BMX_buff[6]); //same as gyro
 8000910:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000914:	021b      	lsls	r3, r3, #8
 8000916:	b21a      	sxth	r2, r3
 8000918:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 800091c:	b21b      	sxth	r3, r3
 800091e:	4313      	orrs	r3, r2
 8000920:	b21b      	sxth	r3, r3
 8000922:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

		  Acc_Data[1]=((int16_t)BMX_buff[9]) << 8 | (BMX_buff[8]);
 8000926:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	b21a      	sxth	r2, r3
 800092e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21b      	sxth	r3, r3
 8000938:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

		  Acc_Data[2]=((int16_t)BMX_buff[11]) << 8 | (BMX_buff[10]);
 800093c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000940:	021b      	lsls	r3, r3, #8
 8000942:	b21a      	sxth	r2, r3
 8000944:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000948:	b21b      	sxth	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	b21b      	sxth	r3, r3
 800094e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

		  Acc[0]= (float)Acc_Data[0] * 8 / 32768; //Conversion=8/32768 to obtain data in g
 8000952:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8000956:	ee07 3a90 	vmov	s15, r3
 800095a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000962:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000966:	eddf 6a92 	vldr	s13, [pc, #584]	; 8000bb0 <main+0x528>
 800096a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800096e:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
		  Acc[1]= (float)Acc_Data[1] * 8 / 32768;
 8000972:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000976:	ee07 3a90 	vmov	s15, r3
 800097a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800097e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000982:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000986:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8000bb0 <main+0x528>
 800098a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800098e:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
		  Acc[2]= (float)Acc_Data[2] * 8 / 32768 - 1; //added 1 because the z axis detect the 1 g gravity acceleration but calibration is done on the errors
 8000992:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8000996:	ee07 3a90 	vmov	s15, r3
 800099a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800099e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80009a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80009a6:	eddf 6a82 	vldr	s13, [pc, #520]	; 8000bb0 <main+0x528>
 80009aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80009ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80009b6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

		  Acc_cal[0] += Acc[0];
 80009ba:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80009be:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 80009c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009c6:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
		  Acc_cal[1] += Acc[1];
 80009ca:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80009ce:	edd7 7a1c 	vldr	s15, [r7, #112]	; 0x70
 80009d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009d6:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
		  Acc_cal[2] += Acc[2];
 80009da:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80009de:	edd7 7a1d 	vldr	s15, [r7, #116]	; 0x74
 80009e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009e6:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

		  while (LL_TIM_GetCounter(TIM1)<1000)	{
 80009ea:	bf00      	nop
 80009ec:	486c      	ldr	r0, [pc, #432]	; (8000ba0 <main+0x518>)
 80009ee:	f7ff fdd9 	bl	80005a4 <LL_TIM_GetCounter>
 80009f2:	4603      	mov	r3, r0
 80009f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80009f8:	d3f8      	bcc.n	80009ec <main+0x364>
	for (i_gyro_cal=0; i_gyro_cal<1000; i_gyro_cal++) {
 80009fa:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 80009fe:	3301      	adds	r3, #1
 8000a00:	f8a7 30d6 	strh.w	r3, [r7, #214]	; 0xd6
 8000a04:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	; 0xd6
 8000a08:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000a0c:	f4ff aefc 	bcc.w	8000808 <main+0x180>
		  }

	}


	Gyr_cal[0] = Gyr_cal[0]/1000;
 8000a10:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8000a14:	eddf 6a64 	vldr	s13, [pc, #400]	; 8000ba8 <main+0x520>
 8000a18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a1c:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	Gyr_cal[1] = Gyr_cal[1]/1000;
 8000a20:	ed97 7a21 	vldr	s14, [r7, #132]	; 0x84
 8000a24:	eddf 6a60 	vldr	s13, [pc, #384]	; 8000ba8 <main+0x520>
 8000a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a2c:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	Gyr_cal[2] = Gyr_cal[2]/1000;
 8000a30:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8000a34:	eddf 6a5c 	vldr	s13, [pc, #368]	; 8000ba8 <main+0x520>
 8000a38:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a3c:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88

	Acc_cal[0] = Acc_cal[0]/1000;
 8000a40:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8000a44:	eddf 6a58 	vldr	s13, [pc, #352]	; 8000ba8 <main+0x520>
 8000a48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a4c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
    Acc_cal[1] = Acc_cal[1]/1000;
 8000a50:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8000a54:	eddf 6a54 	vldr	s13, [pc, #336]	; 8000ba8 <main+0x520>
 8000a58:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a5c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    Acc_cal[2] = Acc_cal[2]/1000;
 8000a60:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 8000a64:	eddf 6a50 	vldr	s13, [pc, #320]	; 8000ba8 <main+0x520>
 8000a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

    //END OF CONFIGURATION AND SETUP


	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0); //turn off green LED
 8000a70:	2101      	movs	r1, #1
 8000a72:	484e      	ldr	r0, [pc, #312]	; (8000bac <main+0x524>)
 8000a74:	f001 f827 	bl	8001ac6 <HAL_GPIO_TogglePin>

	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);//Toggle pinB7 to see it blink every second blue LED
 8000a78:	2180      	movs	r1, #128	; 0x80
 8000a7a:	484c      	ldr	r0, [pc, #304]	; (8000bac <main+0x524>)
 8000a7c:	f001 f823 	bl	8001ac6 <HAL_GPIO_TogglePin>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  LL_TIM_SetCounter(TIM1,0); //us counter set
 8000a80:	2100      	movs	r1, #0
 8000a82:	4847      	ldr	r0, [pc, #284]	; (8000ba0 <main+0x518>)
 8000a84:	f7ff fd80 	bl	8000588 <LL_TIM_SetCounter>

	  //blue LED blinking control (toggle every second) ###### counter>1/sampleTime
	  if(counter>100){
 8000a88:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000a8c:	2b64      	cmp	r3, #100	; 0x64
 8000a8e:	d906      	bls.n	8000a9e <main+0x416>

		  counter=1;
 8000a90:	2301      	movs	r3, #1
 8000a92:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);//Toggle pinB7 to see it blink every second
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	4844      	ldr	r0, [pc, #272]	; (8000bac <main+0x524>)
 8000a9a:	f001 f814 	bl	8001ac6 <HAL_GPIO_TogglePin>
	   * 4) Data utilization.
	   ##################################*/


	  //first is sent the bmx address with the register of the first data
	  buff[0]=GyroDataRegister[0];
 8000a9e:	230c      	movs	r3, #12
 8000aa0:	713b      	strb	r3, [r7, #4]
	  HAL_I2C_Master_Transmit(&hi2c1, BMX160Address, buff, 1, HAL_MAX_DELAY); //transmitting 1 byte with the register of the LSBx
 8000aa2:	23d0      	movs	r3, #208	; 0xd0
 8000aa4:	b299      	uxth	r1, r3
 8000aa6:	1d3a      	adds	r2, r7, #4
 8000aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000aac:	9300      	str	r3, [sp, #0]
 8000aae:	2301      	movs	r3, #1
 8000ab0:	483c      	ldr	r0, [pc, #240]	; (8000ba4 <main+0x51c>)
 8000ab2:	f001 f8b3 	bl	8001c1c <HAL_I2C_Master_Transmit>
	  HAL_I2C_Master_Receive(&hi2c1, BMX160Address, BMX_buff, 12, HAL_MAX_DELAY);// looking for the data bytes asked
 8000ab6:	23d0      	movs	r3, #208	; 0xd0
 8000ab8:	b299      	uxth	r1, r3
 8000aba:	f107 02c4 	add.w	r2, r7, #196	; 0xc4
 8000abe:	f04f 33ff 	mov.w	r3, #4294967295
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	230c      	movs	r3, #12
 8000ac6:	4837      	ldr	r0, [pc, #220]	; (8000ba4 <main+0x51c>)
 8000ac8:	f001 f99c 	bl	8001e04 <HAL_I2C_Master_Receive>

	  //dividing the bytes

	  //now let's do the conversion to get a data in degrees per second

	  Gyr_Data[0]=((int16_t)BMX_buff[1]) << 8 | (BMX_buff[0]);  //X Raw (signed int)
 8000acc:	f897 30c5 	ldrb.w	r3, [r7, #197]	; 0xc5
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	4313      	orrs	r3, r2
 8000adc:	b21b      	sxth	r3, r3
 8000ade:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc

	  Gyr_Data[1]=((int16_t)BMX_buff[3]) << 8 | (BMX_buff[2]);  //Y Raw
 8000ae2:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8000ae6:	021b      	lsls	r3, r3, #8
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	f897 30c6 	ldrb.w	r3, [r7, #198]	; 0xc6
 8000aee:	b21b      	sxth	r3, r3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	b21b      	sxth	r3, r3
 8000af4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe

	  Gyr_Data[2]=((int16_t)BMX_buff[5]) << 8 | (BMX_buff[4]);  //Z Raw
 8000af8:	f897 30c9 	ldrb.w	r3, [r7, #201]	; 0xc9
 8000afc:	021b      	lsls	r3, r3, #8
 8000afe:	b21a      	sxth	r2, r3
 8000b00:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8000b04:	b21b      	sxth	r3, r3
 8000b06:	4313      	orrs	r3, r2
 8000b08:	b21b      	sxth	r3, r3
 8000b0a:	f8a7 30c0 	strh.w	r3, [r7, #192]	; 0xc0

	  Omega[0]=((float)Gyr_Data[0] * 0.0610351562) - Gyr_cal[0];  //obtaining data dividing for MAX signed value and multiplying for the scale
 8000b0e:	f9b7 30bc 	ldrsh.w	r3, [r7, #188]	; 0xbc
 8000b12:	ee07 3a90 	vmov	s15, r3
 8000b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b1a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b1e:	ed9f 6b1e 	vldr	d6, [pc, #120]	; 8000b98 <main+0x510>
 8000b22:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b26:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8000b2a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b2e:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b36:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	  Omega[1]=((float)Gyr_Data[1] * 0.0610351562) - Gyr_cal[1];
 8000b3a:	f9b7 30be 	ldrsh.w	r3, [r7, #190]	; 0xbe
 8000b3e:	ee07 3a90 	vmov	s15, r3
 8000b42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b46:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b4a:	ed9f 6b13 	vldr	d6, [pc, #76]	; 8000b98 <main+0x510>
 8000b4e:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b52:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8000b56:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b5a:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b5e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b62:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	  Omega[2]=((float)Gyr_Data[2] * 0.0610351562) - Gyr_cal[2];
 8000b66:	f9b7 30c0 	ldrsh.w	r3, [r7, #192]	; 0xc0
 8000b6a:	ee07 3a90 	vmov	s15, r3
 8000b6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b76:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8000b98 <main+0x510>
 8000b7a:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000b7e:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8000b82:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000b86:	ee36 7b47 	vsub.f64	d7, d6, d7
 8000b8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000b8e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	  /*LPF specs:
	   * 1) Sample time Ts=0.01s (10 ms);
	   * 2) Cut off frequency selected is 10 Hz.
	   */

	  OmegaLPF[0]= k_toLPFprevSamp_Data * OmegaLPF_1[0] + k_toRaw_Data * (Omega[0] + Omega_1[0]); //LPFed data by discrete function see notebook p 11
 8000b92:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8000b96:	e011      	b.n	8000bbc <main+0x534>
 8000b98:	ff920c81 	.word	0xff920c81
 8000b9c:	3faf3fff 	.word	0x3faf3fff
 8000ba0:	40010000 	.word	0x40010000
 8000ba4:	20000204 	.word	0x20000204
 8000ba8:	447a0000 	.word	0x447a0000
 8000bac:	40020400 	.word	0x40020400
 8000bb0:	47000000 	.word	0x47000000
 8000bb4:	3f088659 	.word	0x3f088659
 8000bb8:	3e6f0069 	.word	0x3e6f0069
 8000bbc:	ed1f 7a03 	vldr	s14, [pc, #-12]	; 8000bb4 <main+0x52c>
 8000bc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bc4:	edd7 6a2c 	vldr	s13, [r7, #176]	; 0xb0
 8000bc8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8000bcc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000bd0:	ed5f 6a07 	vldr	s13, [pc, #-28]	; 8000bb8 <main+0x530>
 8000bd4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bdc:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
      OmegaLPF[1]= k_toLPFprevSamp_Data * OmegaLPF_1[1] + k_toRaw_Data * (Omega[1] + Omega_1[1]);
 8000be0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8000be4:	ed1f 7a0d 	vldr	s14, [pc, #-52]	; 8000bb4 <main+0x52c>
 8000be8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000bec:	edd7 6a2d 	vldr	s13, [r7, #180]	; 0xb4
 8000bf0:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8000bf4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000bf8:	ed5f 6a11 	vldr	s13, [pc, #-68]	; 8000bb8 <main+0x530>
 8000bfc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c04:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
	  OmegaLPF[2]= k_toLPFprevSamp_Data * OmegaLPF_1[2] + k_toRaw_Data * (Omega[2] + Omega_1[2]);
 8000c08:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 8000c0c:	ed1f 7a17 	vldr	s14, [pc, #-92]	; 8000bb4 <main+0x52c>
 8000c10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c14:	edd7 6a2e 	vldr	s13, [r7, #184]	; 0xb8
 8000c18:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8000c1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000c20:	ed5f 6a1b 	vldr	s13, [pc, #-108]	; 8000bb8 <main+0x530>
 8000c24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c2c:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

	  //COLLECTING DATA FOR ACCELEROMETER

	  Acc_Data[0]=((int16_t)BMX_buff[7]) << 8 | (BMX_buff[6]); //same as gyro
 8000c30:	f897 30cb 	ldrb.w	r3, [r7, #203]	; 0xcb
 8000c34:	021b      	lsls	r3, r3, #8
 8000c36:	b21a      	sxth	r2, r3
 8000c38:	f897 30ca 	ldrb.w	r3, [r7, #202]	; 0xca
 8000c3c:	b21b      	sxth	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b21b      	sxth	r3, r3
 8000c42:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78

	  Acc_Data[1]=((int16_t)BMX_buff[9]) << 8 | (BMX_buff[8]);
 8000c46:	f897 30cd 	ldrb.w	r3, [r7, #205]	; 0xcd
 8000c4a:	021b      	lsls	r3, r3, #8
 8000c4c:	b21a      	sxth	r2, r3
 8000c4e:	f897 30cc 	ldrb.w	r3, [r7, #204]	; 0xcc
 8000c52:	b21b      	sxth	r3, r3
 8000c54:	4313      	orrs	r3, r2
 8000c56:	b21b      	sxth	r3, r3
 8000c58:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a

	  Acc_Data[2]=((int16_t)BMX_buff[11]) << 8 | (BMX_buff[10]);
 8000c5c:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	f897 30ce 	ldrb.w	r3, [r7, #206]	; 0xce
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	4313      	orrs	r3, r2
 8000c6c:	b21b      	sxth	r3, r3
 8000c6e:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

	  Acc[0]= (float)Acc_Data[0] * 8 / 32768 - Acc_cal[0]; //Conversion=8/32768 and also subtrating calibration data
 8000c72:	f9b7 3078 	ldrsh.w	r3, [r7, #120]	; 0x78
 8000c76:	ee07 3a90 	vmov	s15, r3
 8000c7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c7e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000c82:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c86:	ed5f 6a36 	vldr	s13, [pc, #-216]	; 8000bb0 <main+0x528>
 8000c8a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c8e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8000c92:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c96:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c
	  Acc[1]= (float)Acc_Data[1] * 8 / 32768 - Acc_cal[1]; //Conversion is done to obtain data in g unit (1g=9.81 m/s^2)
 8000c9a:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	; 0x7a
 8000c9e:	ee07 3a90 	vmov	s15, r3
 8000ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ca6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000caa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cae:	ed5f 6a40 	vldr	s13, [pc, #-256]	; 8000bb0 <main+0x528>
 8000cb2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cb6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8000cba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cbe:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
	  Acc[2]= (float)Acc_Data[2] * 8 / 32768 - Acc_cal[2];
 8000cc2:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	; 0x7c
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cce:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8000cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd6:	ed5f 6a4a 	vldr	s13, [pc, #-296]	; 8000bb0 <main+0x528>
 8000cda:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cde:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8000ce2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ce6:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74

	  //ACCELEROMETER FILTER (SAME AS GYRO)
	  AccLPF[0]= k_toLPFprevSamp_Data * AccLPF_1[0] + k_toRaw_Data * (Acc[0] + Acc_1[0]); //LPFed data by discrete function see notebook p 11
 8000cea:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8000cee:	ed1f 7a4f 	vldr	s14, [pc, #-316]	; 8000bb4 <main+0x52c>
 8000cf2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000cf6:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 8000cfa:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8000cfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000d02:	ed5f 6a53 	vldr	s13, [pc, #-332]	; 8000bb8 <main+0x530>
 8000d06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d0e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
	  AccLPF[1]= k_toLPFprevSamp_Data * AccLPF_1[1] + k_toRaw_Data * (Acc[1] + Acc_1[1]);
 8000d12:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8000d16:	ed1f 7a59 	vldr	s14, [pc, #-356]	; 8000bb4 <main+0x52c>
 8000d1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d1e:	edd7 6a1c 	vldr	s13, [r7, #112]	; 0x70
 8000d22:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 8000d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000d2a:	ed5f 6a5d 	vldr	s13, [pc, #-372]	; 8000bb8 <main+0x530>
 8000d2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d36:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	  AccLPF[2]= k_toLPFprevSamp_Data * AccLPF_1[2] + k_toRaw_Data * (Acc[2] + Acc_1[2]);
 8000d3a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8000d3e:	ed1f 7a63 	vldr	s14, [pc, #-396]	; 8000bb4 <main+0x52c>
 8000d42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d46:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 8000d4a:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8000d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000d52:	ed5f 6a67 	vldr	s13, [pc, #-412]	; 8000bb8 <main+0x530>
 8000d56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000d5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d5e:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c


	  //HAL_USART_Transmit(&husart3, BMX_buff, 12, HAL_MAX_DELAY); //transmit via serial port first 12 bytes in BMX_buff to operate on MATLAB

	  //loop to fill the BMX filtered data
	  for (i=0; i<6; i++) {
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8000d68:	e027      	b.n	8000dba <main+0x732>
		  if (i<3)
 8000d6a:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000d6e:	2b02      	cmp	r3, #2
 8000d70:	d80e      	bhi.n	8000d90 <main+0x708>
			  *(BMX_Tx_LPF_buff+i) = *(OmegaLPF+i);
 8000d72:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	f107 0298 	add.w	r2, r7, #152	; 0x98
 8000d7c:	441a      	add	r2, r3
 8000d7e:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000d82:	009b      	lsls	r3, r3, #2
 8000d84:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000d88:	440b      	add	r3, r1
 8000d8a:	6812      	ldr	r2, [r2, #0]
 8000d8c:	601a      	str	r2, [r3, #0]
 8000d8e:	e00f      	b.n	8000db0 <main+0x728>
		  else
			  *(BMX_Tx_LPF_buff+i) = *(AccLPF+i-3);
 8000d90:	f897 20d3 	ldrb.w	r2, [r7, #211]	; 0xd3
 8000d94:	4b28      	ldr	r3, [pc, #160]	; (8000e38 <main+0x7b0>)
 8000d96:	4413      	add	r3, r2
 8000d98:	009b      	lsls	r3, r3, #2
 8000d9a:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000d9e:	441a      	add	r2, r3
 8000da0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000daa:	440b      	add	r3, r1
 8000dac:	6812      	ldr	r2, [r2, #0]
 8000dae:	601a      	str	r2, [r3, #0]
	  for (i=0; i<6; i++) {
 8000db0:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000db4:	3301      	adds	r3, #1
 8000db6:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
 8000dba:	f897 30d3 	ldrb.w	r3, [r7, #211]	; 0xd3
 8000dbe:	2b05      	cmp	r3, #5
 8000dc0:	d9d3      	bls.n	8000d6a <main+0x6e2>
	  }

	  HAL_USART_Transmit(&husart3, (uint8_t*)BMX_Tx_LPF_buff, 24, HAL_MAX_DELAY); // Tx 12 bytes of GYRO and 12 bytes ACC filtered->float number directly transmitted
 8000dc2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dca:	2218      	movs	r2, #24
 8000dcc:	481b      	ldr	r0, [pc, #108]	; (8000e3c <main+0x7b4>)
 8000dce:	f002 fcbd 	bl	800374c <HAL_USART_Transmit>


	  //Refreshing of Gyro data store (data at preceding sample must be used before this passage)

	  Omega_1[0]=Omega[0];
 8000dd2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8000dd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	  Omega_1[1]=Omega[1];
 8000dda:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000dde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  Omega_1[2]=Omega[2];
 8000de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000de6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	  OmegaLPF_1[0]=OmegaLPF[0];
 8000dea:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000dee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  OmegaLPF_1[1]=OmegaLPF[1];
 8000df2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000df6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  OmegaLPF_1[2]=OmegaLPF[2];
 8000dfa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000dfe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

	  Acc_1[0]=Acc[0];
 8000e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000e04:	663b      	str	r3, [r7, #96]	; 0x60
	  Acc_1[1]=Acc[1];
 8000e06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000e08:	667b      	str	r3, [r7, #100]	; 0x64
	  Acc_1[2]=Acc[2];
 8000e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000e0c:	66bb      	str	r3, [r7, #104]	; 0x68

	  AccLPF_1[0]=AccLPF[0];
 8000e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
	  AccLPF_1[1]=AccLPF[1];
 8000e12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
	  AccLPF_1[2]=AccLPF[2];
 8000e16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e18:	653b      	str	r3, [r7, #80]	; 0x50


	  counter=counter+1;//update the counter value
 8000e1a:	f8b7 30d4 	ldrh.w	r3, [r7, #212]	; 0xd4
 8000e1e:	3301      	adds	r3, #1
 8000e20:	f8a7 30d4 	strh.w	r3, [r7, #212]	; 0xd4

	  //Function to create the 10ms loop

	  while( LL_TIM_GetCounter(TIM1)<10000){
 8000e24:	bf00      	nop
 8000e26:	4806      	ldr	r0, [pc, #24]	; (8000e40 <main+0x7b8>)
 8000e28:	f7ff fbbc 	bl	80005a4 <LL_TIM_GetCounter>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8000e32:	429a      	cmp	r2, r3
 8000e34:	d9f7      	bls.n	8000e26 <main+0x79e>
	  LL_TIM_SetCounter(TIM1,0); //us counter set
 8000e36:	e623      	b.n	8000a80 <main+0x3f8>
 8000e38:	3ffffffd 	.word	0x3ffffffd
 8000e3c:	20000250 	.word	0x20000250
 8000e40:	40010000 	.word	0x40010000

08000e44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b0b8      	sub	sp, #224	; 0xe0
 8000e48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e4a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e4e:	2234      	movs	r2, #52	; 0x34
 8000e50:	2100      	movs	r1, #0
 8000e52:	4618      	mov	r0, r3
 8000e54:	f003 f806 	bl	8003e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e58:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e68:	f107 0308 	add.w	r3, r7, #8
 8000e6c:	2290      	movs	r2, #144	; 0x90
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f002 fff7 	bl	8003e64 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8000e76:	f001 fb33 	bl	80024e0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7a:	4b3a      	ldr	r3, [pc, #232]	; (8000f64 <SystemClock_Config+0x120>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a39      	ldr	r2, [pc, #228]	; (8000f64 <SystemClock_Config+0x120>)
 8000e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b37      	ldr	r3, [pc, #220]	; (8000f64 <SystemClock_Config+0x120>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e8e:	607b      	str	r3, [r7, #4]
 8000e90:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000e92:	4b35      	ldr	r3, [pc, #212]	; (8000f68 <SystemClock_Config+0x124>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e9a:	4a33      	ldr	r2, [pc, #204]	; (8000f68 <SystemClock_Config+0x124>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6013      	str	r3, [r2, #0]
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <SystemClock_Config+0x124>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000eb4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000eb8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ec2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000ed0:	23c0      	movs	r3, #192	; 0xc0
 8000ed2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000edc:	2304      	movs	r3, #4
 8000ede:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ee2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	f001 fb5a 	bl	80025a0 <HAL_RCC_OscConfig>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ef2:	f000 f933 	bl	800115c <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ef6:	f001 fb03 	bl	8002500 <HAL_PWREx_EnableOverDrive>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000f00:	f000 f92c 	bl	800115c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f04:	230f      	movs	r3, #15
 8000f06:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000f24:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f28:	2103      	movs	r1, #3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f001 fdaa 	bl	8002a84 <HAL_RCC_ClockConfig>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000f36:	f000 f911 	bl	800115c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8000f3a:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8000f3e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f44:	2300      	movs	r3, #0
 8000f46:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f48:	f107 0308 	add.w	r3, r7, #8
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f001 ff8d 	bl	8002e6c <HAL_RCCEx_PeriphCLKConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x118>
  {
    Error_Handler();
 8000f58:	f000 f900 	bl	800115c <Error_Handler>
  }
}
 8000f5c:	bf00      	nop
 8000f5e:	37e0      	adds	r7, #224	; 0xe0
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40007000 	.word	0x40007000

08000f6c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f72:	4a1c      	ldr	r2, [pc, #112]	; (8000fe4 <MX_I2C1_Init+0x78>)
 8000f74:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2010091A;
 8000f76:	4b1a      	ldr	r3, [pc, #104]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f78:	4a1b      	ldr	r2, [pc, #108]	; (8000fe8 <MX_I2C1_Init+0x7c>)
 8000f7a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f82:	4b17      	ldr	r3, [pc, #92]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8e:	4b14      	ldr	r3, [pc, #80]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fa0:	4b0f      	ldr	r3, [pc, #60]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa6:	480e      	ldr	r0, [pc, #56]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000fa8:	f000 fda8 	bl	8001afc <HAL_I2C_Init>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fb2:	f000 f8d3 	bl	800115c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4809      	ldr	r0, [pc, #36]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000fba:	f001 f9f9 	bl	80023b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fc4:	f000 f8ca 	bl	800115c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4805      	ldr	r0, [pc, #20]	; (8000fe0 <MX_I2C1_Init+0x74>)
 8000fcc:	f001 fa3b 	bl	8002446 <HAL_I2CEx_ConfigDigitalFilter>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fd6:	f000 f8c1 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fda:	bf00      	nop
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000204 	.word	0x20000204
 8000fe4:	40005400 	.word	0x40005400
 8000fe8:	2010091a 	.word	0x2010091a

08000fec <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b086      	sub	sp, #24
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	605a      	str	r2, [r3, #4]
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	60da      	str	r2, [r3, #12]
 8000ffe:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001000:	2001      	movs	r0, #1
 8001002:	f7ff fb27 	bl	8000654 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 96;
 8001006:	2360      	movs	r3, #96	; 0x60
 8001008:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800100a:	2300      	movs	r3, #0
 800100c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65000;
 800100e:	f64f 53e8 	movw	r3, #65000	; 0xfde8
 8001012:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	753b      	strb	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	4619      	mov	r1, r3
 8001020:	480c      	ldr	r0, [pc, #48]	; (8001054 <MX_TIM1_Init+0x68>)
 8001022:	f002 fe5b 	bl	8003cdc <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001026:	480b      	ldr	r0, [pc, #44]	; (8001054 <MX_TIM1_Init+0x68>)
 8001028:	f7ff fa9e 	bl	8000568 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800102c:	2100      	movs	r1, #0
 800102e:	4809      	ldr	r0, [pc, #36]	; (8001054 <MX_TIM1_Init+0x68>)
 8001030:	f7ff fac4 	bl	80005bc <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001034:	2100      	movs	r1, #0
 8001036:	4807      	ldr	r0, [pc, #28]	; (8001054 <MX_TIM1_Init+0x68>)
 8001038:	f7ff fad6 	bl	80005e8 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800103c:	2100      	movs	r1, #0
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_TIM1_Init+0x68>)
 8001040:	f7ff fae5 	bl	800060e <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001044:	4803      	ldr	r0, [pc, #12]	; (8001054 <MX_TIM1_Init+0x68>)
 8001046:	f7ff faf5 	bl	8000634 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	3718      	adds	r7, #24
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40010000 	.word	0x40010000

08001058 <MX_USART3_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  husart3.Instance = USART3;
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <MX_USART3_Init+0x50>)
 800105e:	4a13      	ldr	r2, [pc, #76]	; (80010ac <MX_USART3_Init+0x54>)
 8001060:	601a      	str	r2, [r3, #0]
  husart3.Init.BaudRate = 115200;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_USART3_Init+0x50>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  husart3.Init.WordLength = USART_WORDLENGTH_8B;
 800106a:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_USART3_Init+0x50>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  husart3.Init.StopBits = USART_STOPBITS_1;
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <MX_USART3_Init+0x50>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  husart3.Init.Parity = USART_PARITY_NONE;
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_USART3_Init+0x50>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  husart3.Init.Mode = USART_MODE_TX_RX;
 800107c:	4b0a      	ldr	r3, [pc, #40]	; (80010a8 <MX_USART3_Init+0x50>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  husart3.Init.CLKPolarity = USART_POLARITY_LOW;
 8001082:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_USART3_Init+0x50>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  husart3.Init.CLKPhase = USART_PHASE_1EDGE;
 8001088:	4b07      	ldr	r3, [pc, #28]	; (80010a8 <MX_USART3_Init+0x50>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  husart3.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_USART3_Init+0x50>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart3) != HAL_OK)
 8001094:	4804      	ldr	r0, [pc, #16]	; (80010a8 <MX_USART3_Init+0x50>)
 8001096:	f002 fb0f 	bl	80036b8 <HAL_USART_Init>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_USART3_Init+0x4c>
  {
    Error_Handler();
 80010a0:	f000 f85c 	bl	800115c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010a4:	bf00      	nop
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000250 	.word	0x20000250
 80010ac:	40004800 	.word	0x40004800

080010b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b6:	f107 0314 	add.w	r3, r7, #20
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	605a      	str	r2, [r3, #4]
 80010c0:	609a      	str	r2, [r3, #8]
 80010c2:	60da      	str	r2, [r3, #12]
 80010c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c6:	4b23      	ldr	r3, [pc, #140]	; (8001154 <MX_GPIO_Init+0xa4>)
 80010c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ca:	4a22      	ldr	r2, [pc, #136]	; (8001154 <MX_GPIO_Init+0xa4>)
 80010cc:	f043 0304 	orr.w	r3, r3, #4
 80010d0:	6313      	str	r3, [r2, #48]	; 0x30
 80010d2:	4b20      	ldr	r3, [pc, #128]	; (8001154 <MX_GPIO_Init+0xa4>)
 80010d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d6:	f003 0304 	and.w	r3, r3, #4
 80010da:	613b      	str	r3, [r7, #16]
 80010dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010de:	4b1d      	ldr	r3, [pc, #116]	; (8001154 <MX_GPIO_Init+0xa4>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <MX_GPIO_Init+0xa4>)
 80010e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b1a      	ldr	r3, [pc, #104]	; (8001154 <MX_GPIO_Init+0xa4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <MX_GPIO_Init+0xa4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <MX_GPIO_Init+0xa4>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	; 0x30
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <MX_GPIO_Init+0xa4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <MX_GPIO_Init+0xa4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <MX_GPIO_Init+0xa4>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <MX_GPIO_Init+0xa4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 8001126:	2200      	movs	r2, #0
 8001128:	2181      	movs	r1, #129	; 0x81
 800112a:	480b      	ldr	r0, [pc, #44]	; (8001158 <MX_GPIO_Init+0xa8>)
 800112c:	f000 fcb2 	bl	8001a94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8001130:	2381      	movs	r3, #129	; 0x81
 8001132:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2301      	movs	r3, #1
 8001136:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	4619      	mov	r1, r3
 8001146:	4804      	ldr	r0, [pc, #16]	; (8001158 <MX_GPIO_Init+0xa8>)
 8001148:	f000 fafa 	bl	8001740 <HAL_GPIO_Init>

}
 800114c:	bf00      	nop
 800114e:	3728      	adds	r7, #40	; 0x28
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40023800 	.word	0x40023800
 8001158:	40020400 	.word	0x40020400

0800115c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_MspInit+0x44>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	4a0e      	ldr	r2, [pc, #56]	; (80011b0 <HAL_MspInit+0x44>)
 8001178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117c:	6413      	str	r3, [r2, #64]	; 0x40
 800117e:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <HAL_MspInit+0x44>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	607b      	str	r3, [r7, #4]
 8001188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_MspInit+0x44>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_MspInit+0x44>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001194:	6453      	str	r3, [r2, #68]	; 0x44
 8001196:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_MspInit+0x44>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119e:	603b      	str	r3, [r7, #0]
 80011a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011a2:	bf00      	nop
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800

080011b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a17      	ldr	r2, [pc, #92]	; (8001230 <HAL_I2C_MspInit+0x7c>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d128      	bne.n	8001228 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d6:	4b17      	ldr	r3, [pc, #92]	; (8001234 <HAL_I2C_MspInit+0x80>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a16      	ldr	r2, [pc, #88]	; (8001234 <HAL_I2C_MspInit+0x80>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_I2C_MspInit+0x80>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80011ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80011f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011f4:	2312      	movs	r3, #18
 80011f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80011f8:	2301      	movs	r3, #1
 80011fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fc:	2303      	movs	r3, #3
 80011fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001200:	2304      	movs	r3, #4
 8001202:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	4619      	mov	r1, r3
 800120a:	480b      	ldr	r0, [pc, #44]	; (8001238 <HAL_I2C_MspInit+0x84>)
 800120c:	f000 fa98 	bl	8001740 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <HAL_I2C_MspInit+0x80>)
 8001212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001214:	4a07      	ldr	r2, [pc, #28]	; (8001234 <HAL_I2C_MspInit+0x80>)
 8001216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800121a:	6413      	str	r3, [r2, #64]	; 0x40
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <HAL_I2C_MspInit+0x80>)
 800121e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001228:	bf00      	nop
 800122a:	3728      	adds	r7, #40	; 0x28
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	40005400 	.word	0x40005400
 8001234:	40023800 	.word	0x40023800
 8001238:	40020400 	.word	0x40020400

0800123c <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	; 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001244:	f107 0314 	add.w	r3, r7, #20
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
 8001252:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART3)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a26      	ldr	r2, [pc, #152]	; (80012f4 <HAL_USART_MspInit+0xb8>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d145      	bne.n	80012ea <HAL_USART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800125e:	4b26      	ldr	r3, [pc, #152]	; (80012f8 <HAL_USART_MspInit+0xbc>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	4a25      	ldr	r2, [pc, #148]	; (80012f8 <HAL_USART_MspInit+0xbc>)
 8001264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001268:	6413      	str	r3, [r2, #64]	; 0x40
 800126a:	4b23      	ldr	r3, [pc, #140]	; (80012f8 <HAL_USART_MspInit+0xbc>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001276:	4b20      	ldr	r3, [pc, #128]	; (80012f8 <HAL_USART_MspInit+0xbc>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	4a1f      	ldr	r2, [pc, #124]	; (80012f8 <HAL_USART_MspInit+0xbc>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	6313      	str	r3, [r2, #48]	; 0x30
 8001282:	4b1d      	ldr	r3, [pc, #116]	; (80012f8 <HAL_USART_MspInit+0xbc>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	60fb      	str	r3, [r7, #12]
 800128c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800128e:	4b1a      	ldr	r3, [pc, #104]	; (80012f8 <HAL_USART_MspInit+0xbc>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	4a19      	ldr	r2, [pc, #100]	; (80012f8 <HAL_USART_MspInit+0xbc>)
 8001294:	f043 0308 	orr.w	r3, r3, #8
 8001298:	6313      	str	r3, [r2, #48]	; 0x30
 800129a:	4b17      	ldr	r3, [pc, #92]	; (80012f8 <HAL_USART_MspInit+0xbc>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	f003 0308 	and.w	r3, r3, #8
 80012a2:	60bb      	str	r3, [r7, #8]
 80012a4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration    
    PB12     ------> USART3_CK
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b4:	2303      	movs	r3, #3
 80012b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012b8:	2307      	movs	r3, #7
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480e      	ldr	r0, [pc, #56]	; (80012fc <HAL_USART_MspInit+0xc0>)
 80012c4:	f000 fa3c 	bl	8001740 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012c8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80012cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012d6:	2303      	movs	r3, #3
 80012d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012da:	2307      	movs	r3, #7
 80012dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012de:	f107 0314 	add.w	r3, r7, #20
 80012e2:	4619      	mov	r1, r3
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <HAL_USART_MspInit+0xc4>)
 80012e6:	f000 fa2b 	bl	8001740 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012ea:	bf00      	nop
 80012ec:	3728      	adds	r7, #40	; 0x28
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	40004800 	.word	0x40004800
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400
 8001300:	40020c00 	.word	0x40020c00

08001304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr

08001312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001312:	b480      	push	{r7}
 8001314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001316:	e7fe      	b.n	8001316 <HardFault_Handler+0x4>

08001318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800131c:	e7fe      	b.n	800131c <MemManage_Handler+0x4>

0800131e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001322:	e7fe      	b.n	8001322 <BusFault_Handler+0x4>

08001324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001328:	e7fe      	b.n	8001328 <UsageFault_Handler+0x4>

0800132a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800132a:	b480      	push	{r7}
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr

08001346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001346:	b480      	push	{r7}
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800134a:	bf00      	nop
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr

08001354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001358:	f000 f8ca 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800135c:	bf00      	nop
 800135e:	bd80      	pop	{r7, pc}

08001360 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <_sbrk+0x50>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d102      	bne.n	8001376 <_sbrk+0x16>
		heap_end = &end;
 8001370:	4b0f      	ldr	r3, [pc, #60]	; (80013b0 <_sbrk+0x50>)
 8001372:	4a10      	ldr	r2, [pc, #64]	; (80013b4 <_sbrk+0x54>)
 8001374:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <_sbrk+0x50>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <_sbrk+0x50>)
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4413      	add	r3, r2
 8001384:	466a      	mov	r2, sp
 8001386:	4293      	cmp	r3, r2
 8001388:	d907      	bls.n	800139a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800138a:	f002 fd41 	bl	8003e10 <__errno>
 800138e:	4602      	mov	r2, r0
 8001390:	230c      	movs	r3, #12
 8001392:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001394:	f04f 33ff 	mov.w	r3, #4294967295
 8001398:	e006      	b.n	80013a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800139a:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <_sbrk+0x50>)
 800139c:	681a      	ldr	r2, [r3, #0]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	4413      	add	r3, r2
 80013a2:	4a03      	ldr	r2, [pc, #12]	; (80013b0 <_sbrk+0x50>)
 80013a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	200001f8 	.word	0x200001f8
 80013b4:	200002a8 	.word	0x200002a8

080013b8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013bc:	4b15      	ldr	r3, [pc, #84]	; (8001414 <SystemInit+0x5c>)
 80013be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c2:	4a14      	ldr	r2, [pc, #80]	; (8001414 <SystemInit+0x5c>)
 80013c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80013cc:	4b12      	ldr	r3, [pc, #72]	; (8001418 <SystemInit+0x60>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a11      	ldr	r2, [pc, #68]	; (8001418 <SystemInit+0x60>)
 80013d2:	f043 0301 	orr.w	r3, r3, #1
 80013d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80013d8:	4b0f      	ldr	r3, [pc, #60]	; (8001418 <SystemInit+0x60>)
 80013da:	2200      	movs	r2, #0
 80013dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80013de:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <SystemInit+0x60>)
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	490d      	ldr	r1, [pc, #52]	; (8001418 <SystemInit+0x60>)
 80013e4:	4b0d      	ldr	r3, [pc, #52]	; (800141c <SystemInit+0x64>)
 80013e6:	4013      	ands	r3, r2
 80013e8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80013ea:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <SystemInit+0x60>)
 80013ec:	4a0c      	ldr	r2, [pc, #48]	; (8001420 <SystemInit+0x68>)
 80013ee:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <SystemInit+0x60>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a08      	ldr	r2, [pc, #32]	; (8001418 <SystemInit+0x60>)
 80013f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80013fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <SystemInit+0x60>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001402:	4b04      	ldr	r3, [pc, #16]	; (8001414 <SystemInit+0x5c>)
 8001404:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001408:	609a      	str	r2, [r3, #8]
#endif
}
 800140a:	bf00      	nop
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	e000ed00 	.word	0xe000ed00
 8001418:	40023800 	.word	0x40023800
 800141c:	fef6ffff 	.word	0xfef6ffff
 8001420:	24003010 	.word	0x24003010

08001424 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001424:	f8df d034 	ldr.w	sp, [pc, #52]	; 800145c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001428:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800142a:	e003      	b.n	8001434 <LoopCopyDataInit>

0800142c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800142c:	4b0c      	ldr	r3, [pc, #48]	; (8001460 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800142e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001430:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001432:	3104      	adds	r1, #4

08001434 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001434:	480b      	ldr	r0, [pc, #44]	; (8001464 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001438:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800143a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800143c:	d3f6      	bcc.n	800142c <CopyDataInit>
  ldr  r2, =_sbss
 800143e:	4a0b      	ldr	r2, [pc, #44]	; (800146c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001440:	e002      	b.n	8001448 <LoopFillZerobss>

08001442 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001442:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001444:	f842 3b04 	str.w	r3, [r2], #4

08001448 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001448:	4b09      	ldr	r3, [pc, #36]	; (8001470 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800144a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800144c:	d3f9      	bcc.n	8001442 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800144e:	f7ff ffb3 	bl	80013b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001452:	f002 fce3 	bl	8003e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001456:	f7ff f917 	bl	8000688 <main>
  bx  lr    
 800145a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800145c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001460:	08005a10 	.word	0x08005a10
  ldr  r0, =_sdata
 8001464:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001468:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 800146c:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001470:	200002a8 	.word	0x200002a8

08001474 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001474:	e7fe      	b.n	8001474 <ADC_IRQHandler>

08001476 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001476:	b580      	push	{r7, lr}
 8001478:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800147a:	2003      	movs	r0, #3
 800147c:	f000 f92c 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001480:	2000      	movs	r0, #0
 8001482:	f000 f805 	bl	8001490 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8001486:	f7ff fe71 	bl	800116c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	bd80      	pop	{r7, pc}

08001490 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <HAL_InitTick+0x54>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b12      	ldr	r3, [pc, #72]	; (80014e8 <HAL_InitTick+0x58>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f939 	bl	8001726 <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00e      	b.n	80014dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d80a      	bhi.n	80014da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c4:	2200      	movs	r2, #0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f000 f90f 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_InitTick+0x5c>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000008 	.word	0x20000008
 80014ec:	20000004 	.word	0x20000004

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	20000008 	.word	0x20000008
 8001514:	200002a0 	.word	0x200002a0

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	200002a0 	.word	0x200002a0

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_Delay+0x40>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20000008 	.word	0x20000008

08001574 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001584:	4b0b      	ldr	r3, [pc, #44]	; (80015b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001586:	68db      	ldr	r3, [r3, #12]
 8001588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158a:	68ba      	ldr	r2, [r7, #8]
 800158c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001590:	4013      	ands	r3, r2
 8001592:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800159c:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <__NVIC_SetPriorityGrouping+0x44>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015a2:	4a04      	ldr	r2, [pc, #16]	; (80015b4 <__NVIC_SetPriorityGrouping+0x40>)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	60d3      	str	r3, [r2, #12]
}
 80015a8:	bf00      	nop
 80015aa:	3714      	adds	r7, #20
 80015ac:	46bd      	mov	sp, r7
 80015ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b2:	4770      	bx	lr
 80015b4:	e000ed00 	.word	0xe000ed00
 80015b8:	05fa0000 	.word	0x05fa0000

080015bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c0:	4b04      	ldr	r3, [pc, #16]	; (80015d4 <__NVIC_GetPriorityGrouping+0x18>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	0a1b      	lsrs	r3, r3, #8
 80015c6:	f003 0307 	and.w	r3, r3, #7
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	6039      	str	r1, [r7, #0]
 80015e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	db0a      	blt.n	8001602 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	490c      	ldr	r1, [pc, #48]	; (8001624 <__NVIC_SetPriority+0x4c>)
 80015f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f6:	0112      	lsls	r2, r2, #4
 80015f8:	b2d2      	uxtb	r2, r2
 80015fa:	440b      	add	r3, r1
 80015fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001600:	e00a      	b.n	8001618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	4908      	ldr	r1, [pc, #32]	; (8001628 <__NVIC_SetPriority+0x50>)
 8001608:	79fb      	ldrb	r3, [r7, #7]
 800160a:	f003 030f 	and.w	r3, r3, #15
 800160e:	3b04      	subs	r3, #4
 8001610:	0112      	lsls	r2, r2, #4
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	440b      	add	r3, r1
 8001616:	761a      	strb	r2, [r3, #24]
}
 8001618:	bf00      	nop
 800161a:	370c      	adds	r7, #12
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	e000e100 	.word	0xe000e100
 8001628:	e000ed00 	.word	0xe000ed00

0800162c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	f1c3 0307 	rsb	r3, r3, #7
 8001646:	2b04      	cmp	r3, #4
 8001648:	bf28      	it	cs
 800164a:	2304      	movcs	r3, #4
 800164c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3304      	adds	r3, #4
 8001652:	2b06      	cmp	r3, #6
 8001654:	d902      	bls.n	800165c <NVIC_EncodePriority+0x30>
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3b03      	subs	r3, #3
 800165a:	e000      	b.n	800165e <NVIC_EncodePriority+0x32>
 800165c:	2300      	movs	r3, #0
 800165e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001660:	f04f 32ff 	mov.w	r2, #4294967295
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	fa02 f303 	lsl.w	r3, r2, r3
 800166a:	43da      	mvns	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	401a      	ands	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	fa01 f303 	lsl.w	r3, r1, r3
 800167e:	43d9      	mvns	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001684:	4313      	orrs	r3, r2
         );
}
 8001686:	4618      	mov	r0, r3
 8001688:	3724      	adds	r7, #36	; 0x24
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	; (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff8e 	bl	80015d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	; (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	; (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff47 	bl	8001574 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff5c 	bl	80015bc <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff8e 	bl	800162c <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff5d 	bl	80015d8 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f7ff ffb0 	bl	8001694 <SysTick_Config>
 8001734:	4603      	mov	r3, r0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001740:	b480      	push	{r7}
 8001742:	b089      	sub	sp, #36	; 0x24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
 8001748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800174a:	2300      	movs	r3, #0
 800174c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001752:	2300      	movs	r3, #0
 8001754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001756:	2300      	movs	r3, #0
 8001758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800175a:	2300      	movs	r3, #0
 800175c:	61fb      	str	r3, [r7, #28]
 800175e:	e175      	b.n	8001a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001760:	2201      	movs	r2, #1
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	697a      	ldr	r2, [r7, #20]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	429a      	cmp	r2, r3
 800177a:	f040 8164 	bne.w	8001a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	2b02      	cmp	r3, #2
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x4e>
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b12      	cmp	r3, #18
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0203 	and.w	r2, r3, #3
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d00b      	beq.n	800182a <HAL_GPIO_Init+0xea>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d007      	beq.n	800182a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800181e:	2b11      	cmp	r3, #17
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b12      	cmp	r3, #18
 8001828:	d130      	bne.n	800188c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	2203      	movs	r2, #3
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	68da      	ldr	r2, [r3, #12]
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	69ba      	ldr	r2, [r7, #24]
 8001850:	4313      	orrs	r3, r2
 8001852:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001860:	2201      	movs	r2, #1
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	fa02 f303 	lsl.w	r3, r2, r3
 8001868:	43db      	mvns	r3, r3
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	4013      	ands	r3, r2
 800186e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001870:	683b      	ldr	r3, [r7, #0]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	091b      	lsrs	r3, r3, #4
 8001876:	f003 0201 	and.w	r2, r3, #1
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	4313      	orrs	r3, r2
 8001884:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	2203      	movs	r2, #3
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	689a      	ldr	r2, [r3, #8]
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	fa02 f303 	lsl.w	r3, r2, r3
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80be 	beq.w	8001a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ca:	4b65      	ldr	r3, [pc, #404]	; (8001a60 <HAL_GPIO_Init+0x320>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	4a64      	ldr	r2, [pc, #400]	; (8001a60 <HAL_GPIO_Init+0x320>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	; 0x44
 80018d6:	4b62      	ldr	r3, [pc, #392]	; (8001a60 <HAL_GPIO_Init+0x320>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80018e2:	4a60      	ldr	r2, [pc, #384]	; (8001a64 <HAL_GPIO_Init+0x324>)
 80018e4:	69fb      	ldr	r3, [r7, #28]
 80018e6:	089b      	lsrs	r3, r3, #2
 80018e8:	3302      	adds	r3, #2
 80018ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	220f      	movs	r2, #15
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a57      	ldr	r2, [pc, #348]	; (8001a68 <HAL_GPIO_Init+0x328>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d037      	beq.n	800197e <HAL_GPIO_Init+0x23e>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <HAL_GPIO_Init+0x32c>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d031      	beq.n	800197a <HAL_GPIO_Init+0x23a>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a55      	ldr	r2, [pc, #340]	; (8001a70 <HAL_GPIO_Init+0x330>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d02b      	beq.n	8001976 <HAL_GPIO_Init+0x236>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4a54      	ldr	r2, [pc, #336]	; (8001a74 <HAL_GPIO_Init+0x334>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d025      	beq.n	8001972 <HAL_GPIO_Init+0x232>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a53      	ldr	r2, [pc, #332]	; (8001a78 <HAL_GPIO_Init+0x338>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d01f      	beq.n	800196e <HAL_GPIO_Init+0x22e>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a52      	ldr	r2, [pc, #328]	; (8001a7c <HAL_GPIO_Init+0x33c>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d019      	beq.n	800196a <HAL_GPIO_Init+0x22a>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a51      	ldr	r2, [pc, #324]	; (8001a80 <HAL_GPIO_Init+0x340>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d013      	beq.n	8001966 <HAL_GPIO_Init+0x226>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a50      	ldr	r2, [pc, #320]	; (8001a84 <HAL_GPIO_Init+0x344>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d00d      	beq.n	8001962 <HAL_GPIO_Init+0x222>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a4f      	ldr	r2, [pc, #316]	; (8001a88 <HAL_GPIO_Init+0x348>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d007      	beq.n	800195e <HAL_GPIO_Init+0x21e>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a4e      	ldr	r2, [pc, #312]	; (8001a8c <HAL_GPIO_Init+0x34c>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d101      	bne.n	800195a <HAL_GPIO_Init+0x21a>
 8001956:	2309      	movs	r3, #9
 8001958:	e012      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800195a:	230a      	movs	r3, #10
 800195c:	e010      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800195e:	2308      	movs	r3, #8
 8001960:	e00e      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001962:	2307      	movs	r3, #7
 8001964:	e00c      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001966:	2306      	movs	r3, #6
 8001968:	e00a      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800196a:	2305      	movs	r3, #5
 800196c:	e008      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800196e:	2304      	movs	r3, #4
 8001970:	e006      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001972:	2303      	movs	r3, #3
 8001974:	e004      	b.n	8001980 <HAL_GPIO_Init+0x240>
 8001976:	2302      	movs	r3, #2
 8001978:	e002      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800197a:	2301      	movs	r3, #1
 800197c:	e000      	b.n	8001980 <HAL_GPIO_Init+0x240>
 800197e:	2300      	movs	r3, #0
 8001980:	69fa      	ldr	r2, [r7, #28]
 8001982:	f002 0203 	and.w	r2, r2, #3
 8001986:	0092      	lsls	r2, r2, #2
 8001988:	4093      	lsls	r3, r2
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4313      	orrs	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001990:	4934      	ldr	r1, [pc, #208]	; (8001a64 <HAL_GPIO_Init+0x324>)
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800199e:	4b3c      	ldr	r3, [pc, #240]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	43db      	mvns	r3, r3
 80019a8:	69ba      	ldr	r2, [r7, #24]
 80019aa:	4013      	ands	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4313      	orrs	r3, r2
 80019c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019c2:	4a33      	ldr	r2, [pc, #204]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80019c8:	4b31      	ldr	r3, [pc, #196]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	43db      	mvns	r3, r3
 80019d2:	69ba      	ldr	r2, [r7, #24]
 80019d4:	4013      	ands	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	685b      	ldr	r3, [r3, #4]
 80019dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	4313      	orrs	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ec:	4a28      	ldr	r2, [pc, #160]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019f2:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_GPIO_Init+0x350>)
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4013      	ands	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d003      	beq.n	8001a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	4313      	orrs	r3, r2
 8001a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a16:	4a1e      	ldr	r2, [pc, #120]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a1c:	4b1c      	ldr	r3, [pc, #112]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	43db      	mvns	r3, r3
 8001a26:	69ba      	ldr	r2, [r7, #24]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a40:	4a13      	ldr	r2, [pc, #76]	; (8001a90 <HAL_GPIO_Init+0x350>)
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3301      	adds	r3, #1
 8001a4a:	61fb      	str	r3, [r7, #28]
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b0f      	cmp	r3, #15
 8001a50:	f67f ae86 	bls.w	8001760 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001a54:	bf00      	nop
 8001a56:	3724      	adds	r7, #36	; 0x24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5e:	4770      	bx	lr
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40013800 	.word	0x40013800
 8001a68:	40020000 	.word	0x40020000
 8001a6c:	40020400 	.word	0x40020400
 8001a70:	40020800 	.word	0x40020800
 8001a74:	40020c00 	.word	0x40020c00
 8001a78:	40021000 	.word	0x40021000
 8001a7c:	40021400 	.word	0x40021400
 8001a80:	40021800 	.word	0x40021800
 8001a84:	40021c00 	.word	0x40021c00
 8001a88:	40022000 	.word	0x40022000
 8001a8c:	40022400 	.word	0x40022400
 8001a90:	40013c00 	.word	0x40013c00

08001a94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	807b      	strh	r3, [r7, #2]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa4:	787b      	ldrb	r3, [r7, #1]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d003      	beq.n	8001ab2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aaa:	887a      	ldrh	r2, [r7, #2]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ab0:	e003      	b.n	8001aba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ab2:	887b      	ldrh	r3, [r7, #2]
 8001ab4:	041a      	lsls	r2, r3, #16
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	619a      	str	r2, [r3, #24]
}
 8001aba:	bf00      	nop
 8001abc:	370c      	adds	r7, #12
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	460b      	mov	r3, r1
 8001ad0:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	695a      	ldr	r2, [r3, #20]
 8001ad6:	887b      	ldrh	r3, [r7, #2]
 8001ad8:	401a      	ands	r2, r3
 8001ada:	887b      	ldrh	r3, [r7, #2]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d104      	bne.n	8001aea <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001ae0:	887b      	ldrh	r3, [r7, #2]
 8001ae2:	041a      	lsls	r2, r3, #16
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001ae8:	e002      	b.n	8001af0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e07f      	b.n	8001c0e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d106      	bne.n	8001b28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f7ff fb46 	bl	80011b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2224      	movs	r2, #36	; 0x24
 8001b2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f022 0201 	bic.w	r2, r2, #1
 8001b3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685a      	ldr	r2, [r3, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d107      	bne.n	8001b76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689a      	ldr	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	e006      	b.n	8001b84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001b82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d104      	bne.n	8001b96 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	6859      	ldr	r1, [r3, #4]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_I2C_Init+0x11c>)
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	68da      	ldr	r2, [r3, #12]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001bb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691a      	ldr	r2, [r3, #16]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	ea42 0103 	orr.w	r1, r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	699b      	ldr	r3, [r3, #24]
 8001bc6:	021a      	lsls	r2, r3, #8
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	430a      	orrs	r2, r1
 8001bce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	69d9      	ldr	r1, [r3, #28]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a1a      	ldr	r2, [r3, #32]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2220      	movs	r2, #32
 8001bfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3708      	adds	r7, #8
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	02008000 	.word	0x02008000

08001c1c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af02      	add	r7, sp, #8
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	607a      	str	r2, [r7, #4]
 8001c26:	461a      	mov	r2, r3
 8001c28:	460b      	mov	r3, r1
 8001c2a:	817b      	strh	r3, [r7, #10]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b20      	cmp	r3, #32
 8001c3a:	f040 80da 	bne.w	8001df2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d101      	bne.n	8001c4c <HAL_I2C_Master_Transmit+0x30>
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e0d3      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1d8>
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001c54:	f7ff fc60 	bl	8001518 <HAL_GetTick>
 8001c58:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	2319      	movs	r3, #25
 8001c60:	2201      	movs	r2, #1
 8001c62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f000 f9e6 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0be      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	2221      	movs	r2, #33	; 0x21
 8001c7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2210      	movs	r2, #16
 8001c82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	893a      	ldrh	r2, [r7, #8]
 8001c96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	2bff      	cmp	r3, #255	; 0xff
 8001ca6:	d90e      	bls.n	8001cc6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	22ff      	movs	r2, #255	; 0xff
 8001cac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cb2:	b2da      	uxtb	r2, r3
 8001cb4:	8979      	ldrh	r1, [r7, #10]
 8001cb6:	4b51      	ldr	r3, [pc, #324]	; (8001dfc <HAL_I2C_Master_Transmit+0x1e0>)
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001cbe:	68f8      	ldr	r0, [r7, #12]
 8001cc0:	f000 fb48 	bl	8002354 <I2C_TransferConfig>
 8001cc4:	e06c      	b.n	8001da0 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cca:	b29a      	uxth	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cd4:	b2da      	uxtb	r2, r3
 8001cd6:	8979      	ldrh	r1, [r7, #10]
 8001cd8:	4b48      	ldr	r3, [pc, #288]	; (8001dfc <HAL_I2C_Master_Transmit+0x1e0>)
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce0:	68f8      	ldr	r0, [r7, #12]
 8001ce2:	f000 fb37 	bl	8002354 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ce6:	e05b      	b.n	8001da0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ce8:	697a      	ldr	r2, [r7, #20]
 8001cea:	6a39      	ldr	r1, [r7, #32]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f000 f9e3 	bl	80020b8 <I2C_WaitOnTXISFlagUntilTimeout>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e07b      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	781a      	ldrb	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0c:	1c5a      	adds	r2, r3, #1
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	b29a      	uxth	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d24:	3b01      	subs	r3, #1
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d034      	beq.n	8001da0 <HAL_I2C_Master_Transmit+0x184>
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d130      	bne.n	8001da0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001d3e:	697b      	ldr	r3, [r7, #20]
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	2200      	movs	r2, #0
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f000 f975 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e04d      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	2bff      	cmp	r3, #255	; 0xff
 8001d60:	d90e      	bls.n	8001d80 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	22ff      	movs	r2, #255	; 0xff
 8001d66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	8979      	ldrh	r1, [r7, #10]
 8001d70:	2300      	movs	r3, #0
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f000 faeb 	bl	8002354 <I2C_TransferConfig>
 8001d7e:	e00f      	b.n	8001da0 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d84:	b29a      	uxth	r2, r3
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d8e:	b2da      	uxtb	r2, r3
 8001d90:	8979      	ldrh	r1, [r7, #10]
 8001d92:	2300      	movs	r3, #0
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d9a:	68f8      	ldr	r0, [r7, #12]
 8001d9c:	f000 fada 	bl	8002354 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d19e      	bne.n	8001ce8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	6a39      	ldr	r1, [r7, #32]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f9c2 	bl	8002138 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e01a      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	6859      	ldr	r1, [r3, #4]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b0b      	ldr	r3, [pc, #44]	; (8001e00 <HAL_I2C_Master_Transmit+0x1e4>)
 8001dd2:	400b      	ands	r3, r1
 8001dd4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2220      	movs	r2, #32
 8001dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8001df2:	2302      	movs	r3, #2
  }
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	80002000 	.word	0x80002000
 8001e00:	fe00e800 	.word	0xfe00e800

08001e04 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b088      	sub	sp, #32
 8001e08:	af02      	add	r7, sp, #8
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	817b      	strh	r3, [r7, #10]
 8001e14:	4613      	mov	r3, r2
 8001e16:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	2b20      	cmp	r3, #32
 8001e22:	f040 80db 	bne.w	8001fdc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e2c:	2b01      	cmp	r3, #1
 8001e2e:	d101      	bne.n	8001e34 <HAL_I2C_Master_Receive+0x30>
 8001e30:	2302      	movs	r3, #2
 8001e32:	e0d4      	b.n	8001fde <HAL_I2C_Master_Receive+0x1da>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001e3c:	f7ff fb6c 	bl	8001518 <HAL_GetTick>
 8001e40:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	9300      	str	r3, [sp, #0]
 8001e46:	2319      	movs	r3, #25
 8001e48:	2201      	movs	r2, #1
 8001e4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e4e:	68f8      	ldr	r0, [r7, #12]
 8001e50:	f000 f8f2 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e0bf      	b.n	8001fde <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2222      	movs	r2, #34	; 0x22
 8001e62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2210      	movs	r2, #16
 8001e6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	2200      	movs	r2, #0
 8001e72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	893a      	ldrh	r2, [r7, #8]
 8001e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	2bff      	cmp	r3, #255	; 0xff
 8001e8e:	d90e      	bls.n	8001eae <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	22ff      	movs	r2, #255	; 0xff
 8001e94:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e9a:	b2da      	uxtb	r2, r3
 8001e9c:	8979      	ldrh	r1, [r7, #10]
 8001e9e:	4b52      	ldr	r3, [pc, #328]	; (8001fe8 <HAL_I2C_Master_Receive+0x1e4>)
 8001ea0:	9300      	str	r3, [sp, #0]
 8001ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 fa54 	bl	8002354 <I2C_TransferConfig>
 8001eac:	e06d      	b.n	8001f8a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb2:	b29a      	uxth	r2, r3
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	8979      	ldrh	r1, [r7, #10]
 8001ec0:	4b49      	ldr	r3, [pc, #292]	; (8001fe8 <HAL_I2C_Master_Receive+0x1e4>)
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ec8:	68f8      	ldr	r0, [r7, #12]
 8001eca:	f000 fa43 	bl	8002354 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8001ece:	e05c      	b.n	8001f8a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	6a39      	ldr	r1, [r7, #32]
 8001ed4:	68f8      	ldr	r0, [r7, #12]
 8001ed6:	f000 f96b 	bl	80021b0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e07c      	b.n	8001fde <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	1c5a      	adds	r2, r3, #1
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f00:	3b01      	subs	r3, #1
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d034      	beq.n	8001f8a <HAL_I2C_Master_Receive+0x186>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d130      	bne.n	8001f8a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	9300      	str	r3, [sp, #0]
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2180      	movs	r1, #128	; 0x80
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f000 f880 	bl	8002038 <I2C_WaitOnFlagUntilTimeout>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e04d      	b.n	8001fde <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	2bff      	cmp	r3, #255	; 0xff
 8001f4a:	d90e      	bls.n	8001f6a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	22ff      	movs	r2, #255	; 0xff
 8001f50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f56:	b2da      	uxtb	r2, r3
 8001f58:	8979      	ldrh	r1, [r7, #10]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	9300      	str	r3, [sp, #0]
 8001f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001f62:	68f8      	ldr	r0, [r7, #12]
 8001f64:	f000 f9f6 	bl	8002354 <I2C_TransferConfig>
 8001f68:	e00f      	b.n	8001f8a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f78:	b2da      	uxtb	r2, r3
 8001f7a:	8979      	ldrh	r1, [r7, #10]
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f84:	68f8      	ldr	r0, [r7, #12]
 8001f86:	f000 f9e5 	bl	8002354 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d19d      	bne.n	8001ed0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	6a39      	ldr	r1, [r7, #32]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	f000 f8cd 	bl	8002138 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e01a      	b.n	8001fde <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2220      	movs	r2, #32
 8001fae:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6859      	ldr	r1, [r3, #4]
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <HAL_I2C_Master_Receive+0x1e8>)
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	2220      	movs	r2, #32
 8001fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3718      	adds	r7, #24
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	80002400 	.word	0x80002400
 8001fec:	fe00e800 	.word	0xfe00e800

08001ff0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f003 0302 	and.w	r3, r3, #2
 8002002:	2b02      	cmp	r3, #2
 8002004:	d103      	bne.n	800200e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2200      	movs	r2, #0
 800200c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b01      	cmp	r3, #1
 800201a:	d007      	beq.n	800202c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	699a      	ldr	r2, [r3, #24]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	619a      	str	r2, [r3, #24]
  }
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	60f8      	str	r0, [r7, #12]
 8002040:	60b9      	str	r1, [r7, #8]
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	4613      	mov	r3, r2
 8002046:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002048:	e022      	b.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002050:	d01e      	beq.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002052:	f7ff fa61 	bl	8001518 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	429a      	cmp	r2, r3
 8002060:	d302      	bcc.n	8002068 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d113      	bne.n	8002090 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206c:	f043 0220 	orr.w	r2, r3, #32
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2220      	movs	r2, #32
 8002078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e00f      	b.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	699a      	ldr	r2, [r3, #24]
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4013      	ands	r3, r2
 800209a:	68ba      	ldr	r2, [r7, #8]
 800209c:	429a      	cmp	r2, r3
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d0cd      	beq.n	800204a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80020c4:	e02c      	b.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	68b9      	ldr	r1, [r7, #8]
 80020ca:	68f8      	ldr	r0, [r7, #12]
 80020cc:	f000 f8dc 	bl	8002288 <I2C_IsAcknowledgeFailed>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e02a      	b.n	8002130 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e0:	d01e      	beq.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020e2:	f7ff fa19 	bl	8001518 <HAL_GetTick>
 80020e6:	4602      	mov	r2, r0
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	1ad3      	subs	r3, r2, r3
 80020ec:	68ba      	ldr	r2, [r7, #8]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d302      	bcc.n	80020f8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d113      	bne.n	8002120 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fc:	f043 0220 	orr.w	r2, r3, #32
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2220      	movs	r2, #32
 8002108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e007      	b.n	8002130 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b02      	cmp	r3, #2
 800212c:	d1cb      	bne.n	80020c6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3710      	adds	r7, #16
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002144:	e028      	b.n	8002198 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 f89c 	bl	8002288 <I2C_IsAcknowledgeFailed>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e026      	b.n	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800215a:	f7ff f9dd 	bl	8001518 <HAL_GetTick>
 800215e:	4602      	mov	r2, r0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	1ad3      	subs	r3, r2, r3
 8002164:	68ba      	ldr	r2, [r7, #8]
 8002166:	429a      	cmp	r2, r3
 8002168:	d302      	bcc.n	8002170 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d113      	bne.n	8002198 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	f043 0220 	orr.w	r2, r3, #32
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2220      	movs	r2, #32
 8002180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e007      	b.n	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	f003 0320 	and.w	r3, r3, #32
 80021a2:	2b20      	cmp	r3, #32
 80021a4:	d1cf      	bne.n	8002146 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3710      	adds	r7, #16
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}

080021b0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	60b9      	str	r1, [r7, #8]
 80021ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021bc:	e055      	b.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	68b9      	ldr	r1, [r7, #8]
 80021c2:	68f8      	ldr	r0, [r7, #12]
 80021c4:	f000 f860 	bl	8002288 <I2C_IsAcknowledgeFailed>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e053      	b.n	800227a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	699b      	ldr	r3, [r3, #24]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b20      	cmp	r3, #32
 80021de:	d129      	bne.n	8002234 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	d105      	bne.n	80021fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 80021f6:	2300      	movs	r3, #0
 80021f8:	e03f      	b.n	800227a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2220      	movs	r2, #32
 8002200:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 800220e:	400b      	ands	r3, r1
 8002210:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e022      	b.n	800227a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002234:	f7ff f970 	bl	8001518 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	68ba      	ldr	r2, [r7, #8]
 8002240:	429a      	cmp	r2, r3
 8002242:	d302      	bcc.n	800224a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10f      	bne.n	800226a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f043 0220 	orr.w	r2, r3, #32
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2220      	movs	r2, #32
 800225a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002266:	2301      	movs	r3, #1
 8002268:	e007      	b.n	800227a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	2b04      	cmp	r3, #4
 8002276:	d1a2      	bne.n	80021be <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002278:	2300      	movs	r3, #0
}
 800227a:	4618      	mov	r0, r3
 800227c:	3710      	adds	r7, #16
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	fe00e800 	.word	0xfe00e800

08002288 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f003 0310 	and.w	r3, r3, #16
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d151      	bne.n	8002346 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a2:	e022      	b.n	80022ea <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022aa:	d01e      	beq.n	80022ea <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ac:	f7ff f934 	bl	8001518 <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d302      	bcc.n	80022c2 <I2C_IsAcknowledgeFailed+0x3a>
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d113      	bne.n	80022ea <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f043 0220 	orr.w	r2, r3, #32
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2220      	movs	r2, #32
 80022d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e02e      	b.n	8002348 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	f003 0320 	and.w	r3, r3, #32
 80022f4:	2b20      	cmp	r3, #32
 80022f6:	d1d5      	bne.n	80022a4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2210      	movs	r2, #16
 80022fe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2220      	movs	r2, #32
 8002306:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002308:	68f8      	ldr	r0, [r7, #12]
 800230a:	f7ff fe71 	bl	8001ff0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	6859      	ldr	r1, [r3, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <I2C_IsAcknowledgeFailed+0xc8>)
 800231a:	400b      	ands	r3, r1
 800231c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	f043 0204 	orr.w	r2, r3, #4
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2220      	movs	r2, #32
 800232e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	2200      	movs	r2, #0
 8002336:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3710      	adds	r7, #16
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	fe00e800 	.word	0xfe00e800

08002354 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	607b      	str	r3, [r7, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	817b      	strh	r3, [r7, #10]
 8002362:	4613      	mov	r3, r2
 8002364:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	0d5b      	lsrs	r3, r3, #21
 8002370:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002374:	4b0d      	ldr	r3, [pc, #52]	; (80023ac <I2C_TransferConfig+0x58>)
 8002376:	430b      	orrs	r3, r1
 8002378:	43db      	mvns	r3, r3
 800237a:	ea02 0103 	and.w	r1, r2, r3
 800237e:	897b      	ldrh	r3, [r7, #10]
 8002380:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002384:	7a7b      	ldrb	r3, [r7, #9]
 8002386:	041b      	lsls	r3, r3, #16
 8002388:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800238c:	431a      	orrs	r2, r3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	431a      	orrs	r2, r3
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	431a      	orrs	r2, r3
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800239e:	bf00      	nop
 80023a0:	3714      	adds	r7, #20
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
 80023aa:	bf00      	nop
 80023ac:	03ff63ff 	.word	0x03ff63ff

080023b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80023b0:	b480      	push	{r7}
 80023b2:	b083      	sub	sp, #12
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
 80023b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	2b20      	cmp	r3, #32
 80023c4:	d138      	bne.n	8002438 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d101      	bne.n	80023d4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023d0:	2302      	movs	r3, #2
 80023d2:	e032      	b.n	800243a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2224      	movs	r2, #36	; 0x24
 80023e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f022 0201 	bic.w	r2, r2, #1
 80023f2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002402:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6819      	ldr	r1, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	683a      	ldr	r2, [r7, #0]
 8002410:	430a      	orrs	r2, r1
 8002412:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f042 0201 	orr.w	r2, r2, #1
 8002422:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2220      	movs	r2, #32
 8002428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002434:	2300      	movs	r3, #0
 8002436:	e000      	b.n	800243a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002438:	2302      	movs	r3, #2
  }
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	6078      	str	r0, [r7, #4]
 800244e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b20      	cmp	r3, #32
 800245a:	d139      	bne.n	80024d0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002466:	2302      	movs	r3, #2
 8002468:	e033      	b.n	80024d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2201      	movs	r2, #1
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2224      	movs	r2, #36	; 0x24
 8002476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f022 0201 	bic.w	r2, r2, #1
 8002488:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002498:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	021b      	lsls	r3, r3, #8
 800249e:	68fa      	ldr	r2, [r7, #12]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68fa      	ldr	r2, [r7, #12]
 80024aa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2200      	movs	r2, #0
 80024c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80024cc:	2300      	movs	r3, #0
 80024ce:	e000      	b.n	80024d2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024d0:	2302      	movs	r3, #2
  }
}
 80024d2:	4618      	mov	r0, r3
 80024d4:	3714      	adds	r7, #20
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
	...

080024e0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80024e0:	b480      	push	{r7}
 80024e2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a04      	ldr	r2, [pc, #16]	; (80024fc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80024ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ee:	6013      	str	r3, [r2, #0]
}
 80024f0:	bf00      	nop
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40007000 	.word	0x40007000

08002500 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800250a:	4b23      	ldr	r3, [pc, #140]	; (8002598 <HAL_PWREx_EnableOverDrive+0x98>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	4a22      	ldr	r2, [pc, #136]	; (8002598 <HAL_PWREx_EnableOverDrive+0x98>)
 8002510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002514:	6413      	str	r3, [r2, #64]	; 0x40
 8002516:	4b20      	ldr	r3, [pc, #128]	; (8002598 <HAL_PWREx_EnableOverDrive+0x98>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800251e:	603b      	str	r3, [r7, #0]
 8002520:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002522:	4b1e      	ldr	r3, [pc, #120]	; (800259c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a1d      	ldr	r2, [pc, #116]	; (800259c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800252e:	f7fe fff3 	bl	8001518 <HAL_GetTick>
 8002532:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002534:	e009      	b.n	800254a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002536:	f7fe ffef 	bl	8001518 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002544:	d901      	bls.n	800254a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e022      	b.n	8002590 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <HAL_PWREx_EnableOverDrive+0x9c>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002556:	d1ee      	bne.n	8002536 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002558:	4b10      	ldr	r3, [pc, #64]	; (800259c <HAL_PWREx_EnableOverDrive+0x9c>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a0f      	ldr	r2, [pc, #60]	; (800259c <HAL_PWREx_EnableOverDrive+0x9c>)
 800255e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002562:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002564:	f7fe ffd8 	bl	8001518 <HAL_GetTick>
 8002568:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800256a:	e009      	b.n	8002580 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800256c:	f7fe ffd4 	bl	8001518 <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800257a:	d901      	bls.n	8002580 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e007      	b.n	8002590 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002580:	4b06      	ldr	r3, [pc, #24]	; (800259c <HAL_PWREx_EnableOverDrive+0x9c>)
 8002582:	685b      	ldr	r3, [r3, #4]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800258c:	d1ee      	bne.n	800256c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800258e:	2300      	movs	r3, #0
}
 8002590:	4618      	mov	r0, r3
 8002592:	3708      	adds	r7, #8
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40023800 	.word	0x40023800
 800259c:	40007000 	.word	0x40007000

080025a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 80025a8:	2300      	movs	r3, #0
 80025aa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e25e      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	f000 8087 	beq.w	80026d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025c4:	4b96      	ldr	r3, [pc, #600]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	f003 030c 	and.w	r3, r3, #12
 80025cc:	2b04      	cmp	r3, #4
 80025ce:	d00c      	beq.n	80025ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025d0:	4b93      	ldr	r3, [pc, #588]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	f003 030c 	and.w	r3, r3, #12
 80025d8:	2b08      	cmp	r3, #8
 80025da:	d112      	bne.n	8002602 <HAL_RCC_OscConfig+0x62>
 80025dc:	4b90      	ldr	r3, [pc, #576]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025e8:	d10b      	bne.n	8002602 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ea:	4b8d      	ldr	r3, [pc, #564]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d06c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x130>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d168      	bne.n	80026d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e238      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800260a:	d106      	bne.n	800261a <HAL_RCC_OscConfig+0x7a>
 800260c:	4b84      	ldr	r3, [pc, #528]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a83      	ldr	r2, [pc, #524]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002612:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	e02e      	b.n	8002678 <HAL_RCC_OscConfig+0xd8>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10c      	bne.n	800263c <HAL_RCC_OscConfig+0x9c>
 8002622:	4b7f      	ldr	r3, [pc, #508]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a7e      	ldr	r2, [pc, #504]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	4b7c      	ldr	r3, [pc, #496]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a7b      	ldr	r2, [pc, #492]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002634:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002638:	6013      	str	r3, [r2, #0]
 800263a:	e01d      	b.n	8002678 <HAL_RCC_OscConfig+0xd8>
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002644:	d10c      	bne.n	8002660 <HAL_RCC_OscConfig+0xc0>
 8002646:	4b76      	ldr	r3, [pc, #472]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a75      	ldr	r2, [pc, #468]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800264c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002650:	6013      	str	r3, [r2, #0]
 8002652:	4b73      	ldr	r3, [pc, #460]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a72      	ldr	r2, [pc, #456]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002658:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e00b      	b.n	8002678 <HAL_RCC_OscConfig+0xd8>
 8002660:	4b6f      	ldr	r3, [pc, #444]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a6e      	ldr	r2, [pc, #440]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002666:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800266a:	6013      	str	r3, [r2, #0]
 800266c:	4b6c      	ldr	r3, [pc, #432]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a6b      	ldr	r2, [pc, #428]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002672:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002676:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d013      	beq.n	80026a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002680:	f7fe ff4a 	bl	8001518 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002688:	f7fe ff46 	bl	8001518 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b64      	cmp	r3, #100	; 0x64
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e1ec      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800269a:	4b61      	ldr	r3, [pc, #388]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0xe8>
 80026a6:	e014      	b.n	80026d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe ff36 	bl	8001518 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026b0:	f7fe ff32 	bl	8001518 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b64      	cmp	r3, #100	; 0x64
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e1d8      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026c2:	4b57      	ldr	r3, [pc, #348]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x110>
 80026ce:	e000      	b.n	80026d2 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d069      	beq.n	80027b2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026de:	4b50      	ldr	r3, [pc, #320]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 030c 	and.w	r3, r3, #12
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00b      	beq.n	8002702 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ea:	4b4d      	ldr	r3, [pc, #308]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 030c 	and.w	r3, r3, #12
 80026f2:	2b08      	cmp	r3, #8
 80026f4:	d11c      	bne.n	8002730 <HAL_RCC_OscConfig+0x190>
 80026f6:	4b4a      	ldr	r3, [pc, #296]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d116      	bne.n	8002730 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002702:	4b47      	ldr	r3, [pc, #284]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d005      	beq.n	800271a <HAL_RCC_OscConfig+0x17a>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	68db      	ldr	r3, [r3, #12]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d001      	beq.n	800271a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e1ac      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b41      	ldr	r3, [pc, #260]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	493d      	ldr	r1, [pc, #244]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	e040      	b.n	80027b2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d023      	beq.n	8002780 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002738:	4b39      	ldr	r3, [pc, #228]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a38      	ldr	r2, [pc, #224]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002744:	f7fe fee8 	bl	8001518 <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800274c:	f7fe fee4 	bl	8001518 <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b02      	cmp	r3, #2
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e18a      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800275e:	4b30      	ldr	r3, [pc, #192]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276a:	4b2d      	ldr	r3, [pc, #180]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	4929      	ldr	r1, [pc, #164]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 800277a:	4313      	orrs	r3, r2
 800277c:	600b      	str	r3, [r1, #0]
 800277e:	e018      	b.n	80027b2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002780:	4b27      	ldr	r3, [pc, #156]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a26      	ldr	r2, [pc, #152]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278c:	f7fe fec4 	bl	8001518 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002794:	f7fe fec0 	bl	8001518 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e166      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	4b1e      	ldr	r3, [pc, #120]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d1f0      	bne.n	8002794 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0308 	and.w	r3, r3, #8
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d038      	beq.n	8002830 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	695b      	ldr	r3, [r3, #20]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d019      	beq.n	80027fa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027c6:	4b16      	ldr	r3, [pc, #88]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80027c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ca:	4a15      	ldr	r2, [pc, #84]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d2:	f7fe fea1 	bl	8001518 <HAL_GetTick>
 80027d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027d8:	e008      	b.n	80027ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027da:	f7fe fe9d 	bl	8001518 <HAL_GetTick>
 80027de:	4602      	mov	r2, r0
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	1ad3      	subs	r3, r2, r3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d901      	bls.n	80027ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027e8:	2303      	movs	r3, #3
 80027ea:	e143      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ec:	4b0c      	ldr	r3, [pc, #48]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80027ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d0f0      	beq.n	80027da <HAL_RCC_OscConfig+0x23a>
 80027f8:	e01a      	b.n	8002830 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027fa:	4b09      	ldr	r3, [pc, #36]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 80027fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fe:	4a08      	ldr	r2, [pc, #32]	; (8002820 <HAL_RCC_OscConfig+0x280>)
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe fe87 	bl	8001518 <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800280c:	e00a      	b.n	8002824 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800280e:	f7fe fe83 	bl	8001518 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d903      	bls.n	8002824 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e129      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
 8002820:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002824:	4b95      	ldr	r3, [pc, #596]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d1ee      	bne.n	800280e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0304 	and.w	r3, r3, #4
 8002838:	2b00      	cmp	r3, #0
 800283a:	f000 80a4 	beq.w	8002986 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800283e:	4b8f      	ldr	r3, [pc, #572]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d10d      	bne.n	8002866 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800284a:	4b8c      	ldr	r3, [pc, #560]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	4a8b      	ldr	r2, [pc, #556]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002854:	6413      	str	r3, [r2, #64]	; 0x40
 8002856:	4b89      	ldr	r3, [pc, #548]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002862:	2301      	movs	r3, #1
 8002864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002866:	4b86      	ldr	r3, [pc, #536]	; (8002a80 <HAL_RCC_OscConfig+0x4e0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002872:	4b83      	ldr	r3, [pc, #524]	; (8002a80 <HAL_RCC_OscConfig+0x4e0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a82      	ldr	r2, [pc, #520]	; (8002a80 <HAL_RCC_OscConfig+0x4e0>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800287c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800287e:	f7fe fe4b 	bl	8001518 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002884:	e008      	b.n	8002898 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002886:	f7fe fe47 	bl	8001518 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e0ed      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002898:	4b79      	ldr	r3, [pc, #484]	; (8002a80 <HAL_RCC_OscConfig+0x4e0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d0f0      	beq.n	8002886 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d106      	bne.n	80028ba <HAL_RCC_OscConfig+0x31a>
 80028ac:	4b73      	ldr	r3, [pc, #460]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b0:	4a72      	ldr	r2, [pc, #456]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028b2:	f043 0301 	orr.w	r3, r3, #1
 80028b6:	6713      	str	r3, [r2, #112]	; 0x70
 80028b8:	e02d      	b.n	8002916 <HAL_RCC_OscConfig+0x376>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10c      	bne.n	80028dc <HAL_RCC_OscConfig+0x33c>
 80028c2:	4b6e      	ldr	r3, [pc, #440]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028c6:	4a6d      	ldr	r2, [pc, #436]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028c8:	f023 0301 	bic.w	r3, r3, #1
 80028cc:	6713      	str	r3, [r2, #112]	; 0x70
 80028ce:	4b6b      	ldr	r3, [pc, #428]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028d2:	4a6a      	ldr	r2, [pc, #424]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028d4:	f023 0304 	bic.w	r3, r3, #4
 80028d8:	6713      	str	r3, [r2, #112]	; 0x70
 80028da:	e01c      	b.n	8002916 <HAL_RCC_OscConfig+0x376>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	2b05      	cmp	r3, #5
 80028e2:	d10c      	bne.n	80028fe <HAL_RCC_OscConfig+0x35e>
 80028e4:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e8:	4a64      	ldr	r2, [pc, #400]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028ea:	f043 0304 	orr.w	r3, r3, #4
 80028ee:	6713      	str	r3, [r2, #112]	; 0x70
 80028f0:	4b62      	ldr	r3, [pc, #392]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f4:	4a61      	ldr	r2, [pc, #388]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80028f6:	f043 0301 	orr.w	r3, r3, #1
 80028fa:	6713      	str	r3, [r2, #112]	; 0x70
 80028fc:	e00b      	b.n	8002916 <HAL_RCC_OscConfig+0x376>
 80028fe:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a5e      	ldr	r2, [pc, #376]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	4b5c      	ldr	r3, [pc, #368]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 800290c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800290e:	4a5b      	ldr	r2, [pc, #364]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002910:	f023 0304 	bic.w	r3, r3, #4
 8002914:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d015      	beq.n	800294a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fdfb 	bl	8001518 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002924:	e00a      	b.n	800293c <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002926:	f7fe fdf7 	bl	8001518 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	f241 3288 	movw	r2, #5000	; 0x1388
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e09b      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800293c:	4b4f      	ldr	r3, [pc, #316]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d0ee      	beq.n	8002926 <HAL_RCC_OscConfig+0x386>
 8002948:	e014      	b.n	8002974 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294a:	f7fe fde5 	bl	8001518 <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002950:	e00a      	b.n	8002968 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002952:	f7fe fde1 	bl	8001518 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002960:	4293      	cmp	r3, r2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e085      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002968:	4b44      	ldr	r3, [pc, #272]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1ee      	bne.n	8002952 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002974:	7dfb      	ldrb	r3, [r7, #23]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d105      	bne.n	8002986 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800297a:	4b40      	ldr	r3, [pc, #256]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 800297c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297e:	4a3f      	ldr	r2, [pc, #252]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002980:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002984:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	699b      	ldr	r3, [r3, #24]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d071      	beq.n	8002a72 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800298e:	4b3b      	ldr	r3, [pc, #236]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b08      	cmp	r3, #8
 8002998:	d069      	beq.n	8002a6e <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d14b      	bne.n	8002a3a <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029a2:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a35      	ldr	r2, [pc, #212]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80029a8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ae:	f7fe fdb3 	bl	8001518 <HAL_GetTick>
 80029b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b4:	e008      	b.n	80029c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029b6:	f7fe fdaf 	bl	8001518 <HAL_GetTick>
 80029ba:	4602      	mov	r2, r0
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	1ad3      	subs	r3, r2, r3
 80029c0:	2b02      	cmp	r3, #2
 80029c2:	d901      	bls.n	80029c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029c4:	2303      	movs	r3, #3
 80029c6:	e055      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c8:	4b2c      	ldr	r3, [pc, #176]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d1f0      	bne.n	80029b6 <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69da      	ldr	r2, [r3, #28]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e2:	019b      	lsls	r3, r3, #6
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029ea:	085b      	lsrs	r3, r3, #1
 80029ec:	3b01      	subs	r3, #1
 80029ee:	041b      	lsls	r3, r3, #16
 80029f0:	431a      	orrs	r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	061b      	lsls	r3, r3, #24
 80029f8:	431a      	orrs	r2, r3
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fe:	071b      	lsls	r3, r3, #28
 8002a00:	491e      	ldr	r1, [pc, #120]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a06:	4b1d      	ldr	r3, [pc, #116]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a1c      	ldr	r2, [pc, #112]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002a0c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a12:	f7fe fd81 	bl	8001518 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a18:	e008      	b.n	8002a2c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a1a:	f7fe fd7d 	bl	8001518 <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	2b02      	cmp	r3, #2
 8002a26:	d901      	bls.n	8002a2c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e023      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a2c:	4b13      	ldr	r3, [pc, #76]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0f0      	beq.n	8002a1a <HAL_RCC_OscConfig+0x47a>
 8002a38:	e01b      	b.n	8002a72 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3a:	4b10      	ldr	r3, [pc, #64]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a0f      	ldr	r2, [pc, #60]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002a40:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a46:	f7fe fd67 	bl	8001518 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4c:	e008      	b.n	8002a60 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a4e:	f7fe fd63 	bl	8001518 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d901      	bls.n	8002a60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e009      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a60:	4b06      	ldr	r3, [pc, #24]	; (8002a7c <HAL_RCC_OscConfig+0x4dc>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1f0      	bne.n	8002a4e <HAL_RCC_OscConfig+0x4ae>
 8002a6c:	e001      	b.n	8002a72 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e000      	b.n	8002a74 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8002a72:	2300      	movs	r3, #0
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3718      	adds	r7, #24
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000

08002a84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0ce      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b69      	ldr	r3, [pc, #420]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 030f 	and.w	r3, r3, #15
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d910      	bls.n	8002acc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b66      	ldr	r3, [pc, #408]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f023 020f 	bic.w	r2, r3, #15
 8002ab2:	4964      	ldr	r1, [pc, #400]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aba:	4b62      	ldr	r3, [pc, #392]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 030f 	and.w	r3, r3, #15
 8002ac2:	683a      	ldr	r2, [r7, #0]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d001      	beq.n	8002acc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e0b6      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d020      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d005      	beq.n	8002af0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ae4:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002afc:	4b52      	ldr	r3, [pc, #328]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4a51      	ldr	r2, [pc, #324]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002b06:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b08:	4b4f      	ldr	r3, [pc, #316]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	494c      	ldr	r1, [pc, #304]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d040      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d107      	bne.n	8002b3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b2e:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d115      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e07d      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b40      	ldr	r3, [pc, #256]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e071      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b56:	4b3c      	ldr	r3, [pc, #240]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e069      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b66:	4b38      	ldr	r3, [pc, #224]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 0203 	bic.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4935      	ldr	r1, [pc, #212]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b78:	f7fe fcce 	bl	8001518 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7fe fcca 	bl	8001518 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e051      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	4b2c      	ldr	r3, [pc, #176]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 020c 	and.w	r2, r3, #12
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1eb      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b26      	ldr	r3, [pc, #152]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 030f 	and.w	r3, r3, #15
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d210      	bcs.n	8002bd8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 020f 	bic.w	r2, r3, #15
 8002bbe:	4921      	ldr	r1, [pc, #132]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bc6:	4b1f      	ldr	r3, [pc, #124]	; (8002c44 <HAL_RCC_ClockConfig+0x1c0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 030f 	and.w	r3, r3, #15
 8002bce:	683a      	ldr	r2, [r7, #0]
 8002bd0:	429a      	cmp	r2, r3
 8002bd2:	d001      	beq.n	8002bd8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e030      	b.n	8002c3a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0304 	and.w	r3, r3, #4
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d008      	beq.n	8002bf6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002be4:	4b18      	ldr	r3, [pc, #96]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4915      	ldr	r1, [pc, #84]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d009      	beq.n	8002c16 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c02:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c04:	689b      	ldr	r3, [r3, #8]
 8002c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	490d      	ldr	r1, [pc, #52]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c12:	4313      	orrs	r3, r2
 8002c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c16:	f000 f81d 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_RCC_ClockConfig+0x1c4>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <HAL_RCC_ClockConfig+0x1c8>)
 8002c28:	5cd3      	ldrb	r3, [r2, r3]
 8002c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2e:	4a08      	ldr	r2, [pc, #32]	; (8002c50 <HAL_RCC_ClockConfig+0x1cc>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fe fc2c 	bl	8001490 <HAL_InitTick>

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40023c00 	.word	0x40023c00
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	080057c0 	.word	0x080057c0
 8002c50:	20000000 	.word	0x20000000

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	2300      	movs	r3, #0
 8002c64:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6a:	4b63      	ldr	r3, [pc, #396]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f003 030c 	and.w	r3, r3, #12
 8002c72:	2b04      	cmp	r3, #4
 8002c74:	d007      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x32>
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d008      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x38>
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f040 80b4 	bne.w	8002de8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c80:	4b5e      	ldr	r3, [pc, #376]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002c82:	60bb      	str	r3, [r7, #8]
       break;
 8002c84:	e0b3      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c86:	4b5e      	ldr	r3, [pc, #376]	; (8002e00 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002c88:	60bb      	str	r3, [r7, #8]
      break;
 8002c8a:	e0b0      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c8c:	4b5a      	ldr	r3, [pc, #360]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c94:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c96:	4b58      	ldr	r3, [pc, #352]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c98:	685b      	ldr	r3, [r3, #4]
 8002c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d04a      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca2:	4b55      	ldr	r3, [pc, #340]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	099b      	lsrs	r3, r3, #6
 8002ca8:	f04f 0400 	mov.w	r4, #0
 8002cac:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002cb0:	f04f 0200 	mov.w	r2, #0
 8002cb4:	ea03 0501 	and.w	r5, r3, r1
 8002cb8:	ea04 0602 	and.w	r6, r4, r2
 8002cbc:	4629      	mov	r1, r5
 8002cbe:	4632      	mov	r2, r6
 8002cc0:	f04f 0300 	mov.w	r3, #0
 8002cc4:	f04f 0400 	mov.w	r4, #0
 8002cc8:	0154      	lsls	r4, r2, #5
 8002cca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002cce:	014b      	lsls	r3, r1, #5
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4622      	mov	r2, r4
 8002cd4:	1b49      	subs	r1, r1, r5
 8002cd6:	eb62 0206 	sbc.w	r2, r2, r6
 8002cda:	f04f 0300 	mov.w	r3, #0
 8002cde:	f04f 0400 	mov.w	r4, #0
 8002ce2:	0194      	lsls	r4, r2, #6
 8002ce4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ce8:	018b      	lsls	r3, r1, #6
 8002cea:	1a5b      	subs	r3, r3, r1
 8002cec:	eb64 0402 	sbc.w	r4, r4, r2
 8002cf0:	f04f 0100 	mov.w	r1, #0
 8002cf4:	f04f 0200 	mov.w	r2, #0
 8002cf8:	00e2      	lsls	r2, r4, #3
 8002cfa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002cfe:	00d9      	lsls	r1, r3, #3
 8002d00:	460b      	mov	r3, r1
 8002d02:	4614      	mov	r4, r2
 8002d04:	195b      	adds	r3, r3, r5
 8002d06:	eb44 0406 	adc.w	r4, r4, r6
 8002d0a:	f04f 0100 	mov.w	r1, #0
 8002d0e:	f04f 0200 	mov.w	r2, #0
 8002d12:	0262      	lsls	r2, r4, #9
 8002d14:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002d18:	0259      	lsls	r1, r3, #9
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	4614      	mov	r4, r2
 8002d1e:	4618      	mov	r0, r3
 8002d20:	4621      	mov	r1, r4
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f04f 0400 	mov.w	r4, #0
 8002d28:	461a      	mov	r2, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	f7fd fa8c 	bl	8000248 <__aeabi_uldivmod>
 8002d30:	4603      	mov	r3, r0
 8002d32:	460c      	mov	r4, r1
 8002d34:	60fb      	str	r3, [r7, #12]
 8002d36:	e049      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d38:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	099b      	lsrs	r3, r3, #6
 8002d3e:	f04f 0400 	mov.w	r4, #0
 8002d42:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002d46:	f04f 0200 	mov.w	r2, #0
 8002d4a:	ea03 0501 	and.w	r5, r3, r1
 8002d4e:	ea04 0602 	and.w	r6, r4, r2
 8002d52:	4629      	mov	r1, r5
 8002d54:	4632      	mov	r2, r6
 8002d56:	f04f 0300 	mov.w	r3, #0
 8002d5a:	f04f 0400 	mov.w	r4, #0
 8002d5e:	0154      	lsls	r4, r2, #5
 8002d60:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002d64:	014b      	lsls	r3, r1, #5
 8002d66:	4619      	mov	r1, r3
 8002d68:	4622      	mov	r2, r4
 8002d6a:	1b49      	subs	r1, r1, r5
 8002d6c:	eb62 0206 	sbc.w	r2, r2, r6
 8002d70:	f04f 0300 	mov.w	r3, #0
 8002d74:	f04f 0400 	mov.w	r4, #0
 8002d78:	0194      	lsls	r4, r2, #6
 8002d7a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002d7e:	018b      	lsls	r3, r1, #6
 8002d80:	1a5b      	subs	r3, r3, r1
 8002d82:	eb64 0402 	sbc.w	r4, r4, r2
 8002d86:	f04f 0100 	mov.w	r1, #0
 8002d8a:	f04f 0200 	mov.w	r2, #0
 8002d8e:	00e2      	lsls	r2, r4, #3
 8002d90:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002d94:	00d9      	lsls	r1, r3, #3
 8002d96:	460b      	mov	r3, r1
 8002d98:	4614      	mov	r4, r2
 8002d9a:	195b      	adds	r3, r3, r5
 8002d9c:	eb44 0406 	adc.w	r4, r4, r6
 8002da0:	f04f 0100 	mov.w	r1, #0
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	02a2      	lsls	r2, r4, #10
 8002daa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002dae:	0299      	lsls	r1, r3, #10
 8002db0:	460b      	mov	r3, r1
 8002db2:	4614      	mov	r4, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	4621      	mov	r1, r4
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f04f 0400 	mov.w	r4, #0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4623      	mov	r3, r4
 8002dc2:	f7fd fa41 	bl	8000248 <__aeabi_uldivmod>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	460c      	mov	r4, r1
 8002dca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	0c1b      	lsrs	r3, r3, #16
 8002dd2:	f003 0303 	and.w	r3, r3, #3
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002ddc:	68fa      	ldr	r2, [r7, #12]
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de4:	60bb      	str	r3, [r7, #8]
      break;
 8002de6:	e002      	b.n	8002dee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002dea:	60bb      	str	r3, [r7, #8]
      break;
 8002dec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002dee:	68bb      	ldr	r3, [r7, #8]
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3714      	adds	r7, #20
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	00f42400 	.word	0x00f42400
 8002e00:	007a1200 	.word	0x007a1200

08002e04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e04:	b480      	push	{r7}
 8002e06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e08:	4b03      	ldr	r3, [pc, #12]	; (8002e18 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	20000000 	.word	0x20000000

08002e1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002e20:	f7ff fff0 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e24:	4601      	mov	r1, r0
 8002e26:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	0a9b      	lsrs	r3, r3, #10
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	4a03      	ldr	r2, [pc, #12]	; (8002e40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e32:	5cd3      	ldrb	r3, [r2, r3]
 8002e34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	080057d0 	.word	0x080057d0

08002e44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002e48:	f7ff ffdc 	bl	8002e04 <HAL_RCC_GetHCLKFreq>
 8002e4c:	4601      	mov	r1, r0
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	0b5b      	lsrs	r3, r3, #13
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	4a03      	ldr	r2, [pc, #12]	; (8002e68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e5a:	5cd3      	ldrb	r3, [r2, r3]
 8002e5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40023800 	.word	0x40023800
 8002e68:	080057d0 	.word	0x080057d0

08002e6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b088      	sub	sp, #32
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002e80:	2300      	movs	r3, #0
 8002e82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0301 	and.w	r3, r3, #1
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d012      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e94:	4b69      	ldr	r3, [pc, #420]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	4a68      	ldr	r2, [pc, #416]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e9e:	6093      	str	r3, [r2, #8]
 8002ea0:	4b66      	ldr	r3, [pc, #408]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ea8:	4964      	ldr	r1, [pc, #400]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d017      	beq.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ec6:	4b5d      	ldr	r3, [pc, #372]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ecc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ed4:	4959      	ldr	r1, [pc, #356]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ee4:	d101      	bne.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d101      	bne.n	8002ef6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d017      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f02:	4b4e      	ldr	r3, [pc, #312]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	494a      	ldr	r1, [pc, #296]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f20:	d101      	bne.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002f22:	2301      	movs	r3, #1
 8002f24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d101      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d001      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0320 	and.w	r3, r3, #32
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	f000 808b 	beq.w	8003066 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f50:	4b3a      	ldr	r3, [pc, #232]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f54:	4a39      	ldr	r2, [pc, #228]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	; 0x40
 8002f5c:	4b37      	ldr	r3, [pc, #220]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f64:	60bb      	str	r3, [r7, #8]
 8002f66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002f68:	4b35      	ldr	r3, [pc, #212]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a34      	ldr	r2, [pc, #208]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f74:	f7fe fad0 	bl	8001518 <HAL_GetTick>
 8002f78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f7c:	f7fe facc 	bl	8001518 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e38d      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f8e:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f9a:	4b28      	ldr	r3, [pc, #160]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fa2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d035      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d02e      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002fb8:	4b20      	ldr	r3, [pc, #128]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fc0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fcc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002fce:	4b1b      	ldr	r3, [pc, #108]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd2:	4a1a      	ldr	r2, [pc, #104]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002fda:	4a18      	ldr	r2, [pc, #96]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002fe0:	4b16      	ldr	r3, [pc, #88]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d114      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fec:	f7fe fa94 	bl	8001518 <HAL_GetTick>
 8002ff0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ff2:	e00a      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ff4:	f7fe fa90 	bl	8001518 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	1ad3      	subs	r3, r2, r3
 8002ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003002:	4293      	cmp	r3, r2
 8003004:	d901      	bls.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e34f      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800300a:	4b0c      	ldr	r3, [pc, #48]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0ee      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003022:	d111      	bne.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003030:	4b04      	ldr	r3, [pc, #16]	; (8003044 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003032:	400b      	ands	r3, r1
 8003034:	4901      	ldr	r1, [pc, #4]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	608b      	str	r3, [r1, #8]
 800303a:	e00b      	b.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800303c:	40023800 	.word	0x40023800
 8003040:	40007000 	.word	0x40007000
 8003044:	0ffffcff 	.word	0x0ffffcff
 8003048:	4bb3      	ldr	r3, [pc, #716]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	4ab2      	ldr	r2, [pc, #712]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800304e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003052:	6093      	str	r3, [r2, #8]
 8003054:	4bb0      	ldr	r3, [pc, #704]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003056:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800305c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003060:	49ad      	ldr	r1, [pc, #692]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003062:	4313      	orrs	r3, r2
 8003064:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0310 	and.w	r3, r3, #16
 800306e:	2b00      	cmp	r3, #0
 8003070:	d010      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003072:	4ba9      	ldr	r3, [pc, #676]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003078:	4aa7      	ldr	r2, [pc, #668]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800307a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800307e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003082:	4ba5      	ldr	r3, [pc, #660]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003084:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	49a2      	ldr	r1, [pc, #648]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800308e:	4313      	orrs	r3, r2
 8003090:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d00a      	beq.n	80030b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030a0:	4b9d      	ldr	r3, [pc, #628]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80030ae:	499a      	ldr	r1, [pc, #616]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d00a      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030c2:	4b95      	ldr	r3, [pc, #596]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030d0:	4991      	ldr	r1, [pc, #580]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030e4:	4b8c      	ldr	r3, [pc, #560]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f2:	4989      	ldr	r1, [pc, #548]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003106:	4b84      	ldr	r3, [pc, #528]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800310c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003114:	4980      	ldr	r1, [pc, #512]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003124:	2b00      	cmp	r3, #0
 8003126:	d00a      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003128:	4b7b      	ldr	r3, [pc, #492]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800312a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312e:	f023 0203 	bic.w	r2, r3, #3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4978      	ldr	r1, [pc, #480]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800314a:	4b73      	ldr	r3, [pc, #460]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f023 020c 	bic.w	r2, r3, #12
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003158:	496f      	ldr	r1, [pc, #444]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800316c:	4b6a      	ldr	r3, [pc, #424]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800317a:	4967      	ldr	r1, [pc, #412]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00a      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800318e:	4b62      	ldr	r3, [pc, #392]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003194:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	495e      	ldr	r1, [pc, #376]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80031b0:	4b59      	ldr	r3, [pc, #356]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	4956      	ldr	r1, [pc, #344]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80031d2:	4b51      	ldr	r3, [pc, #324]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e0:	494d      	ldr	r1, [pc, #308]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80031f4:	4b48      	ldr	r3, [pc, #288]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80031f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003202:	4945      	ldr	r1, [pc, #276]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003216:	4b40      	ldr	r3, [pc, #256]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800321c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003224:	493c      	ldr	r1, [pc, #240]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003226:	4313      	orrs	r3, r2
 8003228:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003238:	4b37      	ldr	r3, [pc, #220]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800323a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800323e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003246:	4934      	ldr	r1, [pc, #208]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d011      	beq.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800325a:	4b2f      	ldr	r3, [pc, #188]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800325c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003260:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003268:	492b      	ldr	r1, [pc, #172]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800326a:	4313      	orrs	r3, r2
 800326c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003278:	d101      	bne.n	800327e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800327a:	2301      	movs	r3, #1
 800327c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 0308 	and.w	r3, r3, #8
 8003286:	2b00      	cmp	r3, #0
 8003288:	d001      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800328a:	2301      	movs	r3, #1
 800328c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00a      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800329a:	4b1f      	ldr	r3, [pc, #124]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800329c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a8:	491b      	ldr	r1, [pc, #108]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80032bc:	4b16      	ldr	r3, [pc, #88]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032cc:	4912      	ldr	r1, [pc, #72]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00b      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80032e0:	4b0d      	ldr	r3, [pc, #52]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032f0:	4909      	ldr	r1, [pc, #36]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00f      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003304:	4b04      	ldr	r3, [pc, #16]	; (8003318 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003306:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800330a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003314:	e002      	b.n	800331c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	4985      	ldr	r1, [pc, #532]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800331e:	4313      	orrs	r3, r2
 8003320:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d00b      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003330:	4b80      	ldr	r3, [pc, #512]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003332:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003336:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003340:	497c      	ldr	r1, [pc, #496]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	2b01      	cmp	r3, #1
 800334c:	d005      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003356:	f040 80d6 	bne.w	8003506 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800335a:	4b76      	ldr	r3, [pc, #472]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a75      	ldr	r2, [pc, #468]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003360:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003364:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003366:	f7fe f8d7 	bl	8001518 <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800336c:	e008      	b.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800336e:	f7fe f8d3 	bl	8001518 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b64      	cmp	r3, #100	; 0x64
 800337a:	d901      	bls.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e194      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003380:	4b6c      	ldr	r3, [pc, #432]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0301 	and.w	r3, r3, #1
 8003394:	2b00      	cmp	r3, #0
 8003396:	d021      	beq.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800339c:	2b00      	cmp	r3, #0
 800339e:	d11d      	bne.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80033a0:	4b64      	ldr	r3, [pc, #400]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033a6:	0c1b      	lsrs	r3, r3, #16
 80033a8:	f003 0303 	and.w	r3, r3, #3
 80033ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033ae:	4b61      	ldr	r3, [pc, #388]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033b4:	0e1b      	lsrs	r3, r3, #24
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	019a      	lsls	r2, r3, #6
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	041b      	lsls	r3, r3, #16
 80033c6:	431a      	orrs	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	061b      	lsls	r3, r3, #24
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	071b      	lsls	r3, r3, #28
 80033d4:	4957      	ldr	r1, [pc, #348]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d004      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x586>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d02e      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003406:	d129      	bne.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003408:	4b4a      	ldr	r3, [pc, #296]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800340a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003416:	4b47      	ldr	r3, [pc, #284]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800341c:	0f1b      	lsrs	r3, r3, #28
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	019a      	lsls	r2, r3, #6
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	041b      	lsls	r3, r3, #16
 800342e:	431a      	orrs	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	061b      	lsls	r3, r3, #24
 8003436:	431a      	orrs	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	071b      	lsls	r3, r3, #28
 800343c:	493d      	ldr	r1, [pc, #244]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800343e:	4313      	orrs	r3, r2
 8003440:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003444:	4b3b      	ldr	r3, [pc, #236]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003446:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800344a:	f023 021f 	bic.w	r2, r3, #31
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003452:	3b01      	subs	r3, #1
 8003454:	4937      	ldr	r1, [pc, #220]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003456:	4313      	orrs	r3, r2
 8003458:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d01d      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003468:	4b32      	ldr	r3, [pc, #200]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800346a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	f003 030f 	and.w	r3, r3, #15
 8003474:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003476:	4b2f      	ldr	r3, [pc, #188]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800347c:	0f1b      	lsrs	r3, r3, #28
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	019a      	lsls	r2, r3, #6
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	041b      	lsls	r3, r3, #16
 8003490:	431a      	orrs	r2, r3
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	431a      	orrs	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	071b      	lsls	r3, r3, #28
 800349c:	4925      	ldr	r1, [pc, #148]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d011      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	019a      	lsls	r2, r3, #6
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	061b      	lsls	r3, r3, #24
 80034c4:	431a      	orrs	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	689b      	ldr	r3, [r3, #8]
 80034ca:	071b      	lsls	r3, r3, #28
 80034cc:	4919      	ldr	r1, [pc, #100]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a16      	ldr	r2, [pc, #88]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e0:	f7fe f81a 	bl	8001518 <HAL_GetTick>
 80034e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80034e8:	f7fe f816 	bl	8001518 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e0d7      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003506:	69bb      	ldr	r3, [r7, #24]
 8003508:	2b01      	cmp	r3, #1
 800350a:	f040 80cd 	bne.w	80036a8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800350e:	4b09      	ldr	r3, [pc, #36]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4a08      	ldr	r2, [pc, #32]	; (8003534 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003518:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800351a:	f7fd fffd 	bl	8001518 <HAL_GetTick>
 800351e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003520:	e00a      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003522:	f7fd fff9 	bl	8001518 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b64      	cmp	r3, #100	; 0x64
 800352e:	d903      	bls.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e0ba      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8003534:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003538:	4b5e      	ldr	r3, [pc, #376]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003540:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003544:	d0ed      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d003      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003556:	2b00      	cmp	r3, #0
 8003558:	d009      	beq.n	800356e <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003562:	2b00      	cmp	r3, #0
 8003564:	d02e      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800356a:	2b00      	cmp	r3, #0
 800356c:	d12a      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800356e:	4b51      	ldr	r3, [pc, #324]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	0c1b      	lsrs	r3, r3, #16
 8003576:	f003 0303 	and.w	r3, r3, #3
 800357a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800357c:	4b4d      	ldr	r3, [pc, #308]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800357e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003582:	0f1b      	lsrs	r3, r3, #28
 8003584:	f003 0307 	and.w	r3, r3, #7
 8003588:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	019a      	lsls	r2, r3, #6
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	041b      	lsls	r3, r3, #16
 8003594:	431a      	orrs	r2, r3
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	699b      	ldr	r3, [r3, #24]
 800359a:	061b      	lsls	r3, r3, #24
 800359c:	431a      	orrs	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	071b      	lsls	r3, r3, #28
 80035a2:	4944      	ldr	r1, [pc, #272]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80035aa:	4b42      	ldr	r3, [pc, #264]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	3b01      	subs	r3, #1
 80035ba:	021b      	lsls	r3, r3, #8
 80035bc:	493d      	ldr	r1, [pc, #244]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d022      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d8:	d11d      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80035da:	4b36      	ldr	r3, [pc, #216]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e0:	0e1b      	lsrs	r3, r3, #24
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80035e8:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80035ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ee:	0f1b      	lsrs	r3, r3, #28
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	019a      	lsls	r2, r3, #6
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a1b      	ldr	r3, [r3, #32]
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	431a      	orrs	r2, r3
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	061b      	lsls	r3, r3, #24
 8003608:	431a      	orrs	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	071b      	lsls	r3, r3, #28
 800360e:	4929      	ldr	r1, [pc, #164]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d028      	beq.n	8003674 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003622:	4b24      	ldr	r3, [pc, #144]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	0e1b      	lsrs	r3, r3, #24
 800362a:	f003 030f 	and.w	r3, r3, #15
 800362e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003630:	4b20      	ldr	r3, [pc, #128]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	0c1b      	lsrs	r3, r3, #16
 8003638:	f003 0303 	and.w	r3, r3, #3
 800363c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	019a      	lsls	r2, r3, #6
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	041b      	lsls	r3, r3, #16
 8003648:	431a      	orrs	r2, r3
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	061b      	lsls	r3, r3, #24
 800364e:	431a      	orrs	r2, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	69db      	ldr	r3, [r3, #28]
 8003654:	071b      	lsls	r3, r3, #28
 8003656:	4917      	ldr	r1, [pc, #92]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003658:	4313      	orrs	r3, r2
 800365a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800365e:	4b15      	ldr	r3, [pc, #84]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003664:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800366c:	4911      	ldr	r1, [pc, #68]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003674:	4b0f      	ldr	r3, [pc, #60]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0e      	ldr	r2, [pc, #56]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003680:	f7fd ff4a 	bl	8001518 <HAL_GetTick>
 8003684:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003686:	e008      	b.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003688:	f7fd ff46 	bl	8001518 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e007      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800369a:	4b06      	ldr	r3, [pc, #24]	; (80036b4 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a6:	d1ef      	bne.n	8003688 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3720      	adds	r7, #32
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	40023800 	.word	0x40023800

080036b8 <HAL_USART_Init>:
  *         parameters in the USART_InitTypeDef and initialize the associated handle.
  * @param  husart USART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e03c      	b.n	8003744 <HAL_USART_Init+0x8c>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d106      	bne.n	80036e4 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f7fd fdac 	bl	800123c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Disable the Peripheral */
  __HAL_USART_DISABLE(husart);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  /* Set the Usart Communication parameters */
  if (USART_SetConfig(husart) == HAL_ERROR)
 80036fc:	6878      	ldr	r0, [r7, #4]
 80036fe:	f000 f905 	bl	800390c <USART_SetConfig>
 8003702:	4603      	mov	r3, r0
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_USART_Init+0x54>
  {
    return HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	e01b      	b.n	8003744 <HAL_USART_Init+0x8c>
  }

  /* In Synchronous mode, the following bits must be kept cleared:
  - LINEN bit in the USART_CR2 register
  - HDSEL, SCEN and IREN bits in the USART_CR3 register.*/
  husart->Instance->CR2 &= ~USART_CR2_LINEN;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	685a      	ldr	r2, [r3, #4]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800371a:	605a      	str	r2, [r3, #4]
  husart->Instance->CR3 &= ~(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	689a      	ldr	r2, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800372a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f042 0201 	orr.w	r2, r2, #1
 800373a:	601a      	str	r2, [r3, #0]

  /* TEACK to check before moving husart->State to Ready */
  return (USART_CheckIdleState(husart));
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 fa65 	bl	8003c0c <USART_CheckIdleState>
 8003742:	4603      	mov	r3, r0
}
 8003744:	4618      	mov	r0, r3
 8003746:	3708      	adds	r7, #8
 8003748:	46bd      	mov	sp, r7
 800374a:	bd80      	pop	{r7, pc}

0800374c <HAL_USART_Transmit>:
  * @param  Size Amount of data to be sent.
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Transmit(USART_HandleTypeDef *husart, uint8_t *pTxData, uint16_t Size, uint32_t Timeout)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b08a      	sub	sp, #40	; 0x28
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	603b      	str	r3, [r7, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *ptxdata8bits;
  uint16_t *ptxdata16bits;
  uint32_t tickstart;

  if (husart->State == HAL_USART_STATE_READY)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b01      	cmp	r3, #1
 8003766:	f040 8095 	bne.w	8003894 <HAL_USART_Transmit+0x148>
  {
    if ((pTxData == NULL) || (Size == 0U))
 800376a:	68bb      	ldr	r3, [r7, #8]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d002      	beq.n	8003776 <HAL_USART_Transmit+0x2a>
 8003770:	88fb      	ldrh	r3, [r7, #6]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_USART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e08d      	b.n	8003896 <HAL_USART_Transmit+0x14a>
    }

    /* Process Locked */
    __HAL_LOCK(husart);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_USART_Transmit+0x3c>
 8003784:	2302      	movs	r3, #2
 8003786:	e086      	b.n	8003896 <HAL_USART_Transmit+0x14a>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	64da      	str	r2, [r3, #76]	; 0x4c
    husart->State = HAL_USART_STATE_BUSY_TX;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2212      	movs	r2, #18
 800379a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800379e:	f7fd febb 	bl	8001518 <HAL_GetTick>
 80037a2:	6178      	str	r0, [r7, #20]

    husart->TxXferSize = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	851a      	strh	r2, [r3, #40]	; 0x28
    husart->TxXferCount = Size;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	88fa      	ldrh	r2, [r7, #6]
 80037ae:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* In case of 9bits/No Parity transfer, pTxData needs to be handled as a uint16_t pointer */
    if ((husart->Init.WordLength == USART_WORDLENGTH_9B) && (husart->Init.Parity == USART_PARITY_NONE))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037b8:	d108      	bne.n	80037cc <HAL_USART_Transmit+0x80>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	691b      	ldr	r3, [r3, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d104      	bne.n	80037cc <HAL_USART_Transmit+0x80>
    {
      ptxdata8bits  = NULL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = (uint16_t *) pTxData;
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	61bb      	str	r3, [r7, #24]
 80037ca:	e003      	b.n	80037d4 <HAL_USART_Transmit+0x88>
    }
    else
    {
      ptxdata8bits  = pTxData;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	61fb      	str	r3, [r7, #28]
      ptxdata16bits = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remaining data to be sent */
    while (husart->TxXferCount > 0U)
 80037d4:	e02a      	b.n	800382c <HAL_USART_Transmit+0xe0>
    {
      if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	9300      	str	r3, [sp, #0]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	2200      	movs	r2, #0
 80037de:	2180      	movs	r1, #128	; 0x80
 80037e0:	68f8      	ldr	r0, [r7, #12]
 80037e2:	f000 f85c 	bl	800389e <USART_WaitOnFlagUntilTimeout>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <HAL_USART_Transmit+0xa4>
      {
        return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e052      	b.n	8003896 <HAL_USART_Transmit+0x14a>
      }
      if (ptxdata8bits == NULL)
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d10b      	bne.n	800380e <HAL_USART_Transmit+0xc2>
      {
        husart->Instance->TDR = (uint16_t)(*ptxdata16bits & 0x01FFU);
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	881b      	ldrh	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata16bits++;
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	3302      	adds	r3, #2
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	e007      	b.n	800381e <HAL_USART_Transmit+0xd2>
      }
      else
      {
        husart->Instance->TDR = (uint8_t)(*ptxdata8bits & 0xFFU);
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
        ptxdata8bits++;
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	3301      	adds	r3, #1
 800381c:	61fb      	str	r3, [r7, #28]
      }

      husart->TxXferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (husart->TxXferCount > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003830:	b29b      	uxth	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1cf      	bne.n	80037d6 <HAL_USART_Transmit+0x8a>
    }

    if (USART_WaitOnFlagUntilTimeout(husart, USART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003836:	683b      	ldr	r3, [r7, #0]
 8003838:	9300      	str	r3, [sp, #0]
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	2200      	movs	r2, #0
 800383e:	2140      	movs	r1, #64	; 0x40
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f82c 	bl	800389e <USART_WaitOnFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <HAL_USART_Transmit+0x104>
    {
      return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e022      	b.n	8003896 <HAL_USART_Transmit+0x14a>
    }

    /* Clear Transmission Complete Flag */
    __HAL_USART_CLEAR_FLAG(husart, USART_CLEAR_TCF);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	2240      	movs	r2, #64	; 0x40
 8003856:	621a      	str	r2, [r3, #32]

    /* Clear overrun flag and discard the received data */
    __HAL_USART_CLEAR_OREFLAG(husart);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2208      	movs	r2, #8
 800385e:	621a      	str	r2, [r3, #32]
    __HAL_USART_SEND_REQ(husart, USART_RXDATA_FLUSH_REQUEST);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	699a      	ldr	r2, [r3, #24]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0208 	orr.w	r2, r2, #8
 800386e:	619a      	str	r2, [r3, #24]
    __HAL_USART_SEND_REQ(husart, USART_TXDATA_FLUSH_REQUEST);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0210 	orr.w	r2, r2, #16
 800387e:	619a      	str	r2, [r3, #24]

    /* At end of Tx process, restore husart->State to Ready */
    husart->State = HAL_USART_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2201      	movs	r2, #1
 8003884:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

    /* Process Unlocked */
    __HAL_UNLOCK(husart);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    return HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	e000      	b.n	8003896 <HAL_USART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003894:	2302      	movs	r3, #2
  }
}
 8003896:	4618      	mov	r0, r3
 8003898:	3720      	adds	r7, #32
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <USART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_WaitOnFlagUntilTimeout(USART_HandleTypeDef *husart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b084      	sub	sp, #16
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	60f8      	str	r0, [r7, #12]
 80038a6:	60b9      	str	r1, [r7, #8]
 80038a8:	603b      	str	r3, [r7, #0]
 80038aa:	4613      	mov	r3, r2
 80038ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80038ae:	e018      	b.n	80038e2 <USART_WaitOnFlagUntilTimeout+0x44>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038b6:	d014      	beq.n	80038e2 <USART_WaitOnFlagUntilTimeout+0x44>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038b8:	f7fd fe2e 	bl	8001518 <HAL_GetTick>
 80038bc:	4602      	mov	r2, r0
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	69ba      	ldr	r2, [r7, #24]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <USART_WaitOnFlagUntilTimeout+0x30>
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d109      	bne.n	80038e2 <USART_WaitOnFlagUntilTimeout+0x44>
      {
        husart->State = HAL_USART_STATE_READY;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

        /* Process Unlocked */
        __HAL_UNLOCK(husart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e00f      	b.n	8003902 <USART_WaitOnFlagUntilTimeout+0x64>
  while ((__HAL_USART_GET_FLAG(husart, Flag) ? SET : RESET) == Status)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d0d7      	beq.n	80038b0 <USART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <USART_SetConfig>:
  * @brief Configure the USART peripheral.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_SetConfig(USART_HandleTypeDef *husart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  USART_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret                = HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	75bb      	strb	r3, [r7, #22]
  uint16_t brrtemp;
  uint32_t usartdiv                    = 0x00000000;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
  *  the USART Word Length, Parity and Mode:
  *  set the M bits according to husart->Init.WordLength value
  *  set PCE and PS bits according to husart->Init.Parity value
  *  set TE and RE bits according to husart->Init.Mode value
  *  force OVER8 to 1 to allow to reach the maximum speed (Fclock/8) */
  tmpreg = (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003930:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(husart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	4bad      	ldr	r3, [pc, #692]	; (8003bf0 <USART_SetConfig+0x2e4>)
 800393a:	4013      	ands	r3, r2
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	6812      	ldr	r2, [r2, #0]
 8003940:	68f9      	ldr	r1, [r7, #12]
 8003942:	430b      	orrs	r3, r1
 8003944:	6013      	str	r3, [r2, #0]
  /* Clear and configure the USART Clock, CPOL, CPHA, LBCL and STOP bits:
   * set CPOL bit according to husart->Init.CLKPolarity value
   * set CPHA bit according to husart->Init.CLKPhase value
   * set LBCL bit according to husart->Init.CLKLastBit value (used in SPI master mode only)
   * set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg = (uint32_t)(USART_CLOCK_ENABLE);
 8003946:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800394a:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)husart->Init.CLKLastBit;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	68fa      	ldr	r2, [r7, #12]
 8003952:	4313      	orrs	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
  tmpreg |= ((uint32_t)husart->Init.CLKPolarity | (uint32_t)husart->Init.CLKPhase);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	699a      	ldr	r2, [r3, #24]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4313      	orrs	r3, r2
 8003960:	68fa      	ldr	r2, [r7, #12]
 8003962:	4313      	orrs	r3, r2
 8003964:	60fb      	str	r3, [r7, #12]
  tmpreg |= (uint32_t)husart->Init.StopBits;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(husart->Instance->CR2, USART_CR2_FIELDS, tmpreg);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	430a      	orrs	r2, r1
 8003982:	605a      	str	r2, [r3, #4]


  /*-------------------------- USART BRR Configuration -----------------------*/
  /* BRR is filled-up according to OVER8 bit setting which is forced to 1     */
  USART_GETCLOCKSOURCE(husart, clocksource);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a9a      	ldr	r2, [pc, #616]	; (8003bf4 <USART_SetConfig+0x2e8>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d122      	bne.n	80039d4 <USART_SetConfig+0xc8>
 800398e:	4b9a      	ldr	r3, [pc, #616]	; (8003bf8 <USART_SetConfig+0x2ec>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003994:	f003 0303 	and.w	r3, r3, #3
 8003998:	2b03      	cmp	r3, #3
 800399a:	d817      	bhi.n	80039cc <USART_SetConfig+0xc0>
 800399c:	a201      	add	r2, pc, #4	; (adr r2, 80039a4 <USART_SetConfig+0x98>)
 800399e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039a2:	bf00      	nop
 80039a4:	080039b5 	.word	0x080039b5
 80039a8:	080039c1 	.word	0x080039c1
 80039ac:	080039bb 	.word	0x080039bb
 80039b0:	080039c7 	.word	0x080039c7
 80039b4:	2301      	movs	r3, #1
 80039b6:	75fb      	strb	r3, [r7, #23]
 80039b8:	e098      	b.n	8003aec <USART_SetConfig+0x1e0>
 80039ba:	2302      	movs	r3, #2
 80039bc:	75fb      	strb	r3, [r7, #23]
 80039be:	e095      	b.n	8003aec <USART_SetConfig+0x1e0>
 80039c0:	2304      	movs	r3, #4
 80039c2:	75fb      	strb	r3, [r7, #23]
 80039c4:	e092      	b.n	8003aec <USART_SetConfig+0x1e0>
 80039c6:	2308      	movs	r3, #8
 80039c8:	75fb      	strb	r3, [r7, #23]
 80039ca:	e08f      	b.n	8003aec <USART_SetConfig+0x1e0>
 80039cc:	2310      	movs	r3, #16
 80039ce:	75fb      	strb	r3, [r7, #23]
 80039d0:	bf00      	nop
 80039d2:	e08b      	b.n	8003aec <USART_SetConfig+0x1e0>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a88      	ldr	r2, [pc, #544]	; (8003bfc <USART_SetConfig+0x2f0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d134      	bne.n	8003a48 <USART_SetConfig+0x13c>
 80039de:	4b86      	ldr	r3, [pc, #536]	; (8003bf8 <USART_SetConfig+0x2ec>)
 80039e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039e4:	f003 030c 	and.w	r3, r3, #12
 80039e8:	2b0c      	cmp	r3, #12
 80039ea:	d829      	bhi.n	8003a40 <USART_SetConfig+0x134>
 80039ec:	a201      	add	r2, pc, #4	; (adr r2, 80039f4 <USART_SetConfig+0xe8>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a29 	.word	0x08003a29
 80039f8:	08003a41 	.word	0x08003a41
 80039fc:	08003a41 	.word	0x08003a41
 8003a00:	08003a41 	.word	0x08003a41
 8003a04:	08003a35 	.word	0x08003a35
 8003a08:	08003a41 	.word	0x08003a41
 8003a0c:	08003a41 	.word	0x08003a41
 8003a10:	08003a41 	.word	0x08003a41
 8003a14:	08003a2f 	.word	0x08003a2f
 8003a18:	08003a41 	.word	0x08003a41
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a41 	.word	0x08003a41
 8003a24:	08003a3b 	.word	0x08003a3b
 8003a28:	2300      	movs	r3, #0
 8003a2a:	75fb      	strb	r3, [r7, #23]
 8003a2c:	e05e      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	75fb      	strb	r3, [r7, #23]
 8003a32:	e05b      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a34:	2304      	movs	r3, #4
 8003a36:	75fb      	strb	r3, [r7, #23]
 8003a38:	e058      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	75fb      	strb	r3, [r7, #23]
 8003a3e:	e055      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a40:	2310      	movs	r3, #16
 8003a42:	75fb      	strb	r3, [r7, #23]
 8003a44:	bf00      	nop
 8003a46:	e051      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a6c      	ldr	r2, [pc, #432]	; (8003c00 <USART_SetConfig+0x2f4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d120      	bne.n	8003a94 <USART_SetConfig+0x188>
 8003a52:	4b69      	ldr	r3, [pc, #420]	; (8003bf8 <USART_SetConfig+0x2ec>)
 8003a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a58:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a5c:	2b10      	cmp	r3, #16
 8003a5e:	d00f      	beq.n	8003a80 <USART_SetConfig+0x174>
 8003a60:	2b10      	cmp	r3, #16
 8003a62:	d802      	bhi.n	8003a6a <USART_SetConfig+0x15e>
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d005      	beq.n	8003a74 <USART_SetConfig+0x168>
 8003a68:	e010      	b.n	8003a8c <USART_SetConfig+0x180>
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d005      	beq.n	8003a7a <USART_SetConfig+0x16e>
 8003a6e:	2b30      	cmp	r3, #48	; 0x30
 8003a70:	d009      	beq.n	8003a86 <USART_SetConfig+0x17a>
 8003a72:	e00b      	b.n	8003a8c <USART_SetConfig+0x180>
 8003a74:	2300      	movs	r3, #0
 8003a76:	75fb      	strb	r3, [r7, #23]
 8003a78:	e038      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	75fb      	strb	r3, [r7, #23]
 8003a7e:	e035      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a80:	2304      	movs	r3, #4
 8003a82:	75fb      	strb	r3, [r7, #23]
 8003a84:	e032      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a86:	2308      	movs	r3, #8
 8003a88:	75fb      	strb	r3, [r7, #23]
 8003a8a:	e02f      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	75fb      	strb	r3, [r7, #23]
 8003a90:	bf00      	nop
 8003a92:	e02b      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a5a      	ldr	r2, [pc, #360]	; (8003c04 <USART_SetConfig+0x2f8>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d124      	bne.n	8003ae8 <USART_SetConfig+0x1dc>
 8003a9e:	4b56      	ldr	r3, [pc, #344]	; (8003bf8 <USART_SetConfig+0x2ec>)
 8003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003aac:	d012      	beq.n	8003ad4 <USART_SetConfig+0x1c8>
 8003aae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab2:	d802      	bhi.n	8003aba <USART_SetConfig+0x1ae>
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d007      	beq.n	8003ac8 <USART_SetConfig+0x1bc>
 8003ab8:	e012      	b.n	8003ae0 <USART_SetConfig+0x1d4>
 8003aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003abe:	d006      	beq.n	8003ace <USART_SetConfig+0x1c2>
 8003ac0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac4:	d009      	beq.n	8003ada <USART_SetConfig+0x1ce>
 8003ac6:	e00b      	b.n	8003ae0 <USART_SetConfig+0x1d4>
 8003ac8:	2301      	movs	r3, #1
 8003aca:	75fb      	strb	r3, [r7, #23]
 8003acc:	e00e      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003ace:	2302      	movs	r3, #2
 8003ad0:	75fb      	strb	r3, [r7, #23]
 8003ad2:	e00b      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003ad4:	2304      	movs	r3, #4
 8003ad6:	75fb      	strb	r3, [r7, #23]
 8003ad8:	e008      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003ada:	2308      	movs	r3, #8
 8003adc:	75fb      	strb	r3, [r7, #23]
 8003ade:	e005      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003ae0:	2310      	movs	r3, #16
 8003ae2:	75fb      	strb	r3, [r7, #23]
 8003ae4:	bf00      	nop
 8003ae6:	e001      	b.n	8003aec <USART_SetConfig+0x1e0>
 8003ae8:	2310      	movs	r3, #16
 8003aea:	75fb      	strb	r3, [r7, #23]

  switch (clocksource)
 8003aec:	7dfb      	ldrb	r3, [r7, #23]
 8003aee:	2b08      	cmp	r3, #8
 8003af0:	d854      	bhi.n	8003b9c <USART_SetConfig+0x290>
 8003af2:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <USART_SetConfig+0x1ec>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b1d 	.word	0x08003b1d
 8003afc:	08003b39 	.word	0x08003b39
 8003b00:	08003b55 	.word	0x08003b55
 8003b04:	08003b9d 	.word	0x08003b9d
 8003b08:	08003b6b 	.word	0x08003b6b
 8003b0c:	08003b9d 	.word	0x08003b9d
 8003b10:	08003b9d 	.word	0x08003b9d
 8003b14:	08003b9d 	.word	0x08003b9d
 8003b18:	08003b87 	.word	0x08003b87
  {
    case USART_CLOCKSOURCE_PCLK1:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), husart->Init.BaudRate));
 8003b1c:	f7ff f97e 	bl	8002e1c <HAL_RCC_GetPCLK1Freq>
 8003b20:	4603      	mov	r3, r0
 8003b22:	005a      	lsls	r2, r3, #1
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	441a      	add	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b34:	613b      	str	r3, [r7, #16]
      break;
 8003b36:	e034      	b.n	8003ba2 <USART_SetConfig+0x296>
    case USART_CLOCKSOURCE_PCLK2:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), husart->Init.BaudRate));
 8003b38:	f7ff f984 	bl	8002e44 <HAL_RCC_GetPCLK2Freq>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	005a      	lsls	r2, r3, #1
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	085b      	lsrs	r3, r3, #1
 8003b46:	441a      	add	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b50:	613b      	str	r3, [r7, #16]
      break;
 8003b52:	e026      	b.n	8003ba2 <USART_SetConfig+0x296>
    case USART_CLOCKSOURCE_HSI:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HSI_VALUE, husart->Init.BaudRate));
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	085a      	lsrs	r2, r3, #1
 8003b5a:	4b2b      	ldr	r3, [pc, #172]	; (8003c08 <USART_SetConfig+0x2fc>)
 8003b5c:	4413      	add	r3, r2
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	6852      	ldr	r2, [r2, #4]
 8003b62:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
      break;
 8003b68:	e01b      	b.n	8003ba2 <USART_SetConfig+0x296>
    case USART_CLOCKSOURCE_SYSCLK:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), husart->Init.BaudRate));
 8003b6a:	f7ff f873 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	005a      	lsls	r2, r3, #1
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	085b      	lsrs	r3, r3, #1
 8003b78:	441a      	add	r2, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b82:	613b      	str	r3, [r7, #16]
      break;
 8003b84:	e00d      	b.n	8003ba2 <USART_SetConfig+0x296>
    case USART_CLOCKSOURCE_LSE:
      usartdiv = (uint32_t)(USART_DIV_SAMPLING8(LSE_VALUE, husart->Init.BaudRate));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	085b      	lsrs	r3, r3, #1
 8003b8c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	613b      	str	r3, [r7, #16]
      break;
 8003b9a:	e002      	b.n	8003ba2 <USART_SetConfig+0x296>
    default:
      ret = HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	75bb      	strb	r3, [r7, #22]
      break;
 8003ba0:	bf00      	nop
  }

  /* USARTDIV must be greater than or equal to 0d16 and smaller than or equal to ffff */
  if ((usartdiv >= USART_BRR_MIN) && (usartdiv <= USART_BRR_MAX))
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	2b0f      	cmp	r3, #15
 8003ba6:	d916      	bls.n	8003bd6 <USART_SetConfig+0x2ca>
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bae:	d212      	bcs.n	8003bd6 <USART_SetConfig+0x2ca>
  {
    brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	f023 030f 	bic.w	r3, r3, #15
 8003bb8:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	897b      	ldrh	r3, [r7, #10]
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	817b      	strh	r3, [r7, #10]
    husart->Instance->BRR = brrtemp;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	897a      	ldrh	r2, [r7, #10]
 8003bd2:	60da      	str	r2, [r3, #12]
 8003bd4:	e001      	b.n	8003bda <USART_SetConfig+0x2ce>
  }
  else
  {
    ret = HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	75bb      	strb	r3, [r7, #22]
  }


  /* Clear ISR function pointers */
  husart->RxISR   = NULL;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	639a      	str	r2, [r3, #56]	; 0x38
  husart->TxISR   = NULL;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2200      	movs	r2, #0
 8003be4:	63da      	str	r2, [r3, #60]	; 0x3c

  return ret;
 8003be6:	7dbb      	ldrb	r3, [r7, #22]
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3718      	adds	r7, #24
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	efff69f3 	.word	0xefff69f3
 8003bf4:	40011000 	.word	0x40011000
 8003bf8:	40023800 	.word	0x40023800
 8003bfc:	40004400 	.word	0x40004400
 8003c00:	40004800 	.word	0x40004800
 8003c04:	40011400 	.word	0x40011400
 8003c08:	01e84800 	.word	0x01e84800

08003c0c <USART_CheckIdleState>:
  * @brief Check the USART Idle State.
  * @param husart USART handle.
  * @retval HAL status
  */
static HAL_StatusTypeDef USART_CheckIdleState(USART_HandleTypeDef *husart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the USART ErrorCode */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c1a:	f7fd fc7d 	bl	8001518 <HAL_GetTick>
 8003c1e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((husart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b08      	cmp	r3, #8
 8003c2c:	d10e      	bne.n	8003c4c <USART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (USART_WaitOnFlagUntilTimeout(husart, USART_ISR_TEACK, RESET, tickstart, USART_TEACK_REACK_TIMEOUT) != HAL_OK)
 8003c2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c32:	9300      	str	r3, [sp, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f7ff fe2e 	bl	800389e <USART_WaitOnFlagUntilTimeout>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d001      	beq.n	8003c4c <USART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e008      	b.n	8003c5e <USART_CheckIdleState+0x52>
    }
  }

  /* Initialize the USART state*/
  husart->State = HAL_USART_STATE_READY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2201      	movs	r2, #1
 8003c50:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49

  /* Process Unlocked */
  __HAL_UNLOCK(husart);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <LL_TIM_SetPrescaler>:
{
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c76:	bf00      	nop
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <LL_TIM_SetAutoReload>:
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
 8003c8a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_TIM_SetRepetitionCounter>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
 8003ca6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	683a      	ldr	r2, [r7, #0]
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003cae:	bf00      	nop
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	695b      	ldr	r3, [r3, #20]
 8003cc6:	f043 0201 	orr.w	r2, r3, #1
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	615a      	str	r2, [r3, #20]
}
 8003cce:	bf00      	nop
 8003cd0:	370c      	adds	r7, #12
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
	...

08003cdc <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a3d      	ldr	r2, [pc, #244]	; (8003de4 <LL_TIM_Init+0x108>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d013      	beq.n	8003d1c <LL_TIM_Init+0x40>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfa:	d00f      	beq.n	8003d1c <LL_TIM_Init+0x40>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	4a3a      	ldr	r2, [pc, #232]	; (8003de8 <LL_TIM_Init+0x10c>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d00b      	beq.n	8003d1c <LL_TIM_Init+0x40>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	4a39      	ldr	r2, [pc, #228]	; (8003dec <LL_TIM_Init+0x110>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d007      	beq.n	8003d1c <LL_TIM_Init+0x40>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a38      	ldr	r2, [pc, #224]	; (8003df0 <LL_TIM_Init+0x114>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d003      	beq.n	8003d1c <LL_TIM_Init+0x40>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	4a37      	ldr	r2, [pc, #220]	; (8003df4 <LL_TIM_Init+0x118>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d106      	bne.n	8003d2a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a2d      	ldr	r2, [pc, #180]	; (8003de4 <LL_TIM_Init+0x108>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d02b      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d027      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <LL_TIM_Init+0x10c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d023      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a29      	ldr	r2, [pc, #164]	; (8003dec <LL_TIM_Init+0x110>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d01f      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a28      	ldr	r2, [pc, #160]	; (8003df0 <LL_TIM_Init+0x114>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d01b      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a27      	ldr	r2, [pc, #156]	; (8003df4 <LL_TIM_Init+0x118>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d017      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a26      	ldr	r2, [pc, #152]	; (8003df8 <LL_TIM_Init+0x11c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d013      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a25      	ldr	r2, [pc, #148]	; (8003dfc <LL_TIM_Init+0x120>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d00f      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <LL_TIM_Init+0x124>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00b      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	4a23      	ldr	r2, [pc, #140]	; (8003e04 <LL_TIM_Init+0x128>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d007      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4a22      	ldr	r2, [pc, #136]	; (8003e08 <LL_TIM_Init+0x12c>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d003      	beq.n	8003d8a <LL_TIM_Init+0xae>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	4a21      	ldr	r2, [pc, #132]	; (8003e0c <LL_TIM_Init+0x130>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d106      	bne.n	8003d98 <LL_TIM_Init+0xbc>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68fa      	ldr	r2, [r7, #12]
 8003d9c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	4619      	mov	r1, r3
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f7ff ff6c 	bl	8003c82 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	4619      	mov	r1, r3
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ff58 	bl	8003c66 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a0a      	ldr	r2, [pc, #40]	; (8003de4 <LL_TIM_Init+0x108>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d003      	beq.n	8003dc6 <LL_TIM_Init+0xea>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a0c      	ldr	r2, [pc, #48]	; (8003df4 <LL_TIM_Init+0x118>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d105      	bne.n	8003dd2 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	7c1b      	ldrb	r3, [r3, #16]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff66 	bl	8003c9e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7ff ff71 	bl	8003cba <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40010000 	.word	0x40010000
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	40010400 	.word	0x40010400
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40014400 	.word	0x40014400
 8003e00:	40014800 	.word	0x40014800
 8003e04:	40001800 	.word	0x40001800
 8003e08:	40001c00 	.word	0x40001c00
 8003e0c:	40002000 	.word	0x40002000

08003e10 <__errno>:
 8003e10:	4b01      	ldr	r3, [pc, #4]	; (8003e18 <__errno+0x8>)
 8003e12:	6818      	ldr	r0, [r3, #0]
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	2000000c 	.word	0x2000000c

08003e1c <__libc_init_array>:
 8003e1c:	b570      	push	{r4, r5, r6, lr}
 8003e1e:	4e0d      	ldr	r6, [pc, #52]	; (8003e54 <__libc_init_array+0x38>)
 8003e20:	4c0d      	ldr	r4, [pc, #52]	; (8003e58 <__libc_init_array+0x3c>)
 8003e22:	1ba4      	subs	r4, r4, r6
 8003e24:	10a4      	asrs	r4, r4, #2
 8003e26:	2500      	movs	r5, #0
 8003e28:	42a5      	cmp	r5, r4
 8003e2a:	d109      	bne.n	8003e40 <__libc_init_array+0x24>
 8003e2c:	4e0b      	ldr	r6, [pc, #44]	; (8003e5c <__libc_init_array+0x40>)
 8003e2e:	4c0c      	ldr	r4, [pc, #48]	; (8003e60 <__libc_init_array+0x44>)
 8003e30:	f001 fcb8 	bl	80057a4 <_init>
 8003e34:	1ba4      	subs	r4, r4, r6
 8003e36:	10a4      	asrs	r4, r4, #2
 8003e38:	2500      	movs	r5, #0
 8003e3a:	42a5      	cmp	r5, r4
 8003e3c:	d105      	bne.n	8003e4a <__libc_init_array+0x2e>
 8003e3e:	bd70      	pop	{r4, r5, r6, pc}
 8003e40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e44:	4798      	blx	r3
 8003e46:	3501      	adds	r5, #1
 8003e48:	e7ee      	b.n	8003e28 <__libc_init_array+0xc>
 8003e4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e4e:	4798      	blx	r3
 8003e50:	3501      	adds	r5, #1
 8003e52:	e7f2      	b.n	8003e3a <__libc_init_array+0x1e>
 8003e54:	08005a08 	.word	0x08005a08
 8003e58:	08005a08 	.word	0x08005a08
 8003e5c:	08005a08 	.word	0x08005a08
 8003e60:	08005a0c 	.word	0x08005a0c

08003e64 <memset>:
 8003e64:	4402      	add	r2, r0
 8003e66:	4603      	mov	r3, r0
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d100      	bne.n	8003e6e <memset+0xa>
 8003e6c:	4770      	bx	lr
 8003e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8003e72:	e7f9      	b.n	8003e68 <memset+0x4>

08003e74 <__cvt>:
 8003e74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e76:	ed2d 8b02 	vpush	{d8}
 8003e7a:	eeb0 8b40 	vmov.f64	d8, d0
 8003e7e:	b085      	sub	sp, #20
 8003e80:	4617      	mov	r7, r2
 8003e82:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8003e84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8003e86:	ee18 2a90 	vmov	r2, s17
 8003e8a:	f025 0520 	bic.w	r5, r5, #32
 8003e8e:	2a00      	cmp	r2, #0
 8003e90:	bfb6      	itet	lt
 8003e92:	222d      	movlt	r2, #45	; 0x2d
 8003e94:	2200      	movge	r2, #0
 8003e96:	eeb1 8b40 	vneglt.f64	d8, d0
 8003e9a:	2d46      	cmp	r5, #70	; 0x46
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	d004      	beq.n	8003eac <__cvt+0x38>
 8003ea2:	2d45      	cmp	r5, #69	; 0x45
 8003ea4:	d100      	bne.n	8003ea8 <__cvt+0x34>
 8003ea6:	3401      	adds	r4, #1
 8003ea8:	2102      	movs	r1, #2
 8003eaa:	e000      	b.n	8003eae <__cvt+0x3a>
 8003eac:	2103      	movs	r1, #3
 8003eae:	ab03      	add	r3, sp, #12
 8003eb0:	9301      	str	r3, [sp, #4]
 8003eb2:	ab02      	add	r3, sp, #8
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	4633      	mov	r3, r6
 8003eba:	eeb0 0b48 	vmov.f64	d0, d8
 8003ebe:	f000 fb8f 	bl	80045e0 <_dtoa_r>
 8003ec2:	2d47      	cmp	r5, #71	; 0x47
 8003ec4:	d101      	bne.n	8003eca <__cvt+0x56>
 8003ec6:	07fb      	lsls	r3, r7, #31
 8003ec8:	d51e      	bpl.n	8003f08 <__cvt+0x94>
 8003eca:	2d46      	cmp	r5, #70	; 0x46
 8003ecc:	eb00 0304 	add.w	r3, r0, r4
 8003ed0:	d10c      	bne.n	8003eec <__cvt+0x78>
 8003ed2:	7802      	ldrb	r2, [r0, #0]
 8003ed4:	2a30      	cmp	r2, #48	; 0x30
 8003ed6:	d107      	bne.n	8003ee8 <__cvt+0x74>
 8003ed8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003edc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ee0:	bf1c      	itt	ne
 8003ee2:	f1c4 0401 	rsbne	r4, r4, #1
 8003ee6:	6034      	strne	r4, [r6, #0]
 8003ee8:	6832      	ldr	r2, [r6, #0]
 8003eea:	4413      	add	r3, r2
 8003eec:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8003ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ef4:	d007      	beq.n	8003f06 <__cvt+0x92>
 8003ef6:	2130      	movs	r1, #48	; 0x30
 8003ef8:	9a03      	ldr	r2, [sp, #12]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d204      	bcs.n	8003f08 <__cvt+0x94>
 8003efe:	1c54      	adds	r4, r2, #1
 8003f00:	9403      	str	r4, [sp, #12]
 8003f02:	7011      	strb	r1, [r2, #0]
 8003f04:	e7f8      	b.n	8003ef8 <__cvt+0x84>
 8003f06:	9303      	str	r3, [sp, #12]
 8003f08:	9b03      	ldr	r3, [sp, #12]
 8003f0a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003f0c:	1a1b      	subs	r3, r3, r0
 8003f0e:	6013      	str	r3, [r2, #0]
 8003f10:	b005      	add	sp, #20
 8003f12:	ecbd 8b02 	vpop	{d8}
 8003f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f18 <__exponent>:
 8003f18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f1a:	2900      	cmp	r1, #0
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	bfba      	itte	lt
 8003f20:	4249      	neglt	r1, r1
 8003f22:	232d      	movlt	r3, #45	; 0x2d
 8003f24:	232b      	movge	r3, #43	; 0x2b
 8003f26:	2909      	cmp	r1, #9
 8003f28:	f804 2b02 	strb.w	r2, [r4], #2
 8003f2c:	7043      	strb	r3, [r0, #1]
 8003f2e:	dd20      	ble.n	8003f72 <__exponent+0x5a>
 8003f30:	f10d 0307 	add.w	r3, sp, #7
 8003f34:	461f      	mov	r7, r3
 8003f36:	260a      	movs	r6, #10
 8003f38:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f3c:	fb06 1115 	mls	r1, r6, r5, r1
 8003f40:	3130      	adds	r1, #48	; 0x30
 8003f42:	2d09      	cmp	r5, #9
 8003f44:	f803 1c01 	strb.w	r1, [r3, #-1]
 8003f48:	f103 32ff 	add.w	r2, r3, #4294967295
 8003f4c:	4629      	mov	r1, r5
 8003f4e:	dc09      	bgt.n	8003f64 <__exponent+0x4c>
 8003f50:	3130      	adds	r1, #48	; 0x30
 8003f52:	3b02      	subs	r3, #2
 8003f54:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f58:	42bb      	cmp	r3, r7
 8003f5a:	4622      	mov	r2, r4
 8003f5c:	d304      	bcc.n	8003f68 <__exponent+0x50>
 8003f5e:	1a10      	subs	r0, r2, r0
 8003f60:	b003      	add	sp, #12
 8003f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f64:	4613      	mov	r3, r2
 8003f66:	e7e7      	b.n	8003f38 <__exponent+0x20>
 8003f68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003f6c:	f804 2b01 	strb.w	r2, [r4], #1
 8003f70:	e7f2      	b.n	8003f58 <__exponent+0x40>
 8003f72:	2330      	movs	r3, #48	; 0x30
 8003f74:	4419      	add	r1, r3
 8003f76:	7083      	strb	r3, [r0, #2]
 8003f78:	1d02      	adds	r2, r0, #4
 8003f7a:	70c1      	strb	r1, [r0, #3]
 8003f7c:	e7ef      	b.n	8003f5e <__exponent+0x46>
	...

08003f80 <_printf_float>:
 8003f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f84:	b08d      	sub	sp, #52	; 0x34
 8003f86:	460c      	mov	r4, r1
 8003f88:	4616      	mov	r6, r2
 8003f8a:	461f      	mov	r7, r3
 8003f8c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8003f90:	4605      	mov	r5, r0
 8003f92:	f001 f871 	bl	8005078 <_localeconv_r>
 8003f96:	f8d0 b000 	ldr.w	fp, [r0]
 8003f9a:	4658      	mov	r0, fp
 8003f9c:	f7fc f94c 	bl	8000238 <strlen>
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	930a      	str	r3, [sp, #40]	; 0x28
 8003fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8003fa8:	9005      	str	r0, [sp, #20]
 8003faa:	3307      	adds	r3, #7
 8003fac:	f023 0307 	bic.w	r3, r3, #7
 8003fb0:	f103 0108 	add.w	r1, r3, #8
 8003fb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003fb8:	6822      	ldr	r2, [r4, #0]
 8003fba:	f8c8 1000 	str.w	r1, [r8]
 8003fbe:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003fc2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8003fc6:	ed9f 7ba2 	vldr	d7, [pc, #648]	; 8004250 <_printf_float+0x2d0>
 8003fca:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8003fce:	eeb0 6bc0 	vabs.f64	d6, d0
 8003fd2:	eeb4 6b47 	vcmp.f64	d6, d7
 8003fd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fda:	dd24      	ble.n	8004026 <_printf_float+0xa6>
 8003fdc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8003fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe4:	d502      	bpl.n	8003fec <_printf_float+0x6c>
 8003fe6:	232d      	movs	r3, #45	; 0x2d
 8003fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003fec:	499a      	ldr	r1, [pc, #616]	; (8004258 <_printf_float+0x2d8>)
 8003fee:	4b9b      	ldr	r3, [pc, #620]	; (800425c <_printf_float+0x2dc>)
 8003ff0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003ff4:	bf8c      	ite	hi
 8003ff6:	4688      	movhi	r8, r1
 8003ff8:	4698      	movls	r8, r3
 8003ffa:	f022 0204 	bic.w	r2, r2, #4
 8003ffe:	2303      	movs	r3, #3
 8004000:	6123      	str	r3, [r4, #16]
 8004002:	6022      	str	r2, [r4, #0]
 8004004:	f04f 0a00 	mov.w	sl, #0
 8004008:	9700      	str	r7, [sp, #0]
 800400a:	4633      	mov	r3, r6
 800400c:	aa0b      	add	r2, sp, #44	; 0x2c
 800400e:	4621      	mov	r1, r4
 8004010:	4628      	mov	r0, r5
 8004012:	f000 f9e1 	bl	80043d8 <_printf_common>
 8004016:	3001      	adds	r0, #1
 8004018:	f040 8089 	bne.w	800412e <_printf_float+0x1ae>
 800401c:	f04f 30ff 	mov.w	r0, #4294967295
 8004020:	b00d      	add	sp, #52	; 0x34
 8004022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004026:	eeb4 0b40 	vcmp.f64	d0, d0
 800402a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800402e:	d702      	bvc.n	8004036 <_printf_float+0xb6>
 8004030:	498b      	ldr	r1, [pc, #556]	; (8004260 <_printf_float+0x2e0>)
 8004032:	4b8c      	ldr	r3, [pc, #560]	; (8004264 <_printf_float+0x2e4>)
 8004034:	e7dc      	b.n	8003ff0 <_printf_float+0x70>
 8004036:	6861      	ldr	r1, [r4, #4]
 8004038:	1c4b      	adds	r3, r1, #1
 800403a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800403e:	ab0a      	add	r3, sp, #40	; 0x28
 8004040:	a809      	add	r0, sp, #36	; 0x24
 8004042:	d13b      	bne.n	80040bc <_printf_float+0x13c>
 8004044:	2106      	movs	r1, #6
 8004046:	6061      	str	r1, [r4, #4]
 8004048:	f04f 0c00 	mov.w	ip, #0
 800404c:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 8004050:	e9cd 0900 	strd	r0, r9, [sp]
 8004054:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004058:	6022      	str	r2, [r4, #0]
 800405a:	6861      	ldr	r1, [r4, #4]
 800405c:	4628      	mov	r0, r5
 800405e:	f7ff ff09 	bl	8003e74 <__cvt>
 8004062:	f009 03df 	and.w	r3, r9, #223	; 0xdf
 8004066:	2b47      	cmp	r3, #71	; 0x47
 8004068:	4680      	mov	r8, r0
 800406a:	d109      	bne.n	8004080 <_printf_float+0x100>
 800406c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800406e:	1cd8      	adds	r0, r3, #3
 8004070:	db02      	blt.n	8004078 <_printf_float+0xf8>
 8004072:	6862      	ldr	r2, [r4, #4]
 8004074:	4293      	cmp	r3, r2
 8004076:	dd47      	ble.n	8004108 <_printf_float+0x188>
 8004078:	f1a9 0902 	sub.w	r9, r9, #2
 800407c:	fa5f f989 	uxtb.w	r9, r9
 8004080:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004084:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004086:	d824      	bhi.n	80040d2 <_printf_float+0x152>
 8004088:	3901      	subs	r1, #1
 800408a:	464a      	mov	r2, r9
 800408c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004090:	9109      	str	r1, [sp, #36]	; 0x24
 8004092:	f7ff ff41 	bl	8003f18 <__exponent>
 8004096:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004098:	1813      	adds	r3, r2, r0
 800409a:	2a01      	cmp	r2, #1
 800409c:	4682      	mov	sl, r0
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	dc02      	bgt.n	80040a8 <_printf_float+0x128>
 80040a2:	6822      	ldr	r2, [r4, #0]
 80040a4:	07d1      	lsls	r1, r2, #31
 80040a6:	d501      	bpl.n	80040ac <_printf_float+0x12c>
 80040a8:	3301      	adds	r3, #1
 80040aa:	6123      	str	r3, [r4, #16]
 80040ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0a9      	beq.n	8004008 <_printf_float+0x88>
 80040b4:	232d      	movs	r3, #45	; 0x2d
 80040b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040ba:	e7a5      	b.n	8004008 <_printf_float+0x88>
 80040bc:	f1b9 0f67 	cmp.w	r9, #103	; 0x67
 80040c0:	f000 8178 	beq.w	80043b4 <_printf_float+0x434>
 80040c4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80040c8:	d1be      	bne.n	8004048 <_printf_float+0xc8>
 80040ca:	2900      	cmp	r1, #0
 80040cc:	d1bc      	bne.n	8004048 <_printf_float+0xc8>
 80040ce:	2101      	movs	r1, #1
 80040d0:	e7b9      	b.n	8004046 <_printf_float+0xc6>
 80040d2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80040d6:	d119      	bne.n	800410c <_printf_float+0x18c>
 80040d8:	2900      	cmp	r1, #0
 80040da:	6863      	ldr	r3, [r4, #4]
 80040dc:	dd0c      	ble.n	80040f8 <_printf_float+0x178>
 80040de:	6121      	str	r1, [r4, #16]
 80040e0:	b913      	cbnz	r3, 80040e8 <_printf_float+0x168>
 80040e2:	6822      	ldr	r2, [r4, #0]
 80040e4:	07d2      	lsls	r2, r2, #31
 80040e6:	d502      	bpl.n	80040ee <_printf_float+0x16e>
 80040e8:	3301      	adds	r3, #1
 80040ea:	440b      	add	r3, r1
 80040ec:	6123      	str	r3, [r4, #16]
 80040ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040f0:	65a3      	str	r3, [r4, #88]	; 0x58
 80040f2:	f04f 0a00 	mov.w	sl, #0
 80040f6:	e7d9      	b.n	80040ac <_printf_float+0x12c>
 80040f8:	b913      	cbnz	r3, 8004100 <_printf_float+0x180>
 80040fa:	6822      	ldr	r2, [r4, #0]
 80040fc:	07d0      	lsls	r0, r2, #31
 80040fe:	d501      	bpl.n	8004104 <_printf_float+0x184>
 8004100:	3302      	adds	r3, #2
 8004102:	e7f3      	b.n	80040ec <_printf_float+0x16c>
 8004104:	2301      	movs	r3, #1
 8004106:	e7f1      	b.n	80040ec <_printf_float+0x16c>
 8004108:	f04f 0967 	mov.w	r9, #103	; 0x67
 800410c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004110:	4293      	cmp	r3, r2
 8004112:	db05      	blt.n	8004120 <_printf_float+0x1a0>
 8004114:	6822      	ldr	r2, [r4, #0]
 8004116:	6123      	str	r3, [r4, #16]
 8004118:	07d1      	lsls	r1, r2, #31
 800411a:	d5e8      	bpl.n	80040ee <_printf_float+0x16e>
 800411c:	3301      	adds	r3, #1
 800411e:	e7e5      	b.n	80040ec <_printf_float+0x16c>
 8004120:	2b00      	cmp	r3, #0
 8004122:	bfd4      	ite	le
 8004124:	f1c3 0302 	rsble	r3, r3, #2
 8004128:	2301      	movgt	r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	e7de      	b.n	80040ec <_printf_float+0x16c>
 800412e:	6823      	ldr	r3, [r4, #0]
 8004130:	055a      	lsls	r2, r3, #21
 8004132:	d407      	bmi.n	8004144 <_printf_float+0x1c4>
 8004134:	6923      	ldr	r3, [r4, #16]
 8004136:	4642      	mov	r2, r8
 8004138:	4631      	mov	r1, r6
 800413a:	4628      	mov	r0, r5
 800413c:	47b8      	blx	r7
 800413e:	3001      	adds	r0, #1
 8004140:	d12a      	bne.n	8004198 <_printf_float+0x218>
 8004142:	e76b      	b.n	800401c <_printf_float+0x9c>
 8004144:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004148:	f240 80de 	bls.w	8004308 <_printf_float+0x388>
 800414c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8004150:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004158:	d133      	bne.n	80041c2 <_printf_float+0x242>
 800415a:	2301      	movs	r3, #1
 800415c:	4a42      	ldr	r2, [pc, #264]	; (8004268 <_printf_float+0x2e8>)
 800415e:	4631      	mov	r1, r6
 8004160:	4628      	mov	r0, r5
 8004162:	47b8      	blx	r7
 8004164:	3001      	adds	r0, #1
 8004166:	f43f af59 	beq.w	800401c <_printf_float+0x9c>
 800416a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800416e:	429a      	cmp	r2, r3
 8004170:	db02      	blt.n	8004178 <_printf_float+0x1f8>
 8004172:	6823      	ldr	r3, [r4, #0]
 8004174:	07d8      	lsls	r0, r3, #31
 8004176:	d50f      	bpl.n	8004198 <_printf_float+0x218>
 8004178:	9b05      	ldr	r3, [sp, #20]
 800417a:	465a      	mov	r2, fp
 800417c:	4631      	mov	r1, r6
 800417e:	4628      	mov	r0, r5
 8004180:	47b8      	blx	r7
 8004182:	3001      	adds	r0, #1
 8004184:	f43f af4a 	beq.w	800401c <_printf_float+0x9c>
 8004188:	f04f 0800 	mov.w	r8, #0
 800418c:	f104 091a 	add.w	r9, r4, #26
 8004190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004192:	3b01      	subs	r3, #1
 8004194:	4543      	cmp	r3, r8
 8004196:	dc09      	bgt.n	80041ac <_printf_float+0x22c>
 8004198:	6823      	ldr	r3, [r4, #0]
 800419a:	079b      	lsls	r3, r3, #30
 800419c:	f100 8105 	bmi.w	80043aa <_printf_float+0x42a>
 80041a0:	68e0      	ldr	r0, [r4, #12]
 80041a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80041a4:	4298      	cmp	r0, r3
 80041a6:	bfb8      	it	lt
 80041a8:	4618      	movlt	r0, r3
 80041aa:	e739      	b.n	8004020 <_printf_float+0xa0>
 80041ac:	2301      	movs	r3, #1
 80041ae:	464a      	mov	r2, r9
 80041b0:	4631      	mov	r1, r6
 80041b2:	4628      	mov	r0, r5
 80041b4:	47b8      	blx	r7
 80041b6:	3001      	adds	r0, #1
 80041b8:	f43f af30 	beq.w	800401c <_printf_float+0x9c>
 80041bc:	f108 0801 	add.w	r8, r8, #1
 80041c0:	e7e6      	b.n	8004190 <_printf_float+0x210>
 80041c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	dc2b      	bgt.n	8004220 <_printf_float+0x2a0>
 80041c8:	2301      	movs	r3, #1
 80041ca:	4a27      	ldr	r2, [pc, #156]	; (8004268 <_printf_float+0x2e8>)
 80041cc:	4631      	mov	r1, r6
 80041ce:	4628      	mov	r0, r5
 80041d0:	47b8      	blx	r7
 80041d2:	3001      	adds	r0, #1
 80041d4:	f43f af22 	beq.w	800401c <_printf_float+0x9c>
 80041d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041da:	b923      	cbnz	r3, 80041e6 <_printf_float+0x266>
 80041dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80041de:	b913      	cbnz	r3, 80041e6 <_printf_float+0x266>
 80041e0:	6823      	ldr	r3, [r4, #0]
 80041e2:	07d9      	lsls	r1, r3, #31
 80041e4:	d5d8      	bpl.n	8004198 <_printf_float+0x218>
 80041e6:	9b05      	ldr	r3, [sp, #20]
 80041e8:	465a      	mov	r2, fp
 80041ea:	4631      	mov	r1, r6
 80041ec:	4628      	mov	r0, r5
 80041ee:	47b8      	blx	r7
 80041f0:	3001      	adds	r0, #1
 80041f2:	f43f af13 	beq.w	800401c <_printf_float+0x9c>
 80041f6:	f04f 0900 	mov.w	r9, #0
 80041fa:	f104 0a1a 	add.w	sl, r4, #26
 80041fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004200:	425b      	negs	r3, r3
 8004202:	454b      	cmp	r3, r9
 8004204:	dc01      	bgt.n	800420a <_printf_float+0x28a>
 8004206:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004208:	e795      	b.n	8004136 <_printf_float+0x1b6>
 800420a:	2301      	movs	r3, #1
 800420c:	4652      	mov	r2, sl
 800420e:	4631      	mov	r1, r6
 8004210:	4628      	mov	r0, r5
 8004212:	47b8      	blx	r7
 8004214:	3001      	adds	r0, #1
 8004216:	f43f af01 	beq.w	800401c <_printf_float+0x9c>
 800421a:	f109 0901 	add.w	r9, r9, #1
 800421e:	e7ee      	b.n	80041fe <_printf_float+0x27e>
 8004220:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004222:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004224:	429a      	cmp	r2, r3
 8004226:	bfa8      	it	ge
 8004228:	461a      	movge	r2, r3
 800422a:	2a00      	cmp	r2, #0
 800422c:	4691      	mov	r9, r2
 800422e:	dd07      	ble.n	8004240 <_printf_float+0x2c0>
 8004230:	4613      	mov	r3, r2
 8004232:	4631      	mov	r1, r6
 8004234:	4642      	mov	r2, r8
 8004236:	4628      	mov	r0, r5
 8004238:	47b8      	blx	r7
 800423a:	3001      	adds	r0, #1
 800423c:	f43f aeee 	beq.w	800401c <_printf_float+0x9c>
 8004240:	f104 031a 	add.w	r3, r4, #26
 8004244:	f04f 0a00 	mov.w	sl, #0
 8004248:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800424c:	9307      	str	r3, [sp, #28]
 800424e:	e017      	b.n	8004280 <_printf_float+0x300>
 8004250:	ffffffff 	.word	0xffffffff
 8004254:	7fefffff 	.word	0x7fefffff
 8004258:	080057dc 	.word	0x080057dc
 800425c:	080057d8 	.word	0x080057d8
 8004260:	080057e4 	.word	0x080057e4
 8004264:	080057e0 	.word	0x080057e0
 8004268:	080057e8 	.word	0x080057e8
 800426c:	2301      	movs	r3, #1
 800426e:	9a07      	ldr	r2, [sp, #28]
 8004270:	4631      	mov	r1, r6
 8004272:	4628      	mov	r0, r5
 8004274:	47b8      	blx	r7
 8004276:	3001      	adds	r0, #1
 8004278:	f43f aed0 	beq.w	800401c <_printf_float+0x9c>
 800427c:	f10a 0a01 	add.w	sl, sl, #1
 8004280:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004282:	9306      	str	r3, [sp, #24]
 8004284:	eba3 0309 	sub.w	r3, r3, r9
 8004288:	4553      	cmp	r3, sl
 800428a:	dcef      	bgt.n	800426c <_printf_float+0x2ec>
 800428c:	9b06      	ldr	r3, [sp, #24]
 800428e:	4498      	add	r8, r3
 8004290:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004294:	429a      	cmp	r2, r3
 8004296:	db15      	blt.n	80042c4 <_printf_float+0x344>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	07da      	lsls	r2, r3, #31
 800429c:	d412      	bmi.n	80042c4 <_printf_float+0x344>
 800429e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a0:	9a06      	ldr	r2, [sp, #24]
 80042a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80042a4:	1a9a      	subs	r2, r3, r2
 80042a6:	eba3 0a01 	sub.w	sl, r3, r1
 80042aa:	4592      	cmp	sl, r2
 80042ac:	bfa8      	it	ge
 80042ae:	4692      	movge	sl, r2
 80042b0:	f1ba 0f00 	cmp.w	sl, #0
 80042b4:	dc0e      	bgt.n	80042d4 <_printf_float+0x354>
 80042b6:	f04f 0800 	mov.w	r8, #0
 80042ba:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80042be:	f104 091a 	add.w	r9, r4, #26
 80042c2:	e019      	b.n	80042f8 <_printf_float+0x378>
 80042c4:	9b05      	ldr	r3, [sp, #20]
 80042c6:	465a      	mov	r2, fp
 80042c8:	4631      	mov	r1, r6
 80042ca:	4628      	mov	r0, r5
 80042cc:	47b8      	blx	r7
 80042ce:	3001      	adds	r0, #1
 80042d0:	d1e5      	bne.n	800429e <_printf_float+0x31e>
 80042d2:	e6a3      	b.n	800401c <_printf_float+0x9c>
 80042d4:	4653      	mov	r3, sl
 80042d6:	4642      	mov	r2, r8
 80042d8:	4631      	mov	r1, r6
 80042da:	4628      	mov	r0, r5
 80042dc:	47b8      	blx	r7
 80042de:	3001      	adds	r0, #1
 80042e0:	d1e9      	bne.n	80042b6 <_printf_float+0x336>
 80042e2:	e69b      	b.n	800401c <_printf_float+0x9c>
 80042e4:	2301      	movs	r3, #1
 80042e6:	464a      	mov	r2, r9
 80042e8:	4631      	mov	r1, r6
 80042ea:	4628      	mov	r0, r5
 80042ec:	47b8      	blx	r7
 80042ee:	3001      	adds	r0, #1
 80042f0:	f43f ae94 	beq.w	800401c <_printf_float+0x9c>
 80042f4:	f108 0801 	add.w	r8, r8, #1
 80042f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80042fc:	1a9b      	subs	r3, r3, r2
 80042fe:	eba3 030a 	sub.w	r3, r3, sl
 8004302:	4543      	cmp	r3, r8
 8004304:	dcee      	bgt.n	80042e4 <_printf_float+0x364>
 8004306:	e747      	b.n	8004198 <_printf_float+0x218>
 8004308:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800430a:	2a01      	cmp	r2, #1
 800430c:	dc01      	bgt.n	8004312 <_printf_float+0x392>
 800430e:	07db      	lsls	r3, r3, #31
 8004310:	d539      	bpl.n	8004386 <_printf_float+0x406>
 8004312:	2301      	movs	r3, #1
 8004314:	4642      	mov	r2, r8
 8004316:	4631      	mov	r1, r6
 8004318:	4628      	mov	r0, r5
 800431a:	47b8      	blx	r7
 800431c:	3001      	adds	r0, #1
 800431e:	f43f ae7d 	beq.w	800401c <_printf_float+0x9c>
 8004322:	9b05      	ldr	r3, [sp, #20]
 8004324:	465a      	mov	r2, fp
 8004326:	4631      	mov	r1, r6
 8004328:	4628      	mov	r0, r5
 800432a:	47b8      	blx	r7
 800432c:	3001      	adds	r0, #1
 800432e:	f108 0801 	add.w	r8, r8, #1
 8004332:	f43f ae73 	beq.w	800401c <_printf_float+0x9c>
 8004336:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800433a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800433c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004340:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004344:	f103 33ff 	add.w	r3, r3, #4294967295
 8004348:	d018      	beq.n	800437c <_printf_float+0x3fc>
 800434a:	4642      	mov	r2, r8
 800434c:	4631      	mov	r1, r6
 800434e:	4628      	mov	r0, r5
 8004350:	47b8      	blx	r7
 8004352:	3001      	adds	r0, #1
 8004354:	d10e      	bne.n	8004374 <_printf_float+0x3f4>
 8004356:	e661      	b.n	800401c <_printf_float+0x9c>
 8004358:	2301      	movs	r3, #1
 800435a:	464a      	mov	r2, r9
 800435c:	4631      	mov	r1, r6
 800435e:	4628      	mov	r0, r5
 8004360:	47b8      	blx	r7
 8004362:	3001      	adds	r0, #1
 8004364:	f43f ae5a 	beq.w	800401c <_printf_float+0x9c>
 8004368:	f108 0801 	add.w	r8, r8, #1
 800436c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800436e:	3b01      	subs	r3, #1
 8004370:	4543      	cmp	r3, r8
 8004372:	dcf1      	bgt.n	8004358 <_printf_float+0x3d8>
 8004374:	4653      	mov	r3, sl
 8004376:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800437a:	e6dd      	b.n	8004138 <_printf_float+0x1b8>
 800437c:	f04f 0800 	mov.w	r8, #0
 8004380:	f104 091a 	add.w	r9, r4, #26
 8004384:	e7f2      	b.n	800436c <_printf_float+0x3ec>
 8004386:	2301      	movs	r3, #1
 8004388:	e7df      	b.n	800434a <_printf_float+0x3ca>
 800438a:	2301      	movs	r3, #1
 800438c:	464a      	mov	r2, r9
 800438e:	4631      	mov	r1, r6
 8004390:	4628      	mov	r0, r5
 8004392:	47b8      	blx	r7
 8004394:	3001      	adds	r0, #1
 8004396:	f43f ae41 	beq.w	800401c <_printf_float+0x9c>
 800439a:	f108 0801 	add.w	r8, r8, #1
 800439e:	68e3      	ldr	r3, [r4, #12]
 80043a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80043a2:	1a9b      	subs	r3, r3, r2
 80043a4:	4543      	cmp	r3, r8
 80043a6:	dcf0      	bgt.n	800438a <_printf_float+0x40a>
 80043a8:	e6fa      	b.n	80041a0 <_printf_float+0x220>
 80043aa:	f04f 0800 	mov.w	r8, #0
 80043ae:	f104 0919 	add.w	r9, r4, #25
 80043b2:	e7f4      	b.n	800439e <_printf_float+0x41e>
 80043b4:	2900      	cmp	r1, #0
 80043b6:	f43f ae8a 	beq.w	80040ce <_printf_float+0x14e>
 80043ba:	f04f 0c00 	mov.w	ip, #0
 80043be:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 80043c2:	e9cd 0900 	strd	r0, r9, [sp]
 80043c6:	6022      	str	r2, [r4, #0]
 80043c8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80043cc:	4628      	mov	r0, r5
 80043ce:	f7ff fd51 	bl	8003e74 <__cvt>
 80043d2:	4680      	mov	r8, r0
 80043d4:	e64a      	b.n	800406c <_printf_float+0xec>
 80043d6:	bf00      	nop

080043d8 <_printf_common>:
 80043d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	4691      	mov	r9, r2
 80043de:	461f      	mov	r7, r3
 80043e0:	688a      	ldr	r2, [r1, #8]
 80043e2:	690b      	ldr	r3, [r1, #16]
 80043e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfb8      	it	lt
 80043ec:	4613      	movlt	r3, r2
 80043ee:	f8c9 3000 	str.w	r3, [r9]
 80043f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f6:	4606      	mov	r6, r0
 80043f8:	460c      	mov	r4, r1
 80043fa:	b112      	cbz	r2, 8004402 <_printf_common+0x2a>
 80043fc:	3301      	adds	r3, #1
 80043fe:	f8c9 3000 	str.w	r3, [r9]
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	0699      	lsls	r1, r3, #26
 8004406:	bf42      	ittt	mi
 8004408:	f8d9 3000 	ldrmi.w	r3, [r9]
 800440c:	3302      	addmi	r3, #2
 800440e:	f8c9 3000 	strmi.w	r3, [r9]
 8004412:	6825      	ldr	r5, [r4, #0]
 8004414:	f015 0506 	ands.w	r5, r5, #6
 8004418:	d107      	bne.n	800442a <_printf_common+0x52>
 800441a:	f104 0a19 	add.w	sl, r4, #25
 800441e:	68e3      	ldr	r3, [r4, #12]
 8004420:	f8d9 2000 	ldr.w	r2, [r9]
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	42ab      	cmp	r3, r5
 8004428:	dc28      	bgt.n	800447c <_printf_common+0xa4>
 800442a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800442e:	6822      	ldr	r2, [r4, #0]
 8004430:	3300      	adds	r3, #0
 8004432:	bf18      	it	ne
 8004434:	2301      	movne	r3, #1
 8004436:	0692      	lsls	r2, r2, #26
 8004438:	d42d      	bmi.n	8004496 <_printf_common+0xbe>
 800443a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800443e:	4639      	mov	r1, r7
 8004440:	4630      	mov	r0, r6
 8004442:	47c0      	blx	r8
 8004444:	3001      	adds	r0, #1
 8004446:	d020      	beq.n	800448a <_printf_common+0xb2>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	68e5      	ldr	r5, [r4, #12]
 800444c:	f8d9 2000 	ldr.w	r2, [r9]
 8004450:	f003 0306 	and.w	r3, r3, #6
 8004454:	2b04      	cmp	r3, #4
 8004456:	bf08      	it	eq
 8004458:	1aad      	subeq	r5, r5, r2
 800445a:	68a3      	ldr	r3, [r4, #8]
 800445c:	6922      	ldr	r2, [r4, #16]
 800445e:	bf0c      	ite	eq
 8004460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004464:	2500      	movne	r5, #0
 8004466:	4293      	cmp	r3, r2
 8004468:	bfc4      	itt	gt
 800446a:	1a9b      	subgt	r3, r3, r2
 800446c:	18ed      	addgt	r5, r5, r3
 800446e:	f04f 0900 	mov.w	r9, #0
 8004472:	341a      	adds	r4, #26
 8004474:	454d      	cmp	r5, r9
 8004476:	d11a      	bne.n	80044ae <_printf_common+0xd6>
 8004478:	2000      	movs	r0, #0
 800447a:	e008      	b.n	800448e <_printf_common+0xb6>
 800447c:	2301      	movs	r3, #1
 800447e:	4652      	mov	r2, sl
 8004480:	4639      	mov	r1, r7
 8004482:	4630      	mov	r0, r6
 8004484:	47c0      	blx	r8
 8004486:	3001      	adds	r0, #1
 8004488:	d103      	bne.n	8004492 <_printf_common+0xba>
 800448a:	f04f 30ff 	mov.w	r0, #4294967295
 800448e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004492:	3501      	adds	r5, #1
 8004494:	e7c3      	b.n	800441e <_printf_common+0x46>
 8004496:	18e1      	adds	r1, r4, r3
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	2030      	movs	r0, #48	; 0x30
 800449c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044a0:	4422      	add	r2, r4
 80044a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044aa:	3302      	adds	r3, #2
 80044ac:	e7c5      	b.n	800443a <_printf_common+0x62>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4622      	mov	r2, r4
 80044b2:	4639      	mov	r1, r7
 80044b4:	4630      	mov	r0, r6
 80044b6:	47c0      	blx	r8
 80044b8:	3001      	adds	r0, #1
 80044ba:	d0e6      	beq.n	800448a <_printf_common+0xb2>
 80044bc:	f109 0901 	add.w	r9, r9, #1
 80044c0:	e7d8      	b.n	8004474 <_printf_common+0x9c>

080044c2 <quorem>:
 80044c2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044c6:	6903      	ldr	r3, [r0, #16]
 80044c8:	690c      	ldr	r4, [r1, #16]
 80044ca:	42a3      	cmp	r3, r4
 80044cc:	4680      	mov	r8, r0
 80044ce:	f2c0 8082 	blt.w	80045d6 <quorem+0x114>
 80044d2:	3c01      	subs	r4, #1
 80044d4:	f101 0714 	add.w	r7, r1, #20
 80044d8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 80044dc:	f100 0614 	add.w	r6, r0, #20
 80044e0:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80044e4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80044e8:	eb06 030c 	add.w	r3, r6, ip
 80044ec:	3501      	adds	r5, #1
 80044ee:	eb07 090c 	add.w	r9, r7, ip
 80044f2:	9301      	str	r3, [sp, #4]
 80044f4:	fbb0 f5f5 	udiv	r5, r0, r5
 80044f8:	b395      	cbz	r5, 8004560 <quorem+0x9e>
 80044fa:	f04f 0a00 	mov.w	sl, #0
 80044fe:	4638      	mov	r0, r7
 8004500:	46b6      	mov	lr, r6
 8004502:	46d3      	mov	fp, sl
 8004504:	f850 2b04 	ldr.w	r2, [r0], #4
 8004508:	b293      	uxth	r3, r2
 800450a:	fb05 a303 	mla	r3, r5, r3, sl
 800450e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8004512:	b29b      	uxth	r3, r3
 8004514:	ebab 0303 	sub.w	r3, fp, r3
 8004518:	0c12      	lsrs	r2, r2, #16
 800451a:	f8de b000 	ldr.w	fp, [lr]
 800451e:	fb05 a202 	mla	r2, r5, r2, sl
 8004522:	fa13 f38b 	uxtah	r3, r3, fp
 8004526:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800452a:	fa1f fb82 	uxth.w	fp, r2
 800452e:	f8de 2000 	ldr.w	r2, [lr]
 8004532:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8004536:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800453a:	b29b      	uxth	r3, r3
 800453c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004540:	4581      	cmp	r9, r0
 8004542:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8004546:	f84e 3b04 	str.w	r3, [lr], #4
 800454a:	d2db      	bcs.n	8004504 <quorem+0x42>
 800454c:	f856 300c 	ldr.w	r3, [r6, ip]
 8004550:	b933      	cbnz	r3, 8004560 <quorem+0x9e>
 8004552:	9b01      	ldr	r3, [sp, #4]
 8004554:	3b04      	subs	r3, #4
 8004556:	429e      	cmp	r6, r3
 8004558:	461a      	mov	r2, r3
 800455a:	d330      	bcc.n	80045be <quorem+0xfc>
 800455c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004560:	4640      	mov	r0, r8
 8004562:	f000 ffbf 	bl	80054e4 <__mcmp>
 8004566:	2800      	cmp	r0, #0
 8004568:	db25      	blt.n	80045b6 <quorem+0xf4>
 800456a:	3501      	adds	r5, #1
 800456c:	4630      	mov	r0, r6
 800456e:	f04f 0c00 	mov.w	ip, #0
 8004572:	f857 2b04 	ldr.w	r2, [r7], #4
 8004576:	f8d0 e000 	ldr.w	lr, [r0]
 800457a:	b293      	uxth	r3, r2
 800457c:	ebac 0303 	sub.w	r3, ip, r3
 8004580:	0c12      	lsrs	r2, r2, #16
 8004582:	fa13 f38e 	uxtah	r3, r3, lr
 8004586:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800458a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800458e:	b29b      	uxth	r3, r3
 8004590:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004594:	45b9      	cmp	r9, r7
 8004596:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800459a:	f840 3b04 	str.w	r3, [r0], #4
 800459e:	d2e8      	bcs.n	8004572 <quorem+0xb0>
 80045a0:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80045a4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80045a8:	b92a      	cbnz	r2, 80045b6 <quorem+0xf4>
 80045aa:	3b04      	subs	r3, #4
 80045ac:	429e      	cmp	r6, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	d30b      	bcc.n	80045ca <quorem+0x108>
 80045b2:	f8c8 4010 	str.w	r4, [r8, #16]
 80045b6:	4628      	mov	r0, r5
 80045b8:	b003      	add	sp, #12
 80045ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	3b04      	subs	r3, #4
 80045c2:	2a00      	cmp	r2, #0
 80045c4:	d1ca      	bne.n	800455c <quorem+0x9a>
 80045c6:	3c01      	subs	r4, #1
 80045c8:	e7c5      	b.n	8004556 <quorem+0x94>
 80045ca:	6812      	ldr	r2, [r2, #0]
 80045cc:	3b04      	subs	r3, #4
 80045ce:	2a00      	cmp	r2, #0
 80045d0:	d1ef      	bne.n	80045b2 <quorem+0xf0>
 80045d2:	3c01      	subs	r4, #1
 80045d4:	e7ea      	b.n	80045ac <quorem+0xea>
 80045d6:	2000      	movs	r0, #0
 80045d8:	e7ee      	b.n	80045b8 <quorem+0xf6>
 80045da:	0000      	movs	r0, r0
 80045dc:	0000      	movs	r0, r0
	...

080045e0 <_dtoa_r>:
 80045e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045e4:	ec57 6b10 	vmov	r6, r7, d0
 80045e8:	b095      	sub	sp, #84	; 0x54
 80045ea:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80045ec:	9108      	str	r1, [sp, #32]
 80045ee:	4604      	mov	r4, r0
 80045f0:	920a      	str	r2, [sp, #40]	; 0x28
 80045f2:	9311      	str	r3, [sp, #68]	; 0x44
 80045f4:	f8dd 8078 	ldr.w	r8, [sp, #120]	; 0x78
 80045f8:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80045fc:	b93d      	cbnz	r5, 800460e <_dtoa_r+0x2e>
 80045fe:	2010      	movs	r0, #16
 8004600:	f000 fd48 	bl	8005094 <malloc>
 8004604:	6260      	str	r0, [r4, #36]	; 0x24
 8004606:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800460a:	6005      	str	r5, [r0, #0]
 800460c:	60c5      	str	r5, [r0, #12]
 800460e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004610:	6819      	ldr	r1, [r3, #0]
 8004612:	b151      	cbz	r1, 800462a <_dtoa_r+0x4a>
 8004614:	685a      	ldr	r2, [r3, #4]
 8004616:	604a      	str	r2, [r1, #4]
 8004618:	2301      	movs	r3, #1
 800461a:	4093      	lsls	r3, r2
 800461c:	608b      	str	r3, [r1, #8]
 800461e:	4620      	mov	r0, r4
 8004620:	f000 fd7f 	bl	8005122 <_Bfree>
 8004624:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004626:	2200      	movs	r2, #0
 8004628:	601a      	str	r2, [r3, #0]
 800462a:	1e3b      	subs	r3, r7, #0
 800462c:	bfb9      	ittee	lt
 800462e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004632:	9303      	strlt	r3, [sp, #12]
 8004634:	2300      	movge	r3, #0
 8004636:	f8c8 3000 	strge.w	r3, [r8]
 800463a:	9d03      	ldr	r5, [sp, #12]
 800463c:	4bac      	ldr	r3, [pc, #688]	; (80048f0 <_dtoa_r+0x310>)
 800463e:	bfbc      	itt	lt
 8004640:	2201      	movlt	r2, #1
 8004642:	f8c8 2000 	strlt.w	r2, [r8]
 8004646:	43ab      	bics	r3, r5
 8004648:	d11b      	bne.n	8004682 <_dtoa_r+0xa2>
 800464a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800464c:	f242 730f 	movw	r3, #9999	; 0x270f
 8004650:	6013      	str	r3, [r2, #0]
 8004652:	9b02      	ldr	r3, [sp, #8]
 8004654:	b923      	cbnz	r3, 8004660 <_dtoa_r+0x80>
 8004656:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800465a:	2d00      	cmp	r5, #0
 800465c:	f000 84dd 	beq.w	800501a <_dtoa_r+0xa3a>
 8004660:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004662:	b953      	cbnz	r3, 800467a <_dtoa_r+0x9a>
 8004664:	4ba3      	ldr	r3, [pc, #652]	; (80048f4 <_dtoa_r+0x314>)
 8004666:	e020      	b.n	80046aa <_dtoa_r+0xca>
 8004668:	4ba3      	ldr	r3, [pc, #652]	; (80048f8 <_dtoa_r+0x318>)
 800466a:	9304      	str	r3, [sp, #16]
 800466c:	3308      	adds	r3, #8
 800466e:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	9804      	ldr	r0, [sp, #16]
 8004674:	b015      	add	sp, #84	; 0x54
 8004676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800467a:	4b9e      	ldr	r3, [pc, #632]	; (80048f4 <_dtoa_r+0x314>)
 800467c:	9304      	str	r3, [sp, #16]
 800467e:	3303      	adds	r3, #3
 8004680:	e7f5      	b.n	800466e <_dtoa_r+0x8e>
 8004682:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004686:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800468a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800468e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004692:	d10c      	bne.n	80046ae <_dtoa_r+0xce>
 8004694:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004696:	2301      	movs	r3, #1
 8004698:	6013      	str	r3, [r2, #0]
 800469a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 84b9 	beq.w	8005014 <_dtoa_r+0xa34>
 80046a2:	4b96      	ldr	r3, [pc, #600]	; (80048fc <_dtoa_r+0x31c>)
 80046a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80046a6:	6013      	str	r3, [r2, #0]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	9304      	str	r3, [sp, #16]
 80046ac:	e7e1      	b.n	8004672 <_dtoa_r+0x92>
 80046ae:	a913      	add	r1, sp, #76	; 0x4c
 80046b0:	aa12      	add	r2, sp, #72	; 0x48
 80046b2:	ed9d 0b04 	vldr	d0, [sp, #16]
 80046b6:	4620      	mov	r0, r4
 80046b8:	f000 ff8b 	bl	80055d2 <__d2b>
 80046bc:	f3c5 560a 	ubfx	r6, r5, #20, #11
 80046c0:	9001      	str	r0, [sp, #4]
 80046c2:	9912      	ldr	r1, [sp, #72]	; 0x48
 80046c4:	2e00      	cmp	r6, #0
 80046c6:	d046      	beq.n	8004756 <_dtoa_r+0x176>
 80046c8:	9805      	ldr	r0, [sp, #20]
 80046ca:	f3c0 0013 	ubfx	r0, r0, #0, #20
 80046ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046d2:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
 80046d6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80046da:	f2a6 3aff 	subw	sl, r6, #1023	; 0x3ff
 80046de:	2700      	movs	r7, #0
 80046e0:	ee07 aa90 	vmov	s15, sl
 80046e4:	ec43 2b16 	vmov	d6, r2, r3
 80046e8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80046ec:	ed9f 4b7a 	vldr	d4, [pc, #488]	; 80048d8 <_dtoa_r+0x2f8>
 80046f0:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 80046f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80046f8:	ed9f 6b79 	vldr	d6, [pc, #484]	; 80048e0 <_dtoa_r+0x300>
 80046fc:	eea7 6b04 	vfma.f64	d6, d7, d4
 8004700:	eeb0 7b46 	vmov.f64	d7, d6
 8004704:	ed9f 6b78 	vldr	d6, [pc, #480]	; 80048e8 <_dtoa_r+0x308>
 8004708:	eea5 7b06 	vfma.f64	d7, d5, d6
 800470c:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004710:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004718:	ee16 ba90 	vmov	fp, s13
 800471c:	d508      	bpl.n	8004730 <_dtoa_r+0x150>
 800471e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004722:	eeb4 6b47 	vcmp.f64	d6, d7
 8004726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800472a:	bf18      	it	ne
 800472c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004730:	f1bb 0f16 	cmp.w	fp, #22
 8004734:	d834      	bhi.n	80047a0 <_dtoa_r+0x1c0>
 8004736:	4b72      	ldr	r3, [pc, #456]	; (8004900 <_dtoa_r+0x320>)
 8004738:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800473c:	ed93 7b00 	vldr	d7, [r3]
 8004740:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004744:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004748:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800474c:	dd01      	ble.n	8004752 <_dtoa_r+0x172>
 800474e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004752:	2300      	movs	r3, #0
 8004754:	e025      	b.n	80047a2 <_dtoa_r+0x1c2>
 8004756:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004758:	eb01 0a03 	add.w	sl, r1, r3
 800475c:	f20a 4332 	addw	r3, sl, #1074	; 0x432
 8004760:	2b20      	cmp	r3, #32
 8004762:	dd17      	ble.n	8004794 <_dtoa_r+0x1b4>
 8004764:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004768:	9a02      	ldr	r2, [sp, #8]
 800476a:	409d      	lsls	r5, r3
 800476c:	f20a 4312 	addw	r3, sl, #1042	; 0x412
 8004770:	fa22 f303 	lsr.w	r3, r2, r3
 8004774:	432b      	orrs	r3, r5
 8004776:	ee07 3a90 	vmov	s15, r3
 800477a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800477e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004782:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004786:	9805      	ldr	r0, [sp, #20]
 8004788:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800478c:	2701      	movs	r7, #1
 800478e:	f1a0 73f8 	sub.w	r3, r0, #32505856	; 0x1f00000
 8004792:	e7a5      	b.n	80046e0 <_dtoa_r+0x100>
 8004794:	9a02      	ldr	r2, [sp, #8]
 8004796:	f1c3 0320 	rsb	r3, r3, #32
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	e7ea      	b.n	8004776 <_dtoa_r+0x196>
 80047a0:	2301      	movs	r3, #1
 80047a2:	eba1 0a0a 	sub.w	sl, r1, sl
 80047a6:	9310      	str	r3, [sp, #64]	; 0x40
 80047a8:	f1ba 0301 	subs.w	r3, sl, #1
 80047ac:	9307      	str	r3, [sp, #28]
 80047ae:	bf43      	ittte	mi
 80047b0:	2300      	movmi	r3, #0
 80047b2:	f1ca 0a01 	rsbmi	sl, sl, #1
 80047b6:	9307      	strmi	r3, [sp, #28]
 80047b8:	f04f 0a00 	movpl.w	sl, #0
 80047bc:	f1bb 0f00 	cmp.w	fp, #0
 80047c0:	db19      	blt.n	80047f6 <_dtoa_r+0x216>
 80047c2:	9b07      	ldr	r3, [sp, #28]
 80047c4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80047c8:	445b      	add	r3, fp
 80047ca:	9307      	str	r3, [sp, #28]
 80047cc:	f04f 0800 	mov.w	r8, #0
 80047d0:	9b08      	ldr	r3, [sp, #32]
 80047d2:	2b09      	cmp	r3, #9
 80047d4:	d866      	bhi.n	80048a4 <_dtoa_r+0x2c4>
 80047d6:	2b05      	cmp	r3, #5
 80047d8:	bfc4      	itt	gt
 80047da:	3b04      	subgt	r3, #4
 80047dc:	9308      	strgt	r3, [sp, #32]
 80047de:	9b08      	ldr	r3, [sp, #32]
 80047e0:	f1a3 0302 	sub.w	r3, r3, #2
 80047e4:	bfcc      	ite	gt
 80047e6:	2500      	movgt	r5, #0
 80047e8:	2501      	movle	r5, #1
 80047ea:	2b03      	cmp	r3, #3
 80047ec:	d866      	bhi.n	80048bc <_dtoa_r+0x2dc>
 80047ee:	e8df f003 	tbb	[pc, r3]
 80047f2:	5755      	.short	0x5755
 80047f4:	4909      	.short	0x4909
 80047f6:	2300      	movs	r3, #0
 80047f8:	ebaa 0a0b 	sub.w	sl, sl, fp
 80047fc:	f1cb 0800 	rsb	r8, fp, #0
 8004800:	930b      	str	r3, [sp, #44]	; 0x2c
 8004802:	e7e5      	b.n	80047d0 <_dtoa_r+0x1f0>
 8004804:	2301      	movs	r3, #1
 8004806:	9309      	str	r3, [sp, #36]	; 0x24
 8004808:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800480a:	2b00      	cmp	r3, #0
 800480c:	dd59      	ble.n	80048c2 <_dtoa_r+0x2e2>
 800480e:	9306      	str	r3, [sp, #24]
 8004810:	4699      	mov	r9, r3
 8004812:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004814:	2200      	movs	r2, #0
 8004816:	6072      	str	r2, [r6, #4]
 8004818:	2204      	movs	r2, #4
 800481a:	f102 0014 	add.w	r0, r2, #20
 800481e:	4298      	cmp	r0, r3
 8004820:	6871      	ldr	r1, [r6, #4]
 8004822:	d953      	bls.n	80048cc <_dtoa_r+0x2ec>
 8004824:	4620      	mov	r0, r4
 8004826:	f000 fc48 	bl	80050ba <_Balloc>
 800482a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800482c:	6030      	str	r0, [r6, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	9304      	str	r3, [sp, #16]
 8004832:	f1b9 0f0e 	cmp.w	r9, #14
 8004836:	f200 80c2 	bhi.w	80049be <_dtoa_r+0x3de>
 800483a:	2d00      	cmp	r5, #0
 800483c:	f000 80bf 	beq.w	80049be <_dtoa_r+0x3de>
 8004840:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004844:	f1bb 0f00 	cmp.w	fp, #0
 8004848:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800484c:	f340 80e6 	ble.w	8004a1c <_dtoa_r+0x43c>
 8004850:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <_dtoa_r+0x320>)
 8004852:	f00b 030f 	and.w	r3, fp, #15
 8004856:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800485a:	ed93 7b00 	vldr	d7, [r3]
 800485e:	ea4f 132b 	mov.w	r3, fp, asr #4
 8004862:	06da      	lsls	r2, r3, #27
 8004864:	f140 80d8 	bpl.w	8004a18 <_dtoa_r+0x438>
 8004868:	4a26      	ldr	r2, [pc, #152]	; (8004904 <_dtoa_r+0x324>)
 800486a:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
 800486e:	ed92 6b08 	vldr	d6, [r2, #32]
 8004872:	ee85 6b06 	vdiv.f64	d6, d5, d6
 8004876:	ed8d 6b02 	vstr	d6, [sp, #8]
 800487a:	f003 030f 	and.w	r3, r3, #15
 800487e:	2203      	movs	r2, #3
 8004880:	4920      	ldr	r1, [pc, #128]	; (8004904 <_dtoa_r+0x324>)
 8004882:	e04a      	b.n	800491a <_dtoa_r+0x33a>
 8004884:	2301      	movs	r3, #1
 8004886:	9309      	str	r3, [sp, #36]	; 0x24
 8004888:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800488a:	445b      	add	r3, fp
 800488c:	f103 0901 	add.w	r9, r3, #1
 8004890:	9306      	str	r3, [sp, #24]
 8004892:	464b      	mov	r3, r9
 8004894:	2b01      	cmp	r3, #1
 8004896:	bfb8      	it	lt
 8004898:	2301      	movlt	r3, #1
 800489a:	e7ba      	b.n	8004812 <_dtoa_r+0x232>
 800489c:	2300      	movs	r3, #0
 800489e:	e7b2      	b.n	8004806 <_dtoa_r+0x226>
 80048a0:	2300      	movs	r3, #0
 80048a2:	e7f0      	b.n	8004886 <_dtoa_r+0x2a6>
 80048a4:	2501      	movs	r5, #1
 80048a6:	2300      	movs	r3, #0
 80048a8:	e9cd 3508 	strd	r3, r5, [sp, #32]
 80048ac:	f04f 33ff 	mov.w	r3, #4294967295
 80048b0:	9306      	str	r3, [sp, #24]
 80048b2:	4699      	mov	r9, r3
 80048b4:	2200      	movs	r2, #0
 80048b6:	2312      	movs	r3, #18
 80048b8:	920a      	str	r2, [sp, #40]	; 0x28
 80048ba:	e7aa      	b.n	8004812 <_dtoa_r+0x232>
 80048bc:	2301      	movs	r3, #1
 80048be:	9309      	str	r3, [sp, #36]	; 0x24
 80048c0:	e7f4      	b.n	80048ac <_dtoa_r+0x2cc>
 80048c2:	2301      	movs	r3, #1
 80048c4:	9306      	str	r3, [sp, #24]
 80048c6:	4699      	mov	r9, r3
 80048c8:	461a      	mov	r2, r3
 80048ca:	e7f5      	b.n	80048b8 <_dtoa_r+0x2d8>
 80048cc:	3101      	adds	r1, #1
 80048ce:	6071      	str	r1, [r6, #4]
 80048d0:	0052      	lsls	r2, r2, #1
 80048d2:	e7a2      	b.n	800481a <_dtoa_r+0x23a>
 80048d4:	f3af 8000 	nop.w
 80048d8:	636f4361 	.word	0x636f4361
 80048dc:	3fd287a7 	.word	0x3fd287a7
 80048e0:	8b60c8b3 	.word	0x8b60c8b3
 80048e4:	3fc68a28 	.word	0x3fc68a28
 80048e8:	509f79fb 	.word	0x509f79fb
 80048ec:	3fd34413 	.word	0x3fd34413
 80048f0:	7ff00000 	.word	0x7ff00000
 80048f4:	080057f3 	.word	0x080057f3
 80048f8:	080057ea 	.word	0x080057ea
 80048fc:	080057e9 	.word	0x080057e9
 8004900:	08005820 	.word	0x08005820
 8004904:	080057f8 	.word	0x080057f8
 8004908:	07de      	lsls	r6, r3, #31
 800490a:	d504      	bpl.n	8004916 <_dtoa_r+0x336>
 800490c:	ed91 6b00 	vldr	d6, [r1]
 8004910:	3201      	adds	r2, #1
 8004912:	ee27 7b06 	vmul.f64	d7, d7, d6
 8004916:	105b      	asrs	r3, r3, #1
 8004918:	3108      	adds	r1, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1f4      	bne.n	8004908 <_dtoa_r+0x328>
 800491e:	ed9d 6b02 	vldr	d6, [sp, #8]
 8004922:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8004926:	ed8d 7b02 	vstr	d7, [sp, #8]
 800492a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800492c:	2b00      	cmp	r3, #0
 800492e:	f000 80a7 	beq.w	8004a80 <_dtoa_r+0x4a0>
 8004932:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8004936:	ed9d 7b02 	vldr	d7, [sp, #8]
 800493a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800493e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004942:	f140 809d 	bpl.w	8004a80 <_dtoa_r+0x4a0>
 8004946:	f1b9 0f00 	cmp.w	r9, #0
 800494a:	f000 8099 	beq.w	8004a80 <_dtoa_r+0x4a0>
 800494e:	9b06      	ldr	r3, [sp, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	dd30      	ble.n	80049b6 <_dtoa_r+0x3d6>
 8004954:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8004958:	ee27 7b06 	vmul.f64	d7, d7, d6
 800495c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004960:	9d06      	ldr	r5, [sp, #24]
 8004962:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004966:	3201      	adds	r2, #1
 8004968:	ed9d 6b02 	vldr	d6, [sp, #8]
 800496c:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8004970:	ee07 2a90 	vmov	s15, r2
 8004974:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8004978:	eea7 5b06 	vfma.f64	d5, d7, d6
 800497c:	ed8d 5b02 	vstr	d5, [sp, #8]
 8004980:	9a03      	ldr	r2, [sp, #12]
 8004982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004986:	f1a2 7150 	sub.w	r1, r2, #54525952	; 0x3400000
 800498a:	2d00      	cmp	r5, #0
 800498c:	d17b      	bne.n	8004a86 <_dtoa_r+0x4a6>
 800498e:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8004992:	ee36 6b47 	vsub.f64	d6, d6, d7
 8004996:	ec41 0b17 	vmov	d7, r0, r1
 800499a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800499e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a2:	f300 8253 	bgt.w	8004e4c <_dtoa_r+0x86c>
 80049a6:	eeb1 7b47 	vneg.f64	d7, d7
 80049aa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80049ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049b2:	f100 8249 	bmi.w	8004e48 <_dtoa_r+0x868>
 80049b6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80049ba:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80049be:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	f2c0 8119 	blt.w	8004bf8 <_dtoa_r+0x618>
 80049c6:	f1bb 0f0e 	cmp.w	fp, #14
 80049ca:	f300 8115 	bgt.w	8004bf8 <_dtoa_r+0x618>
 80049ce:	4bc3      	ldr	r3, [pc, #780]	; (8004cdc <_dtoa_r+0x6fc>)
 80049d0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80049d4:	ed93 6b00 	vldr	d6, [r3]
 80049d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049da:	2b00      	cmp	r3, #0
 80049dc:	f280 80ba 	bge.w	8004b54 <_dtoa_r+0x574>
 80049e0:	f1b9 0f00 	cmp.w	r9, #0
 80049e4:	f300 80b6 	bgt.w	8004b54 <_dtoa_r+0x574>
 80049e8:	f040 822d 	bne.w	8004e46 <_dtoa_r+0x866>
 80049ec:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80049f0:	ee26 6b07 	vmul.f64	d6, d6, d7
 80049f4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80049f8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80049fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a00:	464d      	mov	r5, r9
 8004a02:	464f      	mov	r7, r9
 8004a04:	f280 8204 	bge.w	8004e10 <_dtoa_r+0x830>
 8004a08:	9b04      	ldr	r3, [sp, #16]
 8004a0a:	9a04      	ldr	r2, [sp, #16]
 8004a0c:	1c5e      	adds	r6, r3, #1
 8004a0e:	2331      	movs	r3, #49	; 0x31
 8004a10:	7013      	strb	r3, [r2, #0]
 8004a12:	f10b 0b01 	add.w	fp, fp, #1
 8004a16:	e1ff      	b.n	8004e18 <_dtoa_r+0x838>
 8004a18:	2202      	movs	r2, #2
 8004a1a:	e731      	b.n	8004880 <_dtoa_r+0x2a0>
 8004a1c:	d02e      	beq.n	8004a7c <_dtoa_r+0x49c>
 8004a1e:	f1cb 0300 	rsb	r3, fp, #0
 8004a22:	4aae      	ldr	r2, [pc, #696]	; (8004cdc <_dtoa_r+0x6fc>)
 8004a24:	f003 010f 	and.w	r1, r3, #15
 8004a28:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8004a2c:	ed92 7b00 	vldr	d7, [r2]
 8004a30:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
 8004a34:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a38:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004a3c:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 8004a40:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8004a44:	49a6      	ldr	r1, [pc, #664]	; (8004ce0 <_dtoa_r+0x700>)
 8004a46:	111b      	asrs	r3, r3, #4
 8004a48:	2000      	movs	r0, #0
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	b93b      	cbnz	r3, 8004a5e <_dtoa_r+0x47e>
 8004a4e:	2800      	cmp	r0, #0
 8004a50:	f43f af6b 	beq.w	800492a <_dtoa_r+0x34a>
 8004a54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004a58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004a5c:	e765      	b.n	800492a <_dtoa_r+0x34a>
 8004a5e:	07dd      	lsls	r5, r3, #31
 8004a60:	d509      	bpl.n	8004a76 <_dtoa_r+0x496>
 8004a62:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 8004a66:	ed91 7b00 	vldr	d7, [r1]
 8004a6a:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004a6e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004a72:	3201      	adds	r2, #1
 8004a74:	2001      	movs	r0, #1
 8004a76:	105b      	asrs	r3, r3, #1
 8004a78:	3108      	adds	r1, #8
 8004a7a:	e7e7      	b.n	8004a4c <_dtoa_r+0x46c>
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	e754      	b.n	800492a <_dtoa_r+0x34a>
 8004a80:	465b      	mov	r3, fp
 8004a82:	464d      	mov	r5, r9
 8004a84:	e770      	b.n	8004968 <_dtoa_r+0x388>
 8004a86:	4a95      	ldr	r2, [pc, #596]	; (8004cdc <_dtoa_r+0x6fc>)
 8004a88:	eb02 02c5 	add.w	r2, r2, r5, lsl #3
 8004a8c:	ed12 4b02 	vldr	d4, [r2, #-8]
 8004a90:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004a92:	ec41 0b17 	vmov	d7, r0, r1
 8004a96:	b35a      	cbz	r2, 8004af0 <_dtoa_r+0x510>
 8004a98:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8004a9c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8004aa0:	9e04      	ldr	r6, [sp, #16]
 8004aa2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8004aa6:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004aaa:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004aae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004ab2:	ee14 2a90 	vmov	r2, s9
 8004ab6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004aba:	3230      	adds	r2, #48	; 0x30
 8004abc:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004ac0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004ac4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac8:	f806 2b01 	strb.w	r2, [r6], #1
 8004acc:	d43b      	bmi.n	8004b46 <_dtoa_r+0x566>
 8004ace:	ee32 5b46 	vsub.f64	d5, d2, d6
 8004ad2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8004ad6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ada:	d472      	bmi.n	8004bc2 <_dtoa_r+0x5e2>
 8004adc:	9a04      	ldr	r2, [sp, #16]
 8004ade:	1ab2      	subs	r2, r6, r2
 8004ae0:	4295      	cmp	r5, r2
 8004ae2:	f77f af68 	ble.w	80049b6 <_dtoa_r+0x3d6>
 8004ae6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8004aea:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004aee:	e7de      	b.n	8004aae <_dtoa_r+0x4ce>
 8004af0:	9a04      	ldr	r2, [sp, #16]
 8004af2:	ee24 7b07 	vmul.f64	d7, d4, d7
 8004af6:	1956      	adds	r6, r2, r5
 8004af8:	4611      	mov	r1, r2
 8004afa:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8004afe:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8004b02:	ee14 2a90 	vmov	r2, s9
 8004b06:	3230      	adds	r2, #48	; 0x30
 8004b08:	f801 2b01 	strb.w	r2, [r1], #1
 8004b0c:	42b1      	cmp	r1, r6
 8004b0e:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8004b12:	ee36 6b45 	vsub.f64	d6, d6, d5
 8004b16:	d11a      	bne.n	8004b4e <_dtoa_r+0x56e>
 8004b18:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8004b1c:	ee37 4b05 	vadd.f64	d4, d7, d5
 8004b20:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8004b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b28:	dc4b      	bgt.n	8004bc2 <_dtoa_r+0x5e2>
 8004b2a:	ee35 7b47 	vsub.f64	d7, d5, d7
 8004b2e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8004b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b36:	f57f af3e 	bpl.w	80049b6 <_dtoa_r+0x3d6>
 8004b3a:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8004b3e:	2a30      	cmp	r2, #48	; 0x30
 8004b40:	f106 31ff 	add.w	r1, r6, #4294967295
 8004b44:	d001      	beq.n	8004b4a <_dtoa_r+0x56a>
 8004b46:	469b      	mov	fp, r3
 8004b48:	e02a      	b.n	8004ba0 <_dtoa_r+0x5c0>
 8004b4a:	460e      	mov	r6, r1
 8004b4c:	e7f5      	b.n	8004b3a <_dtoa_r+0x55a>
 8004b4e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8004b52:	e7d4      	b.n	8004afe <_dtoa_r+0x51e>
 8004b54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004b58:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8004b5c:	9e04      	ldr	r6, [sp, #16]
 8004b5e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8004b62:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8004b66:	ee15 3a10 	vmov	r3, s10
 8004b6a:	3330      	adds	r3, #48	; 0x30
 8004b6c:	f806 3b01 	strb.w	r3, [r6], #1
 8004b70:	9b04      	ldr	r3, [sp, #16]
 8004b72:	1af3      	subs	r3, r6, r3
 8004b74:	4599      	cmp	r9, r3
 8004b76:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8004b7a:	eea3 7b46 	vfms.f64	d7, d3, d6
 8004b7e:	d133      	bne.n	8004be8 <_dtoa_r+0x608>
 8004b80:	ee37 7b07 	vadd.f64	d7, d7, d7
 8004b84:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8004b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b8c:	dc18      	bgt.n	8004bc0 <_dtoa_r+0x5e0>
 8004b8e:	eeb4 7b46 	vcmp.f64	d7, d6
 8004b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b96:	d103      	bne.n	8004ba0 <_dtoa_r+0x5c0>
 8004b98:	ee15 3a10 	vmov	r3, s10
 8004b9c:	07db      	lsls	r3, r3, #31
 8004b9e:	d40f      	bmi.n	8004bc0 <_dtoa_r+0x5e0>
 8004ba0:	9901      	ldr	r1, [sp, #4]
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	f000 fabd 	bl	8005122 <_Bfree>
 8004ba8:	2300      	movs	r3, #0
 8004baa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8004bac:	7033      	strb	r3, [r6, #0]
 8004bae:	f10b 0301 	add.w	r3, fp, #1
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	f43f ad5b 	beq.w	8004672 <_dtoa_r+0x92>
 8004bbc:	601e      	str	r6, [r3, #0]
 8004bbe:	e558      	b.n	8004672 <_dtoa_r+0x92>
 8004bc0:	465b      	mov	r3, fp
 8004bc2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004bc6:	2939      	cmp	r1, #57	; 0x39
 8004bc8:	f106 32ff 	add.w	r2, r6, #4294967295
 8004bcc:	d106      	bne.n	8004bdc <_dtoa_r+0x5fc>
 8004bce:	9904      	ldr	r1, [sp, #16]
 8004bd0:	4291      	cmp	r1, r2
 8004bd2:	d107      	bne.n	8004be4 <_dtoa_r+0x604>
 8004bd4:	2230      	movs	r2, #48	; 0x30
 8004bd6:	700a      	strb	r2, [r1, #0]
 8004bd8:	3301      	adds	r3, #1
 8004bda:	460a      	mov	r2, r1
 8004bdc:	7811      	ldrb	r1, [r2, #0]
 8004bde:	3101      	adds	r1, #1
 8004be0:	7011      	strb	r1, [r2, #0]
 8004be2:	e7b0      	b.n	8004b46 <_dtoa_r+0x566>
 8004be4:	4616      	mov	r6, r2
 8004be6:	e7ec      	b.n	8004bc2 <_dtoa_r+0x5e2>
 8004be8:	ee27 7b04 	vmul.f64	d7, d7, d4
 8004bec:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d1b3      	bne.n	8004b5e <_dtoa_r+0x57e>
 8004bf6:	e7d3      	b.n	8004ba0 <_dtoa_r+0x5c0>
 8004bf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004bfa:	2a00      	cmp	r2, #0
 8004bfc:	f000 808d 	beq.w	8004d1a <_dtoa_r+0x73a>
 8004c00:	9a08      	ldr	r2, [sp, #32]
 8004c02:	2a01      	cmp	r2, #1
 8004c04:	dc72      	bgt.n	8004cec <_dtoa_r+0x70c>
 8004c06:	2f00      	cmp	r7, #0
 8004c08:	d06c      	beq.n	8004ce4 <_dtoa_r+0x704>
 8004c0a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004c0e:	4645      	mov	r5, r8
 8004c10:	4656      	mov	r6, sl
 8004c12:	9a07      	ldr	r2, [sp, #28]
 8004c14:	2101      	movs	r1, #1
 8004c16:	441a      	add	r2, r3
 8004c18:	4620      	mov	r0, r4
 8004c1a:	449a      	add	sl, r3
 8004c1c:	9207      	str	r2, [sp, #28]
 8004c1e:	f000 fb20 	bl	8005262 <__i2b>
 8004c22:	4607      	mov	r7, r0
 8004c24:	2e00      	cmp	r6, #0
 8004c26:	dd0b      	ble.n	8004c40 <_dtoa_r+0x660>
 8004c28:	9b07      	ldr	r3, [sp, #28]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	dd08      	ble.n	8004c40 <_dtoa_r+0x660>
 8004c2e:	42b3      	cmp	r3, r6
 8004c30:	9a07      	ldr	r2, [sp, #28]
 8004c32:	bfa8      	it	ge
 8004c34:	4633      	movge	r3, r6
 8004c36:	ebaa 0a03 	sub.w	sl, sl, r3
 8004c3a:	1af6      	subs	r6, r6, r3
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	9307      	str	r3, [sp, #28]
 8004c40:	f1b8 0f00 	cmp.w	r8, #0
 8004c44:	d01d      	beq.n	8004c82 <_dtoa_r+0x6a2>
 8004c46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d06a      	beq.n	8004d22 <_dtoa_r+0x742>
 8004c4c:	b18d      	cbz	r5, 8004c72 <_dtoa_r+0x692>
 8004c4e:	4639      	mov	r1, r7
 8004c50:	462a      	mov	r2, r5
 8004c52:	4620      	mov	r0, r4
 8004c54:	f000 fba4 	bl	80053a0 <__pow5mult>
 8004c58:	9a01      	ldr	r2, [sp, #4]
 8004c5a:	4601      	mov	r1, r0
 8004c5c:	4607      	mov	r7, r0
 8004c5e:	4620      	mov	r0, r4
 8004c60:	f000 fb08 	bl	8005274 <__multiply>
 8004c64:	9901      	ldr	r1, [sp, #4]
 8004c66:	900c      	str	r0, [sp, #48]	; 0x30
 8004c68:	4620      	mov	r0, r4
 8004c6a:	f000 fa5a 	bl	8005122 <_Bfree>
 8004c6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004c70:	9301      	str	r3, [sp, #4]
 8004c72:	ebb8 0205 	subs.w	r2, r8, r5
 8004c76:	d004      	beq.n	8004c82 <_dtoa_r+0x6a2>
 8004c78:	9901      	ldr	r1, [sp, #4]
 8004c7a:	4620      	mov	r0, r4
 8004c7c:	f000 fb90 	bl	80053a0 <__pow5mult>
 8004c80:	9001      	str	r0, [sp, #4]
 8004c82:	2101      	movs	r1, #1
 8004c84:	4620      	mov	r0, r4
 8004c86:	f000 faec 	bl	8005262 <__i2b>
 8004c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c8c:	4605      	mov	r5, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 81ca 	beq.w	8005028 <_dtoa_r+0xa48>
 8004c94:	461a      	mov	r2, r3
 8004c96:	4601      	mov	r1, r0
 8004c98:	4620      	mov	r0, r4
 8004c9a:	f000 fb81 	bl	80053a0 <__pow5mult>
 8004c9e:	9b08      	ldr	r3, [sp, #32]
 8004ca0:	2b01      	cmp	r3, #1
 8004ca2:	4605      	mov	r5, r0
 8004ca4:	dc44      	bgt.n	8004d30 <_dtoa_r+0x750>
 8004ca6:	9b02      	ldr	r3, [sp, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d13c      	bne.n	8004d26 <_dtoa_r+0x746>
 8004cac:	9b03      	ldr	r3, [sp, #12]
 8004cae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d137      	bne.n	8004d26 <_dtoa_r+0x746>
 8004cb6:	9b03      	ldr	r3, [sp, #12]
 8004cb8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004cbc:	0d1b      	lsrs	r3, r3, #20
 8004cbe:	051b      	lsls	r3, r3, #20
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d033      	beq.n	8004d2c <_dtoa_r+0x74c>
 8004cc4:	9b07      	ldr	r3, [sp, #28]
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	f10a 0a01 	add.w	sl, sl, #1
 8004ccc:	9307      	str	r3, [sp, #28]
 8004cce:	f04f 0801 	mov.w	r8, #1
 8004cd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004cd4:	bb73      	cbnz	r3, 8004d34 <_dtoa_r+0x754>
 8004cd6:	2001      	movs	r0, #1
 8004cd8:	e034      	b.n	8004d44 <_dtoa_r+0x764>
 8004cda:	bf00      	nop
 8004cdc:	08005820 	.word	0x08005820
 8004ce0:	080057f8 	.word	0x080057f8
 8004ce4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004ce6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8004cea:	e790      	b.n	8004c0e <_dtoa_r+0x62e>
 8004cec:	f109 35ff 	add.w	r5, r9, #4294967295
 8004cf0:	45a8      	cmp	r8, r5
 8004cf2:	bfbf      	itttt	lt
 8004cf4:	9b0b      	ldrlt	r3, [sp, #44]	; 0x2c
 8004cf6:	eba5 0808 	sublt.w	r8, r5, r8
 8004cfa:	4443      	addlt	r3, r8
 8004cfc:	930b      	strlt	r3, [sp, #44]	; 0x2c
 8004cfe:	bfb6      	itet	lt
 8004d00:	46a8      	movlt	r8, r5
 8004d02:	eba8 0505 	subge.w	r5, r8, r5
 8004d06:	2500      	movlt	r5, #0
 8004d08:	f1b9 0f00 	cmp.w	r9, #0
 8004d0c:	bfb9      	ittee	lt
 8004d0e:	ebaa 0609 	sublt.w	r6, sl, r9
 8004d12:	2300      	movlt	r3, #0
 8004d14:	4656      	movge	r6, sl
 8004d16:	464b      	movge	r3, r9
 8004d18:	e77b      	b.n	8004c12 <_dtoa_r+0x632>
 8004d1a:	4645      	mov	r5, r8
 8004d1c:	4656      	mov	r6, sl
 8004d1e:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8004d20:	e780      	b.n	8004c24 <_dtoa_r+0x644>
 8004d22:	4642      	mov	r2, r8
 8004d24:	e7a8      	b.n	8004c78 <_dtoa_r+0x698>
 8004d26:	f04f 0800 	mov.w	r8, #0
 8004d2a:	e7d2      	b.n	8004cd2 <_dtoa_r+0x6f2>
 8004d2c:	4698      	mov	r8, r3
 8004d2e:	e7d0      	b.n	8004cd2 <_dtoa_r+0x6f2>
 8004d30:	f04f 0800 	mov.w	r8, #0
 8004d34:	692b      	ldr	r3, [r5, #16]
 8004d36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8004d3a:	6918      	ldr	r0, [r3, #16]
 8004d3c:	f000 fa43 	bl	80051c6 <__hi0bits>
 8004d40:	f1c0 0020 	rsb	r0, r0, #32
 8004d44:	9b07      	ldr	r3, [sp, #28]
 8004d46:	4418      	add	r0, r3
 8004d48:	f010 001f 	ands.w	r0, r0, #31
 8004d4c:	d047      	beq.n	8004dde <_dtoa_r+0x7fe>
 8004d4e:	f1c0 0320 	rsb	r3, r0, #32
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	dd3b      	ble.n	8004dce <_dtoa_r+0x7ee>
 8004d56:	9b07      	ldr	r3, [sp, #28]
 8004d58:	f1c0 001c 	rsb	r0, r0, #28
 8004d5c:	4482      	add	sl, r0
 8004d5e:	4406      	add	r6, r0
 8004d60:	4403      	add	r3, r0
 8004d62:	9307      	str	r3, [sp, #28]
 8004d64:	f1ba 0f00 	cmp.w	sl, #0
 8004d68:	dd05      	ble.n	8004d76 <_dtoa_r+0x796>
 8004d6a:	4652      	mov	r2, sl
 8004d6c:	9901      	ldr	r1, [sp, #4]
 8004d6e:	4620      	mov	r0, r4
 8004d70:	f000 fb64 	bl	800543c <__lshift>
 8004d74:	9001      	str	r0, [sp, #4]
 8004d76:	9b07      	ldr	r3, [sp, #28]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	dd05      	ble.n	8004d88 <_dtoa_r+0x7a8>
 8004d7c:	4629      	mov	r1, r5
 8004d7e:	461a      	mov	r2, r3
 8004d80:	4620      	mov	r0, r4
 8004d82:	f000 fb5b 	bl	800543c <__lshift>
 8004d86:	4605      	mov	r5, r0
 8004d88:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004d8a:	b353      	cbz	r3, 8004de2 <_dtoa_r+0x802>
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	9801      	ldr	r0, [sp, #4]
 8004d90:	f000 fba8 	bl	80054e4 <__mcmp>
 8004d94:	2800      	cmp	r0, #0
 8004d96:	da24      	bge.n	8004de2 <_dtoa_r+0x802>
 8004d98:	2300      	movs	r3, #0
 8004d9a:	220a      	movs	r2, #10
 8004d9c:	9901      	ldr	r1, [sp, #4]
 8004d9e:	4620      	mov	r0, r4
 8004da0:	f000 f9d6 	bl	8005150 <__multadd>
 8004da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004da6:	9001      	str	r0, [sp, #4]
 8004da8:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 8142 	beq.w	8005036 <_dtoa_r+0xa56>
 8004db2:	2300      	movs	r3, #0
 8004db4:	4639      	mov	r1, r7
 8004db6:	220a      	movs	r2, #10
 8004db8:	4620      	mov	r0, r4
 8004dba:	f000 f9c9 	bl	8005150 <__multadd>
 8004dbe:	9b06      	ldr	r3, [sp, #24]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	4607      	mov	r7, r0
 8004dc4:	dc4b      	bgt.n	8004e5e <_dtoa_r+0x87e>
 8004dc6:	9b08      	ldr	r3, [sp, #32]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	dd48      	ble.n	8004e5e <_dtoa_r+0x87e>
 8004dcc:	e011      	b.n	8004df2 <_dtoa_r+0x812>
 8004dce:	d0c9      	beq.n	8004d64 <_dtoa_r+0x784>
 8004dd0:	9a07      	ldr	r2, [sp, #28]
 8004dd2:	331c      	adds	r3, #28
 8004dd4:	441a      	add	r2, r3
 8004dd6:	449a      	add	sl, r3
 8004dd8:	441e      	add	r6, r3
 8004dda:	4613      	mov	r3, r2
 8004ddc:	e7c1      	b.n	8004d62 <_dtoa_r+0x782>
 8004dde:	4603      	mov	r3, r0
 8004de0:	e7f6      	b.n	8004dd0 <_dtoa_r+0x7f0>
 8004de2:	f1b9 0f00 	cmp.w	r9, #0
 8004de6:	dc34      	bgt.n	8004e52 <_dtoa_r+0x872>
 8004de8:	9b08      	ldr	r3, [sp, #32]
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	dd31      	ble.n	8004e52 <_dtoa_r+0x872>
 8004dee:	f8cd 9018 	str.w	r9, [sp, #24]
 8004df2:	9b06      	ldr	r3, [sp, #24]
 8004df4:	b963      	cbnz	r3, 8004e10 <_dtoa_r+0x830>
 8004df6:	4629      	mov	r1, r5
 8004df8:	2205      	movs	r2, #5
 8004dfa:	4620      	mov	r0, r4
 8004dfc:	f000 f9a8 	bl	8005150 <__multadd>
 8004e00:	4601      	mov	r1, r0
 8004e02:	4605      	mov	r5, r0
 8004e04:	9801      	ldr	r0, [sp, #4]
 8004e06:	f000 fb6d 	bl	80054e4 <__mcmp>
 8004e0a:	2800      	cmp	r0, #0
 8004e0c:	f73f adfc 	bgt.w	8004a08 <_dtoa_r+0x428>
 8004e10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e12:	9e04      	ldr	r6, [sp, #16]
 8004e14:	ea6f 0b03 	mvn.w	fp, r3
 8004e18:	f04f 0900 	mov.w	r9, #0
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4620      	mov	r0, r4
 8004e20:	f000 f97f 	bl	8005122 <_Bfree>
 8004e24:	2f00      	cmp	r7, #0
 8004e26:	f43f aebb 	beq.w	8004ba0 <_dtoa_r+0x5c0>
 8004e2a:	f1b9 0f00 	cmp.w	r9, #0
 8004e2e:	d005      	beq.n	8004e3c <_dtoa_r+0x85c>
 8004e30:	45b9      	cmp	r9, r7
 8004e32:	d003      	beq.n	8004e3c <_dtoa_r+0x85c>
 8004e34:	4649      	mov	r1, r9
 8004e36:	4620      	mov	r0, r4
 8004e38:	f000 f973 	bl	8005122 <_Bfree>
 8004e3c:	4639      	mov	r1, r7
 8004e3e:	4620      	mov	r0, r4
 8004e40:	f000 f96f 	bl	8005122 <_Bfree>
 8004e44:	e6ac      	b.n	8004ba0 <_dtoa_r+0x5c0>
 8004e46:	2500      	movs	r5, #0
 8004e48:	462f      	mov	r7, r5
 8004e4a:	e7e1      	b.n	8004e10 <_dtoa_r+0x830>
 8004e4c:	469b      	mov	fp, r3
 8004e4e:	462f      	mov	r7, r5
 8004e50:	e5da      	b.n	8004a08 <_dtoa_r+0x428>
 8004e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e54:	f8cd 9018 	str.w	r9, [sp, #24]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 80f3 	beq.w	8005044 <_dtoa_r+0xa64>
 8004e5e:	2e00      	cmp	r6, #0
 8004e60:	dd05      	ble.n	8004e6e <_dtoa_r+0x88e>
 8004e62:	4639      	mov	r1, r7
 8004e64:	4632      	mov	r2, r6
 8004e66:	4620      	mov	r0, r4
 8004e68:	f000 fae8 	bl	800543c <__lshift>
 8004e6c:	4607      	mov	r7, r0
 8004e6e:	f1b8 0f00 	cmp.w	r8, #0
 8004e72:	d04c      	beq.n	8004f0e <_dtoa_r+0x92e>
 8004e74:	6879      	ldr	r1, [r7, #4]
 8004e76:	4620      	mov	r0, r4
 8004e78:	f000 f91f 	bl	80050ba <_Balloc>
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	3202      	adds	r2, #2
 8004e80:	4606      	mov	r6, r0
 8004e82:	0092      	lsls	r2, r2, #2
 8004e84:	f107 010c 	add.w	r1, r7, #12
 8004e88:	300c      	adds	r0, #12
 8004e8a:	f000 f90b 	bl	80050a4 <memcpy>
 8004e8e:	2201      	movs	r2, #1
 8004e90:	4631      	mov	r1, r6
 8004e92:	4620      	mov	r0, r4
 8004e94:	f000 fad2 	bl	800543c <__lshift>
 8004e98:	9b02      	ldr	r3, [sp, #8]
 8004e9a:	f8dd a010 	ldr.w	sl, [sp, #16]
 8004e9e:	f003 0301 	and.w	r3, r3, #1
 8004ea2:	46b9      	mov	r9, r7
 8004ea4:	9307      	str	r3, [sp, #28]
 8004ea6:	4607      	mov	r7, r0
 8004ea8:	4629      	mov	r1, r5
 8004eaa:	9801      	ldr	r0, [sp, #4]
 8004eac:	f7ff fb09 	bl	80044c2 <quorem>
 8004eb0:	4649      	mov	r1, r9
 8004eb2:	4606      	mov	r6, r0
 8004eb4:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8004eb8:	9801      	ldr	r0, [sp, #4]
 8004eba:	f000 fb13 	bl	80054e4 <__mcmp>
 8004ebe:	463a      	mov	r2, r7
 8004ec0:	9002      	str	r0, [sp, #8]
 8004ec2:	4629      	mov	r1, r5
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 fb27 	bl	8005518 <__mdiff>
 8004eca:	68c3      	ldr	r3, [r0, #12]
 8004ecc:	4602      	mov	r2, r0
 8004ece:	bb03      	cbnz	r3, 8004f12 <_dtoa_r+0x932>
 8004ed0:	4601      	mov	r1, r0
 8004ed2:	9009      	str	r0, [sp, #36]	; 0x24
 8004ed4:	9801      	ldr	r0, [sp, #4]
 8004ed6:	f000 fb05 	bl	80054e4 <__mcmp>
 8004eda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004edc:	4603      	mov	r3, r0
 8004ede:	4611      	mov	r1, r2
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	9309      	str	r3, [sp, #36]	; 0x24
 8004ee4:	f000 f91d 	bl	8005122 <_Bfree>
 8004ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004eea:	b9a3      	cbnz	r3, 8004f16 <_dtoa_r+0x936>
 8004eec:	9a08      	ldr	r2, [sp, #32]
 8004eee:	b992      	cbnz	r2, 8004f16 <_dtoa_r+0x936>
 8004ef0:	9a07      	ldr	r2, [sp, #28]
 8004ef2:	b982      	cbnz	r2, 8004f16 <_dtoa_r+0x936>
 8004ef4:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004ef8:	d029      	beq.n	8004f4e <_dtoa_r+0x96e>
 8004efa:	9b02      	ldr	r3, [sp, #8]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	dd01      	ble.n	8004f04 <_dtoa_r+0x924>
 8004f00:	f106 0831 	add.w	r8, r6, #49	; 0x31
 8004f04:	f10a 0601 	add.w	r6, sl, #1
 8004f08:	f88a 8000 	strb.w	r8, [sl]
 8004f0c:	e786      	b.n	8004e1c <_dtoa_r+0x83c>
 8004f0e:	4638      	mov	r0, r7
 8004f10:	e7c2      	b.n	8004e98 <_dtoa_r+0x8b8>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e7e3      	b.n	8004ede <_dtoa_r+0x8fe>
 8004f16:	9a02      	ldr	r2, [sp, #8]
 8004f18:	2a00      	cmp	r2, #0
 8004f1a:	db04      	blt.n	8004f26 <_dtoa_r+0x946>
 8004f1c:	d124      	bne.n	8004f68 <_dtoa_r+0x988>
 8004f1e:	9a08      	ldr	r2, [sp, #32]
 8004f20:	bb12      	cbnz	r2, 8004f68 <_dtoa_r+0x988>
 8004f22:	9a07      	ldr	r2, [sp, #28]
 8004f24:	bb02      	cbnz	r2, 8004f68 <_dtoa_r+0x988>
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	ddec      	ble.n	8004f04 <_dtoa_r+0x924>
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	9901      	ldr	r1, [sp, #4]
 8004f2e:	4620      	mov	r0, r4
 8004f30:	f000 fa84 	bl	800543c <__lshift>
 8004f34:	4629      	mov	r1, r5
 8004f36:	9001      	str	r0, [sp, #4]
 8004f38:	f000 fad4 	bl	80054e4 <__mcmp>
 8004f3c:	2800      	cmp	r0, #0
 8004f3e:	dc03      	bgt.n	8004f48 <_dtoa_r+0x968>
 8004f40:	d1e0      	bne.n	8004f04 <_dtoa_r+0x924>
 8004f42:	f018 0f01 	tst.w	r8, #1
 8004f46:	d0dd      	beq.n	8004f04 <_dtoa_r+0x924>
 8004f48:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f4c:	d1d8      	bne.n	8004f00 <_dtoa_r+0x920>
 8004f4e:	2339      	movs	r3, #57	; 0x39
 8004f50:	f10a 0601 	add.w	r6, sl, #1
 8004f54:	f88a 3000 	strb.w	r3, [sl]
 8004f58:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004f5c:	2b39      	cmp	r3, #57	; 0x39
 8004f5e:	f106 32ff 	add.w	r2, r6, #4294967295
 8004f62:	d04c      	beq.n	8004ffe <_dtoa_r+0xa1e>
 8004f64:	3301      	adds	r3, #1
 8004f66:	e051      	b.n	800500c <_dtoa_r+0xa2c>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f10a 0601 	add.w	r6, sl, #1
 8004f6e:	dd05      	ble.n	8004f7c <_dtoa_r+0x99c>
 8004f70:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8004f74:	d0eb      	beq.n	8004f4e <_dtoa_r+0x96e>
 8004f76:	f108 0801 	add.w	r8, r8, #1
 8004f7a:	e7c5      	b.n	8004f08 <_dtoa_r+0x928>
 8004f7c:	9b04      	ldr	r3, [sp, #16]
 8004f7e:	9a06      	ldr	r2, [sp, #24]
 8004f80:	f806 8c01 	strb.w	r8, [r6, #-1]
 8004f84:	1af3      	subs	r3, r6, r3
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d021      	beq.n	8004fce <_dtoa_r+0x9ee>
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	220a      	movs	r2, #10
 8004f8e:	9901      	ldr	r1, [sp, #4]
 8004f90:	4620      	mov	r0, r4
 8004f92:	f000 f8dd 	bl	8005150 <__multadd>
 8004f96:	45b9      	cmp	r9, r7
 8004f98:	9001      	str	r0, [sp, #4]
 8004f9a:	f04f 0300 	mov.w	r3, #0
 8004f9e:	f04f 020a 	mov.w	r2, #10
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	d105      	bne.n	8004fb4 <_dtoa_r+0x9d4>
 8004fa8:	f000 f8d2 	bl	8005150 <__multadd>
 8004fac:	4681      	mov	r9, r0
 8004fae:	4607      	mov	r7, r0
 8004fb0:	46b2      	mov	sl, r6
 8004fb2:	e779      	b.n	8004ea8 <_dtoa_r+0x8c8>
 8004fb4:	f000 f8cc 	bl	8005150 <__multadd>
 8004fb8:	4639      	mov	r1, r7
 8004fba:	4681      	mov	r9, r0
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	220a      	movs	r2, #10
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	f000 f8c5 	bl	8005150 <__multadd>
 8004fc6:	4607      	mov	r7, r0
 8004fc8:	e7f2      	b.n	8004fb0 <_dtoa_r+0x9d0>
 8004fca:	f04f 0900 	mov.w	r9, #0
 8004fce:	2201      	movs	r2, #1
 8004fd0:	9901      	ldr	r1, [sp, #4]
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f000 fa32 	bl	800543c <__lshift>
 8004fd8:	4629      	mov	r1, r5
 8004fda:	9001      	str	r0, [sp, #4]
 8004fdc:	f000 fa82 	bl	80054e4 <__mcmp>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	dcb9      	bgt.n	8004f58 <_dtoa_r+0x978>
 8004fe4:	d102      	bne.n	8004fec <_dtoa_r+0xa0c>
 8004fe6:	f018 0f01 	tst.w	r8, #1
 8004fea:	d1b5      	bne.n	8004f58 <_dtoa_r+0x978>
 8004fec:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004ff0:	2b30      	cmp	r3, #48	; 0x30
 8004ff2:	f106 32ff 	add.w	r2, r6, #4294967295
 8004ff6:	f47f af11 	bne.w	8004e1c <_dtoa_r+0x83c>
 8004ffa:	4616      	mov	r6, r2
 8004ffc:	e7f6      	b.n	8004fec <_dtoa_r+0xa0c>
 8004ffe:	9b04      	ldr	r3, [sp, #16]
 8005000:	4293      	cmp	r3, r2
 8005002:	d105      	bne.n	8005010 <_dtoa_r+0xa30>
 8005004:	9a04      	ldr	r2, [sp, #16]
 8005006:	f10b 0b01 	add.w	fp, fp, #1
 800500a:	2331      	movs	r3, #49	; 0x31
 800500c:	7013      	strb	r3, [r2, #0]
 800500e:	e705      	b.n	8004e1c <_dtoa_r+0x83c>
 8005010:	4616      	mov	r6, r2
 8005012:	e7a1      	b.n	8004f58 <_dtoa_r+0x978>
 8005014:	4b16      	ldr	r3, [pc, #88]	; (8005070 <_dtoa_r+0xa90>)
 8005016:	f7ff bb48 	b.w	80046aa <_dtoa_r+0xca>
 800501a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800501c:	2b00      	cmp	r3, #0
 800501e:	f47f ab23 	bne.w	8004668 <_dtoa_r+0x88>
 8005022:	4b14      	ldr	r3, [pc, #80]	; (8005074 <_dtoa_r+0xa94>)
 8005024:	f7ff bb41 	b.w	80046aa <_dtoa_r+0xca>
 8005028:	9b08      	ldr	r3, [sp, #32]
 800502a:	2b01      	cmp	r3, #1
 800502c:	f77f ae3b 	ble.w	8004ca6 <_dtoa_r+0x6c6>
 8005030:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005034:	e64f      	b.n	8004cd6 <_dtoa_r+0x6f6>
 8005036:	9b06      	ldr	r3, [sp, #24]
 8005038:	2b00      	cmp	r3, #0
 800503a:	dc03      	bgt.n	8005044 <_dtoa_r+0xa64>
 800503c:	9b08      	ldr	r3, [sp, #32]
 800503e:	2b02      	cmp	r3, #2
 8005040:	f73f aed7 	bgt.w	8004df2 <_dtoa_r+0x812>
 8005044:	9e04      	ldr	r6, [sp, #16]
 8005046:	9801      	ldr	r0, [sp, #4]
 8005048:	4629      	mov	r1, r5
 800504a:	f7ff fa3a 	bl	80044c2 <quorem>
 800504e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8005052:	f806 8b01 	strb.w	r8, [r6], #1
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	9a06      	ldr	r2, [sp, #24]
 800505a:	1af3      	subs	r3, r6, r3
 800505c:	429a      	cmp	r2, r3
 800505e:	ddb4      	ble.n	8004fca <_dtoa_r+0x9ea>
 8005060:	2300      	movs	r3, #0
 8005062:	220a      	movs	r2, #10
 8005064:	9901      	ldr	r1, [sp, #4]
 8005066:	4620      	mov	r0, r4
 8005068:	f000 f872 	bl	8005150 <__multadd>
 800506c:	9001      	str	r0, [sp, #4]
 800506e:	e7ea      	b.n	8005046 <_dtoa_r+0xa66>
 8005070:	080057e8 	.word	0x080057e8
 8005074:	080057ea 	.word	0x080057ea

08005078 <_localeconv_r>:
 8005078:	4b04      	ldr	r3, [pc, #16]	; (800508c <_localeconv_r+0x14>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	6a18      	ldr	r0, [r3, #32]
 800507e:	4b04      	ldr	r3, [pc, #16]	; (8005090 <_localeconv_r+0x18>)
 8005080:	2800      	cmp	r0, #0
 8005082:	bf08      	it	eq
 8005084:	4618      	moveq	r0, r3
 8005086:	30f0      	adds	r0, #240	; 0xf0
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	2000000c 	.word	0x2000000c
 8005090:	20000070 	.word	0x20000070

08005094 <malloc>:
 8005094:	4b02      	ldr	r3, [pc, #8]	; (80050a0 <malloc+0xc>)
 8005096:	4601      	mov	r1, r0
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	f000 baf7 	b.w	800568c <_malloc_r>
 800509e:	bf00      	nop
 80050a0:	2000000c 	.word	0x2000000c

080050a4 <memcpy>:
 80050a4:	b510      	push	{r4, lr}
 80050a6:	1e43      	subs	r3, r0, #1
 80050a8:	440a      	add	r2, r1
 80050aa:	4291      	cmp	r1, r2
 80050ac:	d100      	bne.n	80050b0 <memcpy+0xc>
 80050ae:	bd10      	pop	{r4, pc}
 80050b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050b8:	e7f7      	b.n	80050aa <memcpy+0x6>

080050ba <_Balloc>:
 80050ba:	b570      	push	{r4, r5, r6, lr}
 80050bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80050be:	4604      	mov	r4, r0
 80050c0:	460e      	mov	r6, r1
 80050c2:	b93d      	cbnz	r5, 80050d4 <_Balloc+0x1a>
 80050c4:	2010      	movs	r0, #16
 80050c6:	f7ff ffe5 	bl	8005094 <malloc>
 80050ca:	6260      	str	r0, [r4, #36]	; 0x24
 80050cc:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80050d0:	6005      	str	r5, [r0, #0]
 80050d2:	60c5      	str	r5, [r0, #12]
 80050d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80050d6:	68eb      	ldr	r3, [r5, #12]
 80050d8:	b183      	cbz	r3, 80050fc <_Balloc+0x42>
 80050da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050dc:	68db      	ldr	r3, [r3, #12]
 80050de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80050e2:	b9b8      	cbnz	r0, 8005114 <_Balloc+0x5a>
 80050e4:	2101      	movs	r1, #1
 80050e6:	fa01 f506 	lsl.w	r5, r1, r6
 80050ea:	1d6a      	adds	r2, r5, #5
 80050ec:	0092      	lsls	r2, r2, #2
 80050ee:	4620      	mov	r0, r4
 80050f0:	f000 fabe 	bl	8005670 <_calloc_r>
 80050f4:	b160      	cbz	r0, 8005110 <_Balloc+0x56>
 80050f6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80050fa:	e00e      	b.n	800511a <_Balloc+0x60>
 80050fc:	2221      	movs	r2, #33	; 0x21
 80050fe:	2104      	movs	r1, #4
 8005100:	4620      	mov	r0, r4
 8005102:	f000 fab5 	bl	8005670 <_calloc_r>
 8005106:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005108:	60e8      	str	r0, [r5, #12]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e4      	bne.n	80050da <_Balloc+0x20>
 8005110:	2000      	movs	r0, #0
 8005112:	bd70      	pop	{r4, r5, r6, pc}
 8005114:	6802      	ldr	r2, [r0, #0]
 8005116:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800511a:	2300      	movs	r3, #0
 800511c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005120:	e7f7      	b.n	8005112 <_Balloc+0x58>

08005122 <_Bfree>:
 8005122:	b570      	push	{r4, r5, r6, lr}
 8005124:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005126:	4606      	mov	r6, r0
 8005128:	460d      	mov	r5, r1
 800512a:	b93c      	cbnz	r4, 800513c <_Bfree+0x1a>
 800512c:	2010      	movs	r0, #16
 800512e:	f7ff ffb1 	bl	8005094 <malloc>
 8005132:	6270      	str	r0, [r6, #36]	; 0x24
 8005134:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005138:	6004      	str	r4, [r0, #0]
 800513a:	60c4      	str	r4, [r0, #12]
 800513c:	b13d      	cbz	r5, 800514e <_Bfree+0x2c>
 800513e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005140:	686a      	ldr	r2, [r5, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005148:	6029      	str	r1, [r5, #0]
 800514a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800514e:	bd70      	pop	{r4, r5, r6, pc}

08005150 <__multadd>:
 8005150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005154:	690d      	ldr	r5, [r1, #16]
 8005156:	461f      	mov	r7, r3
 8005158:	4606      	mov	r6, r0
 800515a:	460c      	mov	r4, r1
 800515c:	f101 0c14 	add.w	ip, r1, #20
 8005160:	2300      	movs	r3, #0
 8005162:	f8dc 0000 	ldr.w	r0, [ip]
 8005166:	b281      	uxth	r1, r0
 8005168:	fb02 7101 	mla	r1, r2, r1, r7
 800516c:	0c0f      	lsrs	r7, r1, #16
 800516e:	0c00      	lsrs	r0, r0, #16
 8005170:	fb02 7000 	mla	r0, r2, r0, r7
 8005174:	b289      	uxth	r1, r1
 8005176:	3301      	adds	r3, #1
 8005178:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800517c:	429d      	cmp	r5, r3
 800517e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005182:	f84c 1b04 	str.w	r1, [ip], #4
 8005186:	dcec      	bgt.n	8005162 <__multadd+0x12>
 8005188:	b1d7      	cbz	r7, 80051c0 <__multadd+0x70>
 800518a:	68a3      	ldr	r3, [r4, #8]
 800518c:	42ab      	cmp	r3, r5
 800518e:	dc12      	bgt.n	80051b6 <__multadd+0x66>
 8005190:	6861      	ldr	r1, [r4, #4]
 8005192:	4630      	mov	r0, r6
 8005194:	3101      	adds	r1, #1
 8005196:	f7ff ff90 	bl	80050ba <_Balloc>
 800519a:	6922      	ldr	r2, [r4, #16]
 800519c:	3202      	adds	r2, #2
 800519e:	f104 010c 	add.w	r1, r4, #12
 80051a2:	4680      	mov	r8, r0
 80051a4:	0092      	lsls	r2, r2, #2
 80051a6:	300c      	adds	r0, #12
 80051a8:	f7ff ff7c 	bl	80050a4 <memcpy>
 80051ac:	4621      	mov	r1, r4
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7ff ffb7 	bl	8005122 <_Bfree>
 80051b4:	4644      	mov	r4, r8
 80051b6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80051ba:	3501      	adds	r5, #1
 80051bc:	615f      	str	r7, [r3, #20]
 80051be:	6125      	str	r5, [r4, #16]
 80051c0:	4620      	mov	r0, r4
 80051c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080051c6 <__hi0bits>:
 80051c6:	0c02      	lsrs	r2, r0, #16
 80051c8:	0412      	lsls	r2, r2, #16
 80051ca:	4603      	mov	r3, r0
 80051cc:	b9b2      	cbnz	r2, 80051fc <__hi0bits+0x36>
 80051ce:	0403      	lsls	r3, r0, #16
 80051d0:	2010      	movs	r0, #16
 80051d2:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80051d6:	bf04      	itt	eq
 80051d8:	021b      	lsleq	r3, r3, #8
 80051da:	3008      	addeq	r0, #8
 80051dc:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80051e0:	bf04      	itt	eq
 80051e2:	011b      	lsleq	r3, r3, #4
 80051e4:	3004      	addeq	r0, #4
 80051e6:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80051ea:	bf04      	itt	eq
 80051ec:	009b      	lsleq	r3, r3, #2
 80051ee:	3002      	addeq	r0, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	db06      	blt.n	8005202 <__hi0bits+0x3c>
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	d503      	bpl.n	8005200 <__hi0bits+0x3a>
 80051f8:	3001      	adds	r0, #1
 80051fa:	4770      	bx	lr
 80051fc:	2000      	movs	r0, #0
 80051fe:	e7e8      	b.n	80051d2 <__hi0bits+0xc>
 8005200:	2020      	movs	r0, #32
 8005202:	4770      	bx	lr

08005204 <__lo0bits>:
 8005204:	6803      	ldr	r3, [r0, #0]
 8005206:	f013 0207 	ands.w	r2, r3, #7
 800520a:	4601      	mov	r1, r0
 800520c:	d00b      	beq.n	8005226 <__lo0bits+0x22>
 800520e:	07da      	lsls	r2, r3, #31
 8005210:	d423      	bmi.n	800525a <__lo0bits+0x56>
 8005212:	0798      	lsls	r0, r3, #30
 8005214:	bf49      	itett	mi
 8005216:	085b      	lsrmi	r3, r3, #1
 8005218:	089b      	lsrpl	r3, r3, #2
 800521a:	2001      	movmi	r0, #1
 800521c:	600b      	strmi	r3, [r1, #0]
 800521e:	bf5c      	itt	pl
 8005220:	600b      	strpl	r3, [r1, #0]
 8005222:	2002      	movpl	r0, #2
 8005224:	4770      	bx	lr
 8005226:	b298      	uxth	r0, r3
 8005228:	b9a8      	cbnz	r0, 8005256 <__lo0bits+0x52>
 800522a:	0c1b      	lsrs	r3, r3, #16
 800522c:	2010      	movs	r0, #16
 800522e:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005232:	bf04      	itt	eq
 8005234:	0a1b      	lsreq	r3, r3, #8
 8005236:	3008      	addeq	r0, #8
 8005238:	071a      	lsls	r2, r3, #28
 800523a:	bf04      	itt	eq
 800523c:	091b      	lsreq	r3, r3, #4
 800523e:	3004      	addeq	r0, #4
 8005240:	079a      	lsls	r2, r3, #30
 8005242:	bf04      	itt	eq
 8005244:	089b      	lsreq	r3, r3, #2
 8005246:	3002      	addeq	r0, #2
 8005248:	07da      	lsls	r2, r3, #31
 800524a:	d402      	bmi.n	8005252 <__lo0bits+0x4e>
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	d006      	beq.n	800525e <__lo0bits+0x5a>
 8005250:	3001      	adds	r0, #1
 8005252:	600b      	str	r3, [r1, #0]
 8005254:	4770      	bx	lr
 8005256:	4610      	mov	r0, r2
 8005258:	e7e9      	b.n	800522e <__lo0bits+0x2a>
 800525a:	2000      	movs	r0, #0
 800525c:	4770      	bx	lr
 800525e:	2020      	movs	r0, #32
 8005260:	4770      	bx	lr

08005262 <__i2b>:
 8005262:	b510      	push	{r4, lr}
 8005264:	460c      	mov	r4, r1
 8005266:	2101      	movs	r1, #1
 8005268:	f7ff ff27 	bl	80050ba <_Balloc>
 800526c:	2201      	movs	r2, #1
 800526e:	6144      	str	r4, [r0, #20]
 8005270:	6102      	str	r2, [r0, #16]
 8005272:	bd10      	pop	{r4, pc}

08005274 <__multiply>:
 8005274:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005278:	4614      	mov	r4, r2
 800527a:	690a      	ldr	r2, [r1, #16]
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	429a      	cmp	r2, r3
 8005280:	bfb8      	it	lt
 8005282:	460b      	movlt	r3, r1
 8005284:	4688      	mov	r8, r1
 8005286:	bfbc      	itt	lt
 8005288:	46a0      	movlt	r8, r4
 800528a:	461c      	movlt	r4, r3
 800528c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005290:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005294:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005298:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800529c:	eb07 0609 	add.w	r6, r7, r9
 80052a0:	42b3      	cmp	r3, r6
 80052a2:	bfb8      	it	lt
 80052a4:	3101      	addlt	r1, #1
 80052a6:	f7ff ff08 	bl	80050ba <_Balloc>
 80052aa:	f100 0514 	add.w	r5, r0, #20
 80052ae:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80052b2:	462b      	mov	r3, r5
 80052b4:	2200      	movs	r2, #0
 80052b6:	4573      	cmp	r3, lr
 80052b8:	d316      	bcc.n	80052e8 <__multiply+0x74>
 80052ba:	f104 0214 	add.w	r2, r4, #20
 80052be:	f108 0114 	add.w	r1, r8, #20
 80052c2:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80052c6:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80052ca:	9300      	str	r3, [sp, #0]
 80052cc:	9b00      	ldr	r3, [sp, #0]
 80052ce:	9201      	str	r2, [sp, #4]
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d80c      	bhi.n	80052ee <__multiply+0x7a>
 80052d4:	2e00      	cmp	r6, #0
 80052d6:	dd03      	ble.n	80052e0 <__multiply+0x6c>
 80052d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d05d      	beq.n	800539c <__multiply+0x128>
 80052e0:	6106      	str	r6, [r0, #16]
 80052e2:	b003      	add	sp, #12
 80052e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e8:	f843 2b04 	str.w	r2, [r3], #4
 80052ec:	e7e3      	b.n	80052b6 <__multiply+0x42>
 80052ee:	f8b2 b000 	ldrh.w	fp, [r2]
 80052f2:	f1bb 0f00 	cmp.w	fp, #0
 80052f6:	d023      	beq.n	8005340 <__multiply+0xcc>
 80052f8:	4689      	mov	r9, r1
 80052fa:	46ac      	mov	ip, r5
 80052fc:	f04f 0800 	mov.w	r8, #0
 8005300:	f859 4b04 	ldr.w	r4, [r9], #4
 8005304:	f8dc a000 	ldr.w	sl, [ip]
 8005308:	b2a3      	uxth	r3, r4
 800530a:	fa1f fa8a 	uxth.w	sl, sl
 800530e:	fb0b a303 	mla	r3, fp, r3, sl
 8005312:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005316:	f8dc 4000 	ldr.w	r4, [ip]
 800531a:	4443      	add	r3, r8
 800531c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005320:	fb0b 840a 	mla	r4, fp, sl, r8
 8005324:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8005328:	46e2      	mov	sl, ip
 800532a:	b29b      	uxth	r3, r3
 800532c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005330:	454f      	cmp	r7, r9
 8005332:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8005336:	f84a 3b04 	str.w	r3, [sl], #4
 800533a:	d82b      	bhi.n	8005394 <__multiply+0x120>
 800533c:	f8cc 8004 	str.w	r8, [ip, #4]
 8005340:	9b01      	ldr	r3, [sp, #4]
 8005342:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8005346:	3204      	adds	r2, #4
 8005348:	f1ba 0f00 	cmp.w	sl, #0
 800534c:	d020      	beq.n	8005390 <__multiply+0x11c>
 800534e:	682b      	ldr	r3, [r5, #0]
 8005350:	4689      	mov	r9, r1
 8005352:	46a8      	mov	r8, r5
 8005354:	f04f 0b00 	mov.w	fp, #0
 8005358:	f8b9 c000 	ldrh.w	ip, [r9]
 800535c:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8005360:	fb0a 440c 	mla	r4, sl, ip, r4
 8005364:	445c      	add	r4, fp
 8005366:	46c4      	mov	ip, r8
 8005368:	b29b      	uxth	r3, r3
 800536a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800536e:	f84c 3b04 	str.w	r3, [ip], #4
 8005372:	f859 3b04 	ldr.w	r3, [r9], #4
 8005376:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800537a:	0c1b      	lsrs	r3, r3, #16
 800537c:	fb0a b303 	mla	r3, sl, r3, fp
 8005380:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005384:	454f      	cmp	r7, r9
 8005386:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800538a:	d805      	bhi.n	8005398 <__multiply+0x124>
 800538c:	f8c8 3004 	str.w	r3, [r8, #4]
 8005390:	3504      	adds	r5, #4
 8005392:	e79b      	b.n	80052cc <__multiply+0x58>
 8005394:	46d4      	mov	ip, sl
 8005396:	e7b3      	b.n	8005300 <__multiply+0x8c>
 8005398:	46e0      	mov	r8, ip
 800539a:	e7dd      	b.n	8005358 <__multiply+0xe4>
 800539c:	3e01      	subs	r6, #1
 800539e:	e799      	b.n	80052d4 <__multiply+0x60>

080053a0 <__pow5mult>:
 80053a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a4:	4615      	mov	r5, r2
 80053a6:	f012 0203 	ands.w	r2, r2, #3
 80053aa:	4606      	mov	r6, r0
 80053ac:	460f      	mov	r7, r1
 80053ae:	d007      	beq.n	80053c0 <__pow5mult+0x20>
 80053b0:	3a01      	subs	r2, #1
 80053b2:	4c21      	ldr	r4, [pc, #132]	; (8005438 <__pow5mult+0x98>)
 80053b4:	2300      	movs	r3, #0
 80053b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80053ba:	f7ff fec9 	bl	8005150 <__multadd>
 80053be:	4607      	mov	r7, r0
 80053c0:	10ad      	asrs	r5, r5, #2
 80053c2:	d035      	beq.n	8005430 <__pow5mult+0x90>
 80053c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80053c6:	b93c      	cbnz	r4, 80053d8 <__pow5mult+0x38>
 80053c8:	2010      	movs	r0, #16
 80053ca:	f7ff fe63 	bl	8005094 <malloc>
 80053ce:	6270      	str	r0, [r6, #36]	; 0x24
 80053d0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80053d4:	6004      	str	r4, [r0, #0]
 80053d6:	60c4      	str	r4, [r0, #12]
 80053d8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80053dc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80053e0:	b94c      	cbnz	r4, 80053f6 <__pow5mult+0x56>
 80053e2:	f240 2171 	movw	r1, #625	; 0x271
 80053e6:	4630      	mov	r0, r6
 80053e8:	f7ff ff3b 	bl	8005262 <__i2b>
 80053ec:	2300      	movs	r3, #0
 80053ee:	f8c8 0008 	str.w	r0, [r8, #8]
 80053f2:	4604      	mov	r4, r0
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	f04f 0800 	mov.w	r8, #0
 80053fa:	07eb      	lsls	r3, r5, #31
 80053fc:	d50a      	bpl.n	8005414 <__pow5mult+0x74>
 80053fe:	4639      	mov	r1, r7
 8005400:	4622      	mov	r2, r4
 8005402:	4630      	mov	r0, r6
 8005404:	f7ff ff36 	bl	8005274 <__multiply>
 8005408:	4639      	mov	r1, r7
 800540a:	4681      	mov	r9, r0
 800540c:	4630      	mov	r0, r6
 800540e:	f7ff fe88 	bl	8005122 <_Bfree>
 8005412:	464f      	mov	r7, r9
 8005414:	106d      	asrs	r5, r5, #1
 8005416:	d00b      	beq.n	8005430 <__pow5mult+0x90>
 8005418:	6820      	ldr	r0, [r4, #0]
 800541a:	b938      	cbnz	r0, 800542c <__pow5mult+0x8c>
 800541c:	4622      	mov	r2, r4
 800541e:	4621      	mov	r1, r4
 8005420:	4630      	mov	r0, r6
 8005422:	f7ff ff27 	bl	8005274 <__multiply>
 8005426:	6020      	str	r0, [r4, #0]
 8005428:	f8c0 8000 	str.w	r8, [r0]
 800542c:	4604      	mov	r4, r0
 800542e:	e7e4      	b.n	80053fa <__pow5mult+0x5a>
 8005430:	4638      	mov	r0, r7
 8005432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005436:	bf00      	nop
 8005438:	080058e8 	.word	0x080058e8

0800543c <__lshift>:
 800543c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005440:	460c      	mov	r4, r1
 8005442:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6849      	ldr	r1, [r1, #4]
 800544a:	eb0a 0903 	add.w	r9, sl, r3
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	4607      	mov	r7, r0
 8005452:	4616      	mov	r6, r2
 8005454:	f109 0501 	add.w	r5, r9, #1
 8005458:	42ab      	cmp	r3, r5
 800545a:	db32      	blt.n	80054c2 <__lshift+0x86>
 800545c:	4638      	mov	r0, r7
 800545e:	f7ff fe2c 	bl	80050ba <_Balloc>
 8005462:	2300      	movs	r3, #0
 8005464:	4680      	mov	r8, r0
 8005466:	f100 0114 	add.w	r1, r0, #20
 800546a:	461a      	mov	r2, r3
 800546c:	4553      	cmp	r3, sl
 800546e:	db2b      	blt.n	80054c8 <__lshift+0x8c>
 8005470:	6920      	ldr	r0, [r4, #16]
 8005472:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005476:	f104 0314 	add.w	r3, r4, #20
 800547a:	f016 021f 	ands.w	r2, r6, #31
 800547e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005482:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005486:	d025      	beq.n	80054d4 <__lshift+0x98>
 8005488:	f1c2 0e20 	rsb	lr, r2, #32
 800548c:	2000      	movs	r0, #0
 800548e:	681e      	ldr	r6, [r3, #0]
 8005490:	468a      	mov	sl, r1
 8005492:	4096      	lsls	r6, r2
 8005494:	4330      	orrs	r0, r6
 8005496:	f84a 0b04 	str.w	r0, [sl], #4
 800549a:	f853 0b04 	ldr.w	r0, [r3], #4
 800549e:	459c      	cmp	ip, r3
 80054a0:	fa20 f00e 	lsr.w	r0, r0, lr
 80054a4:	d814      	bhi.n	80054d0 <__lshift+0x94>
 80054a6:	6048      	str	r0, [r1, #4]
 80054a8:	b108      	cbz	r0, 80054ae <__lshift+0x72>
 80054aa:	f109 0502 	add.w	r5, r9, #2
 80054ae:	3d01      	subs	r5, #1
 80054b0:	4638      	mov	r0, r7
 80054b2:	f8c8 5010 	str.w	r5, [r8, #16]
 80054b6:	4621      	mov	r1, r4
 80054b8:	f7ff fe33 	bl	8005122 <_Bfree>
 80054bc:	4640      	mov	r0, r8
 80054be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054c2:	3101      	adds	r1, #1
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	e7c7      	b.n	8005458 <__lshift+0x1c>
 80054c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80054cc:	3301      	adds	r3, #1
 80054ce:	e7cd      	b.n	800546c <__lshift+0x30>
 80054d0:	4651      	mov	r1, sl
 80054d2:	e7dc      	b.n	800548e <__lshift+0x52>
 80054d4:	3904      	subs	r1, #4
 80054d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054da:	f841 2f04 	str.w	r2, [r1, #4]!
 80054de:	459c      	cmp	ip, r3
 80054e0:	d8f9      	bhi.n	80054d6 <__lshift+0x9a>
 80054e2:	e7e4      	b.n	80054ae <__lshift+0x72>

080054e4 <__mcmp>:
 80054e4:	6903      	ldr	r3, [r0, #16]
 80054e6:	690a      	ldr	r2, [r1, #16]
 80054e8:	1a9b      	subs	r3, r3, r2
 80054ea:	b530      	push	{r4, r5, lr}
 80054ec:	d10c      	bne.n	8005508 <__mcmp+0x24>
 80054ee:	0092      	lsls	r2, r2, #2
 80054f0:	3014      	adds	r0, #20
 80054f2:	3114      	adds	r1, #20
 80054f4:	1884      	adds	r4, r0, r2
 80054f6:	4411      	add	r1, r2
 80054f8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80054fc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005500:	4295      	cmp	r5, r2
 8005502:	d003      	beq.n	800550c <__mcmp+0x28>
 8005504:	d305      	bcc.n	8005512 <__mcmp+0x2e>
 8005506:	2301      	movs	r3, #1
 8005508:	4618      	mov	r0, r3
 800550a:	bd30      	pop	{r4, r5, pc}
 800550c:	42a0      	cmp	r0, r4
 800550e:	d3f3      	bcc.n	80054f8 <__mcmp+0x14>
 8005510:	e7fa      	b.n	8005508 <__mcmp+0x24>
 8005512:	f04f 33ff 	mov.w	r3, #4294967295
 8005516:	e7f7      	b.n	8005508 <__mcmp+0x24>

08005518 <__mdiff>:
 8005518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800551c:	460d      	mov	r5, r1
 800551e:	4607      	mov	r7, r0
 8005520:	4611      	mov	r1, r2
 8005522:	4628      	mov	r0, r5
 8005524:	4614      	mov	r4, r2
 8005526:	f7ff ffdd 	bl	80054e4 <__mcmp>
 800552a:	1e06      	subs	r6, r0, #0
 800552c:	d108      	bne.n	8005540 <__mdiff+0x28>
 800552e:	4631      	mov	r1, r6
 8005530:	4638      	mov	r0, r7
 8005532:	f7ff fdc2 	bl	80050ba <_Balloc>
 8005536:	2301      	movs	r3, #1
 8005538:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800553c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005540:	bfa4      	itt	ge
 8005542:	4623      	movge	r3, r4
 8005544:	462c      	movge	r4, r5
 8005546:	4638      	mov	r0, r7
 8005548:	6861      	ldr	r1, [r4, #4]
 800554a:	bfa6      	itte	ge
 800554c:	461d      	movge	r5, r3
 800554e:	2600      	movge	r6, #0
 8005550:	2601      	movlt	r6, #1
 8005552:	f7ff fdb2 	bl	80050ba <_Balloc>
 8005556:	692b      	ldr	r3, [r5, #16]
 8005558:	60c6      	str	r6, [r0, #12]
 800555a:	6926      	ldr	r6, [r4, #16]
 800555c:	f105 0914 	add.w	r9, r5, #20
 8005560:	f104 0214 	add.w	r2, r4, #20
 8005564:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8005568:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800556c:	f100 0514 	add.w	r5, r0, #20
 8005570:	f04f 0e00 	mov.w	lr, #0
 8005574:	f852 ab04 	ldr.w	sl, [r2], #4
 8005578:	f859 4b04 	ldr.w	r4, [r9], #4
 800557c:	fa1e f18a 	uxtah	r1, lr, sl
 8005580:	b2a3      	uxth	r3, r4
 8005582:	1ac9      	subs	r1, r1, r3
 8005584:	0c23      	lsrs	r3, r4, #16
 8005586:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800558a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800558e:	b289      	uxth	r1, r1
 8005590:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8005594:	45c8      	cmp	r8, r9
 8005596:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800559a:	4694      	mov	ip, r2
 800559c:	f845 3b04 	str.w	r3, [r5], #4
 80055a0:	d8e8      	bhi.n	8005574 <__mdiff+0x5c>
 80055a2:	45bc      	cmp	ip, r7
 80055a4:	d304      	bcc.n	80055b0 <__mdiff+0x98>
 80055a6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80055aa:	b183      	cbz	r3, 80055ce <__mdiff+0xb6>
 80055ac:	6106      	str	r6, [r0, #16]
 80055ae:	e7c5      	b.n	800553c <__mdiff+0x24>
 80055b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80055b4:	fa1e f381 	uxtah	r3, lr, r1
 80055b8:	141a      	asrs	r2, r3, #16
 80055ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80055be:	b29b      	uxth	r3, r3
 80055c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055c4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80055c8:	f845 3b04 	str.w	r3, [r5], #4
 80055cc:	e7e9      	b.n	80055a2 <__mdiff+0x8a>
 80055ce:	3e01      	subs	r6, #1
 80055d0:	e7e9      	b.n	80055a6 <__mdiff+0x8e>

080055d2 <__d2b>:
 80055d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80055d6:	460e      	mov	r6, r1
 80055d8:	2101      	movs	r1, #1
 80055da:	ec59 8b10 	vmov	r8, r9, d0
 80055de:	4615      	mov	r5, r2
 80055e0:	f7ff fd6b 	bl	80050ba <_Balloc>
 80055e4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80055e8:	4607      	mov	r7, r0
 80055ea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80055ee:	bb34      	cbnz	r4, 800563e <__d2b+0x6c>
 80055f0:	9301      	str	r3, [sp, #4]
 80055f2:	f1b8 0300 	subs.w	r3, r8, #0
 80055f6:	d027      	beq.n	8005648 <__d2b+0x76>
 80055f8:	a802      	add	r0, sp, #8
 80055fa:	f840 3d08 	str.w	r3, [r0, #-8]!
 80055fe:	f7ff fe01 	bl	8005204 <__lo0bits>
 8005602:	9900      	ldr	r1, [sp, #0]
 8005604:	b1f0      	cbz	r0, 8005644 <__d2b+0x72>
 8005606:	9a01      	ldr	r2, [sp, #4]
 8005608:	f1c0 0320 	rsb	r3, r0, #32
 800560c:	fa02 f303 	lsl.w	r3, r2, r3
 8005610:	430b      	orrs	r3, r1
 8005612:	40c2      	lsrs	r2, r0
 8005614:	617b      	str	r3, [r7, #20]
 8005616:	9201      	str	r2, [sp, #4]
 8005618:	9b01      	ldr	r3, [sp, #4]
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	2b00      	cmp	r3, #0
 800561e:	bf14      	ite	ne
 8005620:	2102      	movne	r1, #2
 8005622:	2101      	moveq	r1, #1
 8005624:	6139      	str	r1, [r7, #16]
 8005626:	b1c4      	cbz	r4, 800565a <__d2b+0x88>
 8005628:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800562c:	4404      	add	r4, r0
 800562e:	6034      	str	r4, [r6, #0]
 8005630:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005634:	6028      	str	r0, [r5, #0]
 8005636:	4638      	mov	r0, r7
 8005638:	b003      	add	sp, #12
 800563a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800563e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005642:	e7d5      	b.n	80055f0 <__d2b+0x1e>
 8005644:	6179      	str	r1, [r7, #20]
 8005646:	e7e7      	b.n	8005618 <__d2b+0x46>
 8005648:	a801      	add	r0, sp, #4
 800564a:	f7ff fddb 	bl	8005204 <__lo0bits>
 800564e:	9b01      	ldr	r3, [sp, #4]
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	2101      	movs	r1, #1
 8005654:	6139      	str	r1, [r7, #16]
 8005656:	3020      	adds	r0, #32
 8005658:	e7e5      	b.n	8005626 <__d2b+0x54>
 800565a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800565e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005662:	6030      	str	r0, [r6, #0]
 8005664:	6918      	ldr	r0, [r3, #16]
 8005666:	f7ff fdae 	bl	80051c6 <__hi0bits>
 800566a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800566e:	e7e1      	b.n	8005634 <__d2b+0x62>

08005670 <_calloc_r>:
 8005670:	b538      	push	{r3, r4, r5, lr}
 8005672:	fb02 f401 	mul.w	r4, r2, r1
 8005676:	4621      	mov	r1, r4
 8005678:	f000 f808 	bl	800568c <_malloc_r>
 800567c:	4605      	mov	r5, r0
 800567e:	b118      	cbz	r0, 8005688 <_calloc_r+0x18>
 8005680:	4622      	mov	r2, r4
 8005682:	2100      	movs	r1, #0
 8005684:	f7fe fbee 	bl	8003e64 <memset>
 8005688:	4628      	mov	r0, r5
 800568a:	bd38      	pop	{r3, r4, r5, pc}

0800568c <_malloc_r>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	1ccd      	adds	r5, r1, #3
 8005690:	f025 0503 	bic.w	r5, r5, #3
 8005694:	3508      	adds	r5, #8
 8005696:	2d0c      	cmp	r5, #12
 8005698:	bf38      	it	cc
 800569a:	250c      	movcc	r5, #12
 800569c:	2d00      	cmp	r5, #0
 800569e:	4606      	mov	r6, r0
 80056a0:	db01      	blt.n	80056a6 <_malloc_r+0x1a>
 80056a2:	42a9      	cmp	r1, r5
 80056a4:	d903      	bls.n	80056ae <_malloc_r+0x22>
 80056a6:	230c      	movs	r3, #12
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	2000      	movs	r0, #0
 80056ac:	bd70      	pop	{r4, r5, r6, pc}
 80056ae:	f000 f869 	bl	8005784 <__malloc_lock>
 80056b2:	4a21      	ldr	r2, [pc, #132]	; (8005738 <_malloc_r+0xac>)
 80056b4:	6814      	ldr	r4, [r2, #0]
 80056b6:	4621      	mov	r1, r4
 80056b8:	b991      	cbnz	r1, 80056e0 <_malloc_r+0x54>
 80056ba:	4c20      	ldr	r4, [pc, #128]	; (800573c <_malloc_r+0xb0>)
 80056bc:	6823      	ldr	r3, [r4, #0]
 80056be:	b91b      	cbnz	r3, 80056c8 <_malloc_r+0x3c>
 80056c0:	4630      	mov	r0, r6
 80056c2:	f000 f83d 	bl	8005740 <_sbrk_r>
 80056c6:	6020      	str	r0, [r4, #0]
 80056c8:	4629      	mov	r1, r5
 80056ca:	4630      	mov	r0, r6
 80056cc:	f000 f838 	bl	8005740 <_sbrk_r>
 80056d0:	1c43      	adds	r3, r0, #1
 80056d2:	d124      	bne.n	800571e <_malloc_r+0x92>
 80056d4:	230c      	movs	r3, #12
 80056d6:	6033      	str	r3, [r6, #0]
 80056d8:	4630      	mov	r0, r6
 80056da:	f000 f854 	bl	8005786 <__malloc_unlock>
 80056de:	e7e4      	b.n	80056aa <_malloc_r+0x1e>
 80056e0:	680b      	ldr	r3, [r1, #0]
 80056e2:	1b5b      	subs	r3, r3, r5
 80056e4:	d418      	bmi.n	8005718 <_malloc_r+0x8c>
 80056e6:	2b0b      	cmp	r3, #11
 80056e8:	d90f      	bls.n	800570a <_malloc_r+0x7e>
 80056ea:	600b      	str	r3, [r1, #0]
 80056ec:	50cd      	str	r5, [r1, r3]
 80056ee:	18cc      	adds	r4, r1, r3
 80056f0:	4630      	mov	r0, r6
 80056f2:	f000 f848 	bl	8005786 <__malloc_unlock>
 80056f6:	f104 000b 	add.w	r0, r4, #11
 80056fa:	1d23      	adds	r3, r4, #4
 80056fc:	f020 0007 	bic.w	r0, r0, #7
 8005700:	1ac3      	subs	r3, r0, r3
 8005702:	d0d3      	beq.n	80056ac <_malloc_r+0x20>
 8005704:	425a      	negs	r2, r3
 8005706:	50e2      	str	r2, [r4, r3]
 8005708:	e7d0      	b.n	80056ac <_malloc_r+0x20>
 800570a:	428c      	cmp	r4, r1
 800570c:	684b      	ldr	r3, [r1, #4]
 800570e:	bf16      	itet	ne
 8005710:	6063      	strne	r3, [r4, #4]
 8005712:	6013      	streq	r3, [r2, #0]
 8005714:	460c      	movne	r4, r1
 8005716:	e7eb      	b.n	80056f0 <_malloc_r+0x64>
 8005718:	460c      	mov	r4, r1
 800571a:	6849      	ldr	r1, [r1, #4]
 800571c:	e7cc      	b.n	80056b8 <_malloc_r+0x2c>
 800571e:	1cc4      	adds	r4, r0, #3
 8005720:	f024 0403 	bic.w	r4, r4, #3
 8005724:	42a0      	cmp	r0, r4
 8005726:	d005      	beq.n	8005734 <_malloc_r+0xa8>
 8005728:	1a21      	subs	r1, r4, r0
 800572a:	4630      	mov	r0, r6
 800572c:	f000 f808 	bl	8005740 <_sbrk_r>
 8005730:	3001      	adds	r0, #1
 8005732:	d0cf      	beq.n	80056d4 <_malloc_r+0x48>
 8005734:	6025      	str	r5, [r4, #0]
 8005736:	e7db      	b.n	80056f0 <_malloc_r+0x64>
 8005738:	200001fc 	.word	0x200001fc
 800573c:	20000200 	.word	0x20000200

08005740 <_sbrk_r>:
 8005740:	b538      	push	{r3, r4, r5, lr}
 8005742:	4c06      	ldr	r4, [pc, #24]	; (800575c <_sbrk_r+0x1c>)
 8005744:	2300      	movs	r3, #0
 8005746:	4605      	mov	r5, r0
 8005748:	4608      	mov	r0, r1
 800574a:	6023      	str	r3, [r4, #0]
 800574c:	f7fb fe08 	bl	8001360 <_sbrk>
 8005750:	1c43      	adds	r3, r0, #1
 8005752:	d102      	bne.n	800575a <_sbrk_r+0x1a>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	b103      	cbz	r3, 800575a <_sbrk_r+0x1a>
 8005758:	602b      	str	r3, [r5, #0]
 800575a:	bd38      	pop	{r3, r4, r5, pc}
 800575c:	200002a4 	.word	0x200002a4

08005760 <__ascii_mbtowc>:
 8005760:	b082      	sub	sp, #8
 8005762:	b901      	cbnz	r1, 8005766 <__ascii_mbtowc+0x6>
 8005764:	a901      	add	r1, sp, #4
 8005766:	b142      	cbz	r2, 800577a <__ascii_mbtowc+0x1a>
 8005768:	b14b      	cbz	r3, 800577e <__ascii_mbtowc+0x1e>
 800576a:	7813      	ldrb	r3, [r2, #0]
 800576c:	600b      	str	r3, [r1, #0]
 800576e:	7812      	ldrb	r2, [r2, #0]
 8005770:	1c10      	adds	r0, r2, #0
 8005772:	bf18      	it	ne
 8005774:	2001      	movne	r0, #1
 8005776:	b002      	add	sp, #8
 8005778:	4770      	bx	lr
 800577a:	4610      	mov	r0, r2
 800577c:	e7fb      	b.n	8005776 <__ascii_mbtowc+0x16>
 800577e:	f06f 0001 	mvn.w	r0, #1
 8005782:	e7f8      	b.n	8005776 <__ascii_mbtowc+0x16>

08005784 <__malloc_lock>:
 8005784:	4770      	bx	lr

08005786 <__malloc_unlock>:
 8005786:	4770      	bx	lr

08005788 <__ascii_wctomb>:
 8005788:	b149      	cbz	r1, 800579e <__ascii_wctomb+0x16>
 800578a:	2aff      	cmp	r2, #255	; 0xff
 800578c:	bf85      	ittet	hi
 800578e:	238a      	movhi	r3, #138	; 0x8a
 8005790:	6003      	strhi	r3, [r0, #0]
 8005792:	700a      	strbls	r2, [r1, #0]
 8005794:	f04f 30ff 	movhi.w	r0, #4294967295
 8005798:	bf98      	it	ls
 800579a:	2001      	movls	r0, #1
 800579c:	4770      	bx	lr
 800579e:	4608      	mov	r0, r1
 80057a0:	4770      	bx	lr
	...

080057a4 <_init>:
 80057a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a6:	bf00      	nop
 80057a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057aa:	bc08      	pop	{r3}
 80057ac:	469e      	mov	lr, r3
 80057ae:	4770      	bx	lr

080057b0 <_fini>:
 80057b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057b2:	bf00      	nop
 80057b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057b6:	bc08      	pop	{r3}
 80057b8:	469e      	mov	lr, r3
 80057ba:	4770      	bx	lr
